// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: infra/cros/recovery/tlw/models.proto

package tlw

import (
	xmlrpc "go.chromium.org/chromiumos/config/go/api/test/xmlrpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Action represents action expecting to perform on power supplier.
type RunRPMActionRequest_Action int32

const (
	RunRPMActionRequest_UNSPECIFIED RunRPMActionRequest_Action = 0
	// Switch state to ON.
	RunRPMActionRequest_ON RunRPMActionRequest_Action = 1
	// Switch state to OFF.
	RunRPMActionRequest_OFF RunRPMActionRequest_Action = 2
	// Switch state to OFF and then ON with delay 5 seconds.
	RunRPMActionRequest_CYCLE RunRPMActionRequest_Action = 3
)

// Enum value maps for RunRPMActionRequest_Action.
var (
	RunRPMActionRequest_Action_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ON",
		2: "OFF",
		3: "CYCLE",
	}
	RunRPMActionRequest_Action_value = map[string]int32{
		"UNSPECIFIED": 0,
		"ON":          1,
		"OFF":         2,
		"CYCLE":       3,
	}
)

func (x RunRPMActionRequest_Action) Enum() *RunRPMActionRequest_Action {
	p := new(RunRPMActionRequest_Action)
	*p = x
	return p
}

func (x RunRPMActionRequest_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunRPMActionRequest_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[0].Descriptor()
}

func (RunRPMActionRequest_Action) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[0]
}

func (x RunRPMActionRequest_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunRPMActionRequest_Action.Descriptor instead.
func (RunRPMActionRequest_Action) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{4, 0}
}

// RPMState describes the state of RPM outlet.
type RPMOutlet_State int32

const (
	RPMOutlet_UNSPECIFIED RPMOutlet_State = 0
	// Configuration for RPM outlet missed which block from execution the
	// actions.
	RPMOutlet_MISSING_CONFIG RPMOutlet_State = 1
	// Configuration for RPM outlet provided but does not working which can be
	// several reasons.
	RPMOutlet_WRONG_CONFIG RPMOutlet_State = 2
	// RPM outlet can successfully perform the actions.
	RPMOutlet_WORKING RPMOutlet_State = 3
)

// Enum value maps for RPMOutlet_State.
var (
	RPMOutlet_State_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "MISSING_CONFIG",
		2: "WRONG_CONFIG",
		3: "WORKING",
	}
	RPMOutlet_State_value = map[string]int32{
		"UNSPECIFIED":    0,
		"MISSING_CONFIG": 1,
		"WRONG_CONFIG":   2,
		"WORKING":        3,
	}
)

func (x RPMOutlet_State) Enum() *RPMOutlet_State {
	p := new(RPMOutlet_State)
	*p = x
	return p
}

func (x RPMOutlet_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RPMOutlet_State) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[1].Descriptor()
}

func (RPMOutlet_State) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[1]
}

func (x RPMOutlet_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RPMOutlet_State.Descriptor instead.
func (RPMOutlet_State) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{5, 0}
}

// State of the device.
type WifiRouterHost_State int32

const (
	WifiRouterHost_UNSPECIFIED WifiRouterHost_State = 0
	WifiRouterHost_WORKING     WifiRouterHost_State = 1
	WifiRouterHost_BROKEN      WifiRouterHost_State = 2
)

// Enum value maps for WifiRouterHost_State.
var (
	WifiRouterHost_State_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "WORKING",
		2: "BROKEN",
	}
	WifiRouterHost_State_value = map[string]int32{
		"UNSPECIFIED": 0,
		"WORKING":     1,
		"BROKEN":      2,
	}
)

func (x WifiRouterHost_State) Enum() *WifiRouterHost_State {
	p := new(WifiRouterHost_State)
	*p = x
	return p
}

func (x WifiRouterHost_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiRouterHost_State) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[2].Descriptor()
}

func (WifiRouterHost_State) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[2]
}

func (x WifiRouterHost_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiRouterHost_State.Descriptor instead.
func (WifiRouterHost_State) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{6, 0}
}

// VersionType represents type of devices requesting the stable version.
type VersionRequest_VersionType int32

const (
	VersionRequest_UNSPECIFIED VersionRequest_VersionType = 0
	// Chrome OS.
	VersionRequest_CROS VersionRequest_VersionType = 1
	// AP/PCAP peripheral.
	VersionRequest_WIFI_ROUTER VersionRequest_VersionType = 2
)

// Enum value maps for VersionRequest_VersionType.
var (
	VersionRequest_VersionType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "CROS",
		2: "WIFI_ROUTER",
	}
	VersionRequest_VersionType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"CROS":        1,
		"WIFI_ROUTER": 2,
	}
)

func (x VersionRequest_VersionType) Enum() *VersionRequest_VersionType {
	p := new(VersionRequest_VersionType)
	*p = x
	return p
}

func (x VersionRequest_VersionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VersionRequest_VersionType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[3].Descriptor()
}

func (VersionRequest_VersionType) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[3]
}

func (x VersionRequest_VersionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VersionRequest_VersionType.Descriptor instead.
func (VersionRequest_VersionType) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{7, 0}
}

// LoopbackState representes states for loopback dongle.
type DUTAudio_LoopbackState int32

const (
	DUTAudio_LOOPBACK_UNSPECIFIED DUTAudio_LoopbackState = 0
	// Device and software on it is working as expected.
	DUTAudio_LOOPBACK_WORKING DUTAudio_LoopbackState = 1
)

// Enum value maps for DUTAudio_LoopbackState.
var (
	DUTAudio_LoopbackState_name = map[int32]string{
		0: "LOOPBACK_UNSPECIFIED",
		1: "LOOPBACK_WORKING",
	}
	DUTAudio_LoopbackState_value = map[string]int32{
		"LOOPBACK_UNSPECIFIED": 0,
		"LOOPBACK_WORKING":     1,
	}
)

func (x DUTAudio_LoopbackState) Enum() *DUTAudio_LoopbackState {
	p := new(DUTAudio_LoopbackState)
	*p = x
	return p
}

func (x DUTAudio_LoopbackState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DUTAudio_LoopbackState) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[4].Descriptor()
}

func (DUTAudio_LoopbackState) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[4]
}

func (x DUTAudio_LoopbackState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DUTAudio_LoopbackState.Descriptor instead.
func (DUTAudio_LoopbackState) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{9, 0}
}

// RunRequest represents result of executed command.
type RunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Command executed on the resource.
	Command string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	// Command arguments.
	Args []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// Command execution timeout.
	Timeout *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{0}
}

func (x *RunRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *RunRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *RunRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RunRequest) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// ProvisionRequest provides data to perform provisioning of the device.
type ProvisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Path to system image.
	// Path to the GS file.
	// Example: gs://bucket/file_name
	SystemImagePath string `protobuf:"bytes,2,opt,name=system_image_path,json=systemImagePath,proto3" json:"system_image_path,omitempty"`
	// Prevent reboot during provision OS.
	PreventReboot bool `protobuf:"varint,3,opt,name=prevent_reboot,json=preventReboot,proto3" json:"prevent_reboot,omitempty"`
}

func (x *ProvisionRequest) Reset() {
	*x = ProvisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionRequest) ProtoMessage() {}

func (x *ProvisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionRequest.ProtoReflect.Descriptor instead.
func (*ProvisionRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{1}
}

func (x *ProvisionRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ProvisionRequest) GetSystemImagePath() string {
	if x != nil {
		return x.SystemImagePath
	}
	return ""
}

func (x *ProvisionRequest) GetPreventReboot() bool {
	if x != nil {
		return x.PreventReboot
	}
	return false
}

// CallBluetoothPeerRequest represents data to run command on bluetooth peer.
type CallBluetoothPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Method called on service.
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// Arguments provided to the service.
	Args []*xmlrpc.Value `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *CallBluetoothPeerRequest) Reset() {
	*x = CallBluetoothPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallBluetoothPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallBluetoothPeerRequest) ProtoMessage() {}

func (x *CallBluetoothPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallBluetoothPeerRequest.ProtoReflect.Descriptor instead.
func (*CallBluetoothPeerRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{2}
}

func (x *CallBluetoothPeerRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *CallBluetoothPeerRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CallBluetoothPeerRequest) GetArgs() []*xmlrpc.Value {
	if x != nil {
		return x.Args
	}
	return nil
}

// CallBluetoothPeerResponse represents result data from running command on
// bluetooth peer.
type CallBluetoothPeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *xmlrpc.Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Fault bool          `protobuf:"varint,2,opt,name=fault,proto3" json:"fault,omitempty"`
}

func (x *CallBluetoothPeerResponse) Reset() {
	*x = CallBluetoothPeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallBluetoothPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallBluetoothPeerResponse) ProtoMessage() {}

func (x *CallBluetoothPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallBluetoothPeerResponse.ProtoReflect.Descriptor instead.
func (*CallBluetoothPeerResponse) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{3}
}

func (x *CallBluetoothPeerResponse) GetValue() *xmlrpc.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CallBluetoothPeerResponse) GetFault() bool {
	if x != nil {
		return x.Fault
	}
	return false
}

// RunRPMActionRequest represents data to perform action on RPM outlet.
type RunRPMActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hostname of the DUT.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Hostname of the RPM power unit, e.g. "chromeos6-row13_14-rack15-rpm2".
	RpmHostname string `protobuf:"bytes,2,opt,name=rpm_hostname,json=rpmHostname,proto3" json:"rpm_hostname,omitempty"`
	// Name to locate a specific outlet from a RPM power unit, e.g. ".A7".
	RpmOutlet string `protobuf:"bytes,3,opt,name=rpm_outlet,json=rpmOutlet,proto3" json:"rpm_outlet,omitempty"`
	// Expected state to switch on.
	Action RunRPMActionRequest_Action `protobuf:"varint,4,opt,name=action,proto3,enum=chromeos.recovery.RunRPMActionRequest_Action" json:"action,omitempty"`
}

func (x *RunRPMActionRequest) Reset() {
	*x = RunRPMActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRPMActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRPMActionRequest) ProtoMessage() {}

func (x *RunRPMActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRPMActionRequest.ProtoReflect.Descriptor instead.
func (*RunRPMActionRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{4}
}

func (x *RunRPMActionRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RunRPMActionRequest) GetRpmHostname() string {
	if x != nil {
		return x.RpmHostname
	}
	return ""
}

func (x *RunRPMActionRequest) GetRpmOutlet() string {
	if x != nil {
		return x.RpmOutlet
	}
	return ""
}

func (x *RunRPMActionRequest) GetAction() RunRPMActionRequest_Action {
	if x != nil {
		return x.Action
	}
	return RunRPMActionRequest_UNSPECIFIED
}

// RPMOutlet is remote power management outlet allows perform an action to do
// OFF/ON/CYCLE on it.
type RPMOutlet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hostname of the RPM power unit, e.g. "chromeos6-row13_14-rack15-rpm2".
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Name to locate a specific outlet from a RPM power unit, e.g. ".A7".
	Outlet string `protobuf:"bytes,2,opt,name=outlet,proto3" json:"outlet,omitempty"`
	// State of the component.
	State RPMOutlet_State `protobuf:"varint,3,opt,name=state,proto3,enum=chromeos.recovery.RPMOutlet_State" json:"state,omitempty"`
}

func (x *RPMOutlet) Reset() {
	*x = RPMOutlet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPMOutlet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPMOutlet) ProtoMessage() {}

func (x *RPMOutlet) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPMOutlet.ProtoReflect.Descriptor instead.
func (*RPMOutlet) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{5}
}

func (x *RPMOutlet) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RPMOutlet) GetOutlet() string {
	if x != nil {
		return x.Outlet
	}
	return ""
}

func (x *RPMOutlet) GetState() RPMOutlet_State {
	if x != nil {
		return x.State
	}
	return RPMOutlet_UNSPECIFIED
}

// Router devices
type WifiRouterHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name name of router device e.g. "chromeos15-row99-rack33-host105-router".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The state of the wifi router.
	State WifiRouterHost_State `protobuf:"varint,2,opt,name=state,proto3,enum=chromeos.recovery.WifiRouterHost_State" json:"state,omitempty"`
	// The model of the router.
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// The board of the router.
	Board string `protobuf:"bytes,4,opt,name=board,proto3" json:"board,omitempty"`
	// RPMOutlet the router power connects to if it exists.
	RPMOutlet *RPMOutlet `protobuf:"bytes,5,opt,name=RPMOutlet,proto3" json:"RPMOutlet,omitempty"`
}

func (x *WifiRouterHost) Reset() {
	*x = WifiRouterHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiRouterHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiRouterHost) ProtoMessage() {}

func (x *WifiRouterHost) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiRouterHost.ProtoReflect.Descriptor instead.
func (*WifiRouterHost) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{6}
}

func (x *WifiRouterHost) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WifiRouterHost) GetState() WifiRouterHost_State {
	if x != nil {
		return x.State
	}
	return WifiRouterHost_UNSPECIFIED
}

func (x *WifiRouterHost) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *WifiRouterHost) GetBoard() string {
	if x != nil {
		return x.Board
	}
	return ""
}

func (x *WifiRouterHost) GetRPMOutlet() *RPMOutlet {
	if x != nil {
		return x.RPMOutlet
	}
	return nil
}

// VersionRequest holds data for version service request.
type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of device.
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Version type describe type of versions and device type associated with
	// that.
	Type VersionRequest_VersionType `protobuf:"varint,2,opt,name=type,proto3,enum=chromeos.recovery.VersionRequest_VersionType" json:"type,omitempty"`
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{7}
}

func (x *VersionRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *VersionRequest) GetType() VersionRequest_VersionType {
	if x != nil {
		return x.Type
	}
	return VersionRequest_UNSPECIFIED
}

// VersionResponse holds data received from service.
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All version values.
	Value map[string]string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{8}
}

func (x *VersionResponse) GetValue() map[string]string {
	if x != nil {
		return x.Value
	}
	return nil
}

// CrosAudio holds infor for audio information of the DUT.
type DUTAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicate if the DUT is housed in an audio box to record / replay audio
	// for audio testing.
	InBox bool `protobuf:"varint,1,opt,name=in_box,json=inBox,proto3" json:"in_box,omitempty"`
	// Indicate if the DUT is connected to Atrus speakermic
	Atrus bool `protobuf:"varint,2,opt,name=atrus,proto3" json:"atrus,omitempty"`
	// Indicate if the DUT is connected to chameleon through static audio cable
	StaticCable bool `protobuf:"varint,3,opt,name=static_cable,json=staticCable,proto3" json:"static_cable,omitempty"`
	// Audio loopback dongle is plugged in.
	LoopbackState DUTAudio_LoopbackState `protobuf:"varint,4,opt,name=loopback_state,json=loopbackState,proto3,enum=chromeos.recovery.DUTAudio_LoopbackState" json:"loopback_state,omitempty"`
}

func (x *DUTAudio) Reset() {
	*x = DUTAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DUTAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DUTAudio) ProtoMessage() {}

func (x *DUTAudio) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DUTAudio.ProtoReflect.Descriptor instead.
func (*DUTAudio) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{9}
}

func (x *DUTAudio) GetInBox() bool {
	if x != nil {
		return x.InBox
	}
	return false
}

func (x *DUTAudio) GetAtrus() bool {
	if x != nil {
		return x.Atrus
	}
	return false
}

func (x *DUTAudio) GetStaticCable() bool {
	if x != nil {
		return x.StaticCable
	}
	return false
}

func (x *DUTAudio) GetLoopbackState() DUTAudio_LoopbackState {
	if x != nil {
		return x.LoopbackState
	}
	return DUTAudio_LOOPBACK_UNSPECIFIED
}

// ServodOption represents options to start servod.
type ServodOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Board of DUT connected to servod.
	DutBoard string `protobuf:"bytes,1,opt,name=dut_board,json=dutBoard,proto3" json:"dut_board,omitempty"`
	// Model of DUT connected to servod.
	DutModel string `protobuf:"bytes,2,opt,name=dut_model,json=dutModel,proto3" json:"dut_model,omitempty"`
	// Port assigned to servod.
	ServodPort int32 `protobuf:"varint,3,opt,name=servod_port,json=servodPort,proto3" json:"servod_port,omitempty"`
	// Servo board serial.
	ServoSerial string `protobuf:"bytes,4,opt,name=servo_serial,json=servoSerial,proto3" json:"servo_serial,omitempty"`
	// Specified dual setup for servod.
	ServoDual bool `protobuf:"varint,5,opt,name=servo_dual,json=servoDual,proto3" json:"servo_dual,omitempty"`
	// Specified if need apply CR50 config.
	UseCr50Config bool `protobuf:"varint,6,opt,name=use_cr50_config,json=useCr50Config,proto3" json:"use_cr50_config,omitempty"`
	// Use recovery mode when start servod.
	RecoveryMode bool `protobuf:"varint,7,opt,name=recovery_mode,json=recoveryMode,proto3" json:"recovery_mode,omitempty"`
}

func (x *ServodOptions) Reset() {
	*x = ServodOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServodOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServodOptions) ProtoMessage() {}

func (x *ServodOptions) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServodOptions.ProtoReflect.Descriptor instead.
func (*ServodOptions) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{10}
}

func (x *ServodOptions) GetDutBoard() string {
	if x != nil {
		return x.DutBoard
	}
	return ""
}

func (x *ServodOptions) GetDutModel() string {
	if x != nil {
		return x.DutModel
	}
	return ""
}

func (x *ServodOptions) GetServodPort() int32 {
	if x != nil {
		return x.ServodPort
	}
	return 0
}

func (x *ServodOptions) GetServoSerial() string {
	if x != nil {
		return x.ServoSerial
	}
	return ""
}

func (x *ServodOptions) GetServoDual() bool {
	if x != nil {
		return x.ServoDual
	}
	return false
}

func (x *ServodOptions) GetUseCr50Config() bool {
	if x != nil {
		return x.UseCr50Config
	}
	return false
}

func (x *ServodOptions) GetRecoveryMode() bool {
	if x != nil {
		return x.RecoveryMode
	}
	return false
}

var File_infra_cros_recovery_tlw_models_proto protoreflect.FileDescriptor

var file_infra_cros_recovery_tlw_models_proto_rawDesc = []byte{
	0x0a, 0x24, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x74, 0x6c, 0x77, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x56, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x78, 0x6d,
	0x6c, 0x72, 0x70, 0x63, 0x2f, 0x78, 0x6d, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0x81, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x62,
	0x6f, 0x6f, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x78, 0x6d, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x71, 0x0a, 0x19, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f,
	0x6f, 0x74, 0x68, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x78, 0x6d, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x52, 0x50, 0x4d,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x70, 0x6d,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x70, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x70, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x70, 0x6d, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x52, 0x75, 0x6e, 0x52, 0x50, 0x4d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10, 0x03, 0x22, 0xc6, 0x01, 0x0a, 0x09, 0x52, 0x50,
	0x4d, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x52,
	0x50, 0x4d, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x22, 0xfe, 0x01, 0x0a, 0x0e, 0x57, 0x69, 0x66, 0x69, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x57, 0x69, 0x66,
	0x69, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x52, 0x50, 0x4d, 0x4f, 0x75, 0x74, 0x6c, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x50, 0x4d, 0x4f,
	0x75, 0x74, 0x6c, 0x65, 0x74, 0x52, 0x09, 0x52, 0x50, 0x4d, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74,
	0x22, 0x31, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x4f, 0x4b, 0x45,
	0x4e, 0x10, 0x02, 0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x52, 0x4f, 0x53, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x22, 0x90, 0x01, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xed, 0x01, 0x0a, 0x08, 0x44, 0x55, 0x54, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x6e, 0x42, 0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74, 0x72, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x74, 0x72, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x50, 0x0a, 0x0e, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x55, 0x54,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x3f, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x22, 0xf9, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x75, 0x74, 0x5f, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x74, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x5f, 0x64, 0x75, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x44, 0x75,
	0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x72, 0x35, 0x30, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65,
	0x43, 0x72, 0x35, 0x30, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x1d, 0x5a, 0x1b, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x74, 0x6c, 0x77, 0x3b, 0x74, 0x6c, 0x77, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_cros_recovery_tlw_models_proto_rawDescOnce sync.Once
	file_infra_cros_recovery_tlw_models_proto_rawDescData = file_infra_cros_recovery_tlw_models_proto_rawDesc
)

func file_infra_cros_recovery_tlw_models_proto_rawDescGZIP() []byte {
	file_infra_cros_recovery_tlw_models_proto_rawDescOnce.Do(func() {
		file_infra_cros_recovery_tlw_models_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_cros_recovery_tlw_models_proto_rawDescData)
	})
	return file_infra_cros_recovery_tlw_models_proto_rawDescData
}

var file_infra_cros_recovery_tlw_models_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_infra_cros_recovery_tlw_models_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_infra_cros_recovery_tlw_models_proto_goTypes = []interface{}{
	(RunRPMActionRequest_Action)(0),   // 0: chromeos.recovery.RunRPMActionRequest.Action
	(RPMOutlet_State)(0),              // 1: chromeos.recovery.RPMOutlet.State
	(WifiRouterHost_State)(0),         // 2: chromeos.recovery.WifiRouterHost.State
	(VersionRequest_VersionType)(0),   // 3: chromeos.recovery.VersionRequest.VersionType
	(DUTAudio_LoopbackState)(0),       // 4: chromeos.recovery.DUTAudio.LoopbackState
	(*RunRequest)(nil),                // 5: chromeos.recovery.RunRequest
	(*ProvisionRequest)(nil),          // 6: chromeos.recovery.ProvisionRequest
	(*CallBluetoothPeerRequest)(nil),  // 7: chromeos.recovery.CallBluetoothPeerRequest
	(*CallBluetoothPeerResponse)(nil), // 8: chromeos.recovery.CallBluetoothPeerResponse
	(*RunRPMActionRequest)(nil),       // 9: chromeos.recovery.RunRPMActionRequest
	(*RPMOutlet)(nil),                 // 10: chromeos.recovery.RPMOutlet
	(*WifiRouterHost)(nil),            // 11: chromeos.recovery.WifiRouterHost
	(*VersionRequest)(nil),            // 12: chromeos.recovery.VersionRequest
	(*VersionResponse)(nil),           // 13: chromeos.recovery.VersionResponse
	(*DUTAudio)(nil),                  // 14: chromeos.recovery.DUTAudio
	(*ServodOptions)(nil),             // 15: chromeos.recovery.ServodOptions
	nil,                               // 16: chromeos.recovery.VersionResponse.ValueEntry
	(*durationpb.Duration)(nil),       // 17: google.protobuf.Duration
	(*xmlrpc.Value)(nil),              // 18: chromiumos.config.api.test.xmlrpc.Value
}
var file_infra_cros_recovery_tlw_models_proto_depIdxs = []int32{
	17, // 0: chromeos.recovery.RunRequest.timeout:type_name -> google.protobuf.Duration
	18, // 1: chromeos.recovery.CallBluetoothPeerRequest.args:type_name -> chromiumos.config.api.test.xmlrpc.Value
	18, // 2: chromeos.recovery.CallBluetoothPeerResponse.value:type_name -> chromiumos.config.api.test.xmlrpc.Value
	0,  // 3: chromeos.recovery.RunRPMActionRequest.action:type_name -> chromeos.recovery.RunRPMActionRequest.Action
	1,  // 4: chromeos.recovery.RPMOutlet.state:type_name -> chromeos.recovery.RPMOutlet.State
	2,  // 5: chromeos.recovery.WifiRouterHost.state:type_name -> chromeos.recovery.WifiRouterHost.State
	10, // 6: chromeos.recovery.WifiRouterHost.RPMOutlet:type_name -> chromeos.recovery.RPMOutlet
	3,  // 7: chromeos.recovery.VersionRequest.type:type_name -> chromeos.recovery.VersionRequest.VersionType
	16, // 8: chromeos.recovery.VersionResponse.value:type_name -> chromeos.recovery.VersionResponse.ValueEntry
	4,  // 9: chromeos.recovery.DUTAudio.loopback_state:type_name -> chromeos.recovery.DUTAudio.LoopbackState
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_infra_cros_recovery_tlw_models_proto_init() }
func file_infra_cros_recovery_tlw_models_proto_init() {
	if File_infra_cros_recovery_tlw_models_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_cros_recovery_tlw_models_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallBluetoothPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallBluetoothPeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRPMActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPMOutlet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiRouterHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DUTAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServodOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_cros_recovery_tlw_models_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_cros_recovery_tlw_models_proto_goTypes,
		DependencyIndexes: file_infra_cros_recovery_tlw_models_proto_depIdxs,
		EnumInfos:         file_infra_cros_recovery_tlw_models_proto_enumTypes,
		MessageInfos:      file_infra_cros_recovery_tlw_models_proto_msgTypes,
	}.Build()
	File_infra_cros_recovery_tlw_models_proto = out.File
	file_infra_cros_recovery_tlw_models_proto_rawDesc = nil
	file_infra_cros_recovery_tlw_models_proto_goTypes = nil
	file_infra_cros_recovery_tlw_models_proto_depIdxs = nil
}
