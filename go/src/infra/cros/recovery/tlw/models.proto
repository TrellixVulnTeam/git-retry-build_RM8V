// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package chromeos.recovery;

option go_package = "infra/cros/recovery/tlw;tlw";

import "google/protobuf/duration.proto";
import "go.chromium.org/chromiumos/config/proto/chromiumos/config/api/test/xmlrpc/xmlrpc.proto";

// RunRequest represents result of executed command.
message RunRequest {
  // Resource name
  string resource = 1;
  // Command executed on the resource.
  string command = 2;
  // Command arguments.
  repeated string args = 3;
  // Command execution timeout.
  google.protobuf.Duration timeout = 4;
}

// ProvisionRequest provides data to perform provisioning of the device.
message ProvisionRequest {
  // Resource name
  string resource = 1;
  // Path to system image.
  // Path to the GS file.
  // Example: gs://bucket/file_name
  string system_image_path = 2;
  // Prevent reboot during provision OS.
  bool prevent_reboot = 3;
}

// CallBluetoothPeerRequest represents data to run command on bluetooth peer.
message CallBluetoothPeerRequest {
  // Resource name
  string resource = 1;
  // Method called on service.
  string method = 2;
  // Arguments provided to the service.
  repeated chromiumos.config.api.test.xmlrpc.Value args = 3;
}

// CallBluetoothPeerResponse represents result data from running command on
// bluetooth peer.
message CallBluetoothPeerResponse {
  chromiumos.config.api.test.xmlrpc.Value value = 1;
  bool fault = 2;
}

// RunRPMActionRequest represents data to perform action on RPM outlet.
message RunRPMActionRequest {
  // Hostname of the DUT.
  string hostname = 1;
  // Hostname of the RPM power unit, e.g. "chromeos6-row13_14-rack15-rpm2".
  string rpm_hostname = 2;
  // Name to locate a specific outlet from a RPM power unit, e.g. ".A7".
  string rpm_outlet = 3;
  // Action represents action expecting to perform on power supplier.
  enum Action {
    UNSPECIFIED = 0;
    // Switch state to ON.
    ON = 1;
    // Switch state to OFF.
    OFF = 2;
    // Switch state to OFF and then ON with delay 5 seconds.
    CYCLE = 3;
  }
  // Expected state to switch on.
  Action action = 4;
}

// RPMOutlet is remote power management outlet allows perform an action to do
// OFF/ON/CYCLE on it.
message RPMOutlet {
  // Hostname of the RPM power unit, e.g. "chromeos6-row13_14-rack15-rpm2".
  string hostname = 1;
  // Name to locate a specific outlet from a RPM power unit, e.g. ".A7".
  string outlet = 2;
  // RPMState describes the state of RPM outlet.
  enum State {
    UNSPECIFIED = 0;
    // Configuration for RPM outlet missed which block from execution the
    // actions.
    MISSING_CONFIG = 1;
    // Configuration for RPM outlet provided but does not working which can be
    // several reasons.
    WRONG_CONFIG = 2;
    // RPM outlet can successfully perform the actions.
    WORKING = 3;
  }
  // State of the component.
  State state = 3;
}

// Router devices
message WifiRouterHost {
  // Name name of router device e.g. "chromeos15-row99-rack33-host105-router".
  string name = 1;
  // State of the device.
  enum State {
    UNSPECIFIED = 0;
    WORKING = 1;
    BROKEN = 2;
  }
  // The state of the wifi router.
  State state = 2;
  // The model of the router.
  string model = 3;
  // The board of the router.
  string board = 4;
  // RPMOutlet the router power connects to if it exists.
  RPMOutlet RPMOutlet = 5;
}

// VersionRequest holds data for version service request.
message VersionRequest {
  // Resource name of device.
  string resource = 1;
  // VersionType represents type of devices requesting the stable version.
  enum VersionType {
    UNSPECIFIED = 0;
    // Chrome OS.
    CROS = 1;
    // AP/PCAP peripheral.
    WIFI_ROUTER = 2;
  }
  // Version type describe type of versions and device type associated with
  // that.
  VersionType type = 2;
}

// VersionResponse holds data received from service.
message VersionResponse {
  // All version values.
  map<string, string> value = 1;
}

// CrosAudio holds infor for audio information of the DUT.
message DUTAudio {
  // Indicate if the DUT is housed in an audio box to record / replay audio
  // for audio testing.
  bool in_box = 1;
  // Indicate if the DUT is connected to Atrus speakermic
  bool atrus = 2;
  // Indicate if the DUT is connected to chameleon through static audio cable
  bool static_cable = 3;
  // LoopbackState representes states for loopback dongle.
  enum LoopbackState {
    LOOPBACK_UNSPECIFIED = 0;
    // Device and software on it is working as expected.
    LOOPBACK_WORKING = 1;
  }
  // Audio loopback dongle is plugged in.
  LoopbackState loopback_state = 4;
}

// ServodOption represents options to start servod.
message ServodOptions {
  // Board of DUT connected to servod.
	string dut_board = 1;
  // Model of DUT connected to servod.
	string dut_model = 2;
  // Port assigned to servod.
	int32 servod_port = 3;
  // Servo board serial.
	string servo_serial = 4;
  // Specified dual setup for servod.
	bool servo_dual = 5;
  // Specified if need apply CR50 config.
	bool use_cr50_config = 6;
  // Use recovery mode when start servod.
	bool recovery_mode = 7;
}
