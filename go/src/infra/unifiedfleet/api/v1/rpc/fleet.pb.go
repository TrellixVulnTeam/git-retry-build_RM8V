// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: infra/unifiedfleet/api/v1/rpc/fleet.proto

package ufspb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	models "infra/unifiedfleet/api/v1/models"
	lab "infra/unifiedfleet/api/v1/models/chromeos/lab"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetDeviceDataResponse_ResourceType int32

const (
	GetDeviceDataResponse_RESOURCE_TYPE_UNSPECIFIED     GetDeviceDataResponse_ResourceType = 0
	GetDeviceDataResponse_RESOURCE_TYPE_SCHEDULING_UNIT GetDeviceDataResponse_ResourceType = 1
	GetDeviceDataResponse_RESOURCE_TYPE_CHROMEOS_DEVICE GetDeviceDataResponse_ResourceType = 2
	GetDeviceDataResponse_RESOURCE_TYPE_ATTACHED_DEVICE GetDeviceDataResponse_ResourceType = 3
	GetDeviceDataResponse_RESOURCE_TYPE_BROWSER_DEVICE  GetDeviceDataResponse_ResourceType = 4
)

// Enum value maps for GetDeviceDataResponse_ResourceType.
var (
	GetDeviceDataResponse_ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "RESOURCE_TYPE_SCHEDULING_UNIT",
		2: "RESOURCE_TYPE_CHROMEOS_DEVICE",
		3: "RESOURCE_TYPE_ATTACHED_DEVICE",
		4: "RESOURCE_TYPE_BROWSER_DEVICE",
	}
	GetDeviceDataResponse_ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED":     0,
		"RESOURCE_TYPE_SCHEDULING_UNIT": 1,
		"RESOURCE_TYPE_CHROMEOS_DEVICE": 2,
		"RESOURCE_TYPE_ATTACHED_DEVICE": 3,
		"RESOURCE_TYPE_BROWSER_DEVICE":  4,
	}
)

func (x GetDeviceDataResponse_ResourceType) Enum() *GetDeviceDataResponse_ResourceType {
	p := new(GetDeviceDataResponse_ResourceType)
	*p = x
	return p
}

func (x GetDeviceDataResponse_ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetDeviceDataResponse_ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_enumTypes[0].Descriptor()
}

func (GetDeviceDataResponse_ResourceType) Type() protoreflect.EnumType {
	return &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_enumTypes[0]
}

func (x GetDeviceDataResponse_ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetDeviceDataResponse_ResourceType.Descriptor instead.
func (GetDeviceDataResponse_ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{174, 0}
}

type TestStatus_Code int32

const (
	TestStatus_UNSPECIFIED        TestStatus_Code = 0
	TestStatus_OK                 TestStatus_Code = 1
	TestStatus_NOT_A_PUBLIC_BOARD TestStatus_Code = 2
	TestStatus_NOT_A_PUBLIC_MODEL TestStatus_Code = 3
	TestStatus_NOT_A_PUBLIC_IMAGE TestStatus_Code = 4
	TestStatus_NOT_A_PUBLIC_TEST  TestStatus_Code = 5
)

// Enum value maps for TestStatus_Code.
var (
	TestStatus_Code_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "OK",
		2: "NOT_A_PUBLIC_BOARD",
		3: "NOT_A_PUBLIC_MODEL",
		4: "NOT_A_PUBLIC_IMAGE",
		5: "NOT_A_PUBLIC_TEST",
	}
	TestStatus_Code_value = map[string]int32{
		"UNSPECIFIED":        0,
		"OK":                 1,
		"NOT_A_PUBLIC_BOARD": 2,
		"NOT_A_PUBLIC_MODEL": 3,
		"NOT_A_PUBLIC_IMAGE": 4,
		"NOT_A_PUBLIC_TEST":  5,
	}
)

func (x TestStatus_Code) Enum() *TestStatus_Code {
	p := new(TestStatus_Code)
	*p = x
	return p
}

func (x TestStatus_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestStatus_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_enumTypes[1].Descriptor()
}

func (TestStatus_Code) Type() protoreflect.EnumType {
	return &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_enumTypes[1]
}

func (x TestStatus_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestStatus_Code.Descriptor instead.
func (TestStatus_Code) EnumDescriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{178, 0}
}

type UpdateMachineLSEDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The MachineLSEDeployment to update.
	MachineLseDeployment *models.MachineLSEDeployment `protobuf:"bytes,1,opt,name=machine_lse_deployment,json=machineLseDeployment,proto3" json:"machine_lse_deployment,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateMachineLSEDeploymentRequest) Reset() {
	*x = UpdateMachineLSEDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMachineLSEDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMachineLSEDeploymentRequest) ProtoMessage() {}

func (x *UpdateMachineLSEDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMachineLSEDeploymentRequest.ProtoReflect.Descriptor instead.
func (*UpdateMachineLSEDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateMachineLSEDeploymentRequest) GetMachineLseDeployment() *models.MachineLSEDeployment {
	if x != nil {
		return x.MachineLseDeployment
	}
	return nil
}

func (x *UpdateMachineLSEDeploymentRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type BatchUpdateMachineLSEDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all deployment records being updated.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// A maximum of 1000 requests can be handled in one call.
	Requests []*UpdateMachineLSEDeploymentRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BatchUpdateMachineLSEDeploymentRequest) Reset() {
	*x = BatchUpdateMachineLSEDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateMachineLSEDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateMachineLSEDeploymentRequest) ProtoMessage() {}

func (x *BatchUpdateMachineLSEDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateMachineLSEDeploymentRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateMachineLSEDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{1}
}

func (x *BatchUpdateMachineLSEDeploymentRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchUpdateMachineLSEDeploymentRequest) GetRequests() []*UpdateMachineLSEDeploymentRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BatchUpdateMachineLSEDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deployment records updated.
	MachineLseDeployments []*models.MachineLSEDeployment `protobuf:"bytes,1,rep,name=machine_lse_deployments,json=machineLseDeployments,proto3" json:"machine_lse_deployments,omitempty"`
}

func (x *BatchUpdateMachineLSEDeploymentResponse) Reset() {
	*x = BatchUpdateMachineLSEDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateMachineLSEDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateMachineLSEDeploymentResponse) ProtoMessage() {}

func (x *BatchUpdateMachineLSEDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateMachineLSEDeploymentResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateMachineLSEDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{2}
}

func (x *BatchUpdateMachineLSEDeploymentResponse) GetMachineLseDeployments() []*models.MachineLSEDeployment {
	if x != nil {
		return x.MachineLseDeployments
	}
	return nil
}

type GetMachineLSEDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host identifier (e.g. serial number) to retrieve the deployment record.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetMachineLSEDeploymentRequest) Reset() {
	*x = GetMachineLSEDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachineLSEDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineLSEDeploymentRequest) ProtoMessage() {}

func (x *GetMachineLSEDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineLSEDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GetMachineLSEDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{3}
}

func (x *GetMachineLSEDeploymentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BatchGetMachineLSEDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all machine lse deployment records being retrieved.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The names (e.g. serial number) of the machine lse deployment records to retrieve.
	// Format: machineLSEDeployments/{name}
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetMachineLSEDeploymentsRequest) Reset() {
	*x = BatchGetMachineLSEDeploymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetMachineLSEDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetMachineLSEDeploymentsRequest) ProtoMessage() {}

func (x *BatchGetMachineLSEDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetMachineLSEDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetMachineLSEDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{4}
}

func (x *BatchGetMachineLSEDeploymentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetMachineLSEDeploymentsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetMachineLSEDeploymentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Machine lses deployment records to retrieve.
	MachineLseDeployments []*models.MachineLSEDeployment `protobuf:"bytes,1,rep,name=machine_lse_deployments,json=machineLseDeployments,proto3" json:"machine_lse_deployments,omitempty"`
}

func (x *BatchGetMachineLSEDeploymentsResponse) Reset() {
	*x = BatchGetMachineLSEDeploymentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetMachineLSEDeploymentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetMachineLSEDeploymentsResponse) ProtoMessage() {}

func (x *BatchGetMachineLSEDeploymentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetMachineLSEDeploymentsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetMachineLSEDeploymentsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{5}
}

func (x *BatchGetMachineLSEDeploymentsResponse) GetMachineLseDeployments() []*models.MachineLSEDeployment {
	if x != nil {
		return x.MachineLseDeployments
	}
	return nil
}

type ListMachineLSEDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of deployment records to return.
	// The service may return fewer than this value.
	// If not specified, 100 deployment records will be returned by default.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListMachineLSEDeployments` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListMachineLSEDeployments` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListMachineLSEDeploymentsRequest) Reset() {
	*x = ListMachineLSEDeploymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachineLSEDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachineLSEDeploymentsRequest) ProtoMessage() {}

func (x *ListMachineLSEDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachineLSEDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListMachineLSEDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{6}
}

func (x *ListMachineLSEDeploymentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMachineLSEDeploymentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListMachineLSEDeploymentsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListMachineLSEDeploymentsRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListMachineLSEDeploymentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deployment records from datastore.
	MachineLseDeployments []*models.MachineLSEDeployment `protobuf:"bytes,1,rep,name=machine_lse_deployments,json=machineLseDeployments,proto3" json:"machine_lse_deployments,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListMachineLSEDeploymentsResponse) Reset() {
	*x = ListMachineLSEDeploymentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachineLSEDeploymentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachineLSEDeploymentsResponse) ProtoMessage() {}

func (x *ListMachineLSEDeploymentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachineLSEDeploymentsResponse.ProtoReflect.Descriptor instead.
func (*ListMachineLSEDeploymentsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{7}
}

func (x *ListMachineLSEDeploymentsResponse) GetMachineLseDeployments() []*models.MachineLSEDeployment {
	if x != nil {
		return x.MachineLseDeployments
	}
	return nil
}

func (x *ListMachineLSEDeploymentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vm to create.
	Vm            *models.VM     `protobuf:"bytes,1,opt,name=vm,proto3" json:"vm,omitempty"`
	NetworkOption *NetworkOption `protobuf:"bytes,3,opt,name=network_option,json=networkOption,proto3" json:"network_option,omitempty"`
}

func (x *CreateVMRequest) Reset() {
	*x = CreateVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVMRequest) ProtoMessage() {}

func (x *CreateVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVMRequest.ProtoReflect.Descriptor instead.
func (*CreateVMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{8}
}

func (x *CreateVMRequest) GetVm() *models.VM {
	if x != nil {
		return x.Vm
	}
	return nil
}

func (x *CreateVMRequest) GetNetworkOption() *NetworkOption {
	if x != nil {
		return x.NetworkOption
	}
	return nil
}

type UpdateVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The VM to update.
	Vm *models.VM `protobuf:"bytes,1,opt,name=vm,proto3" json:"vm,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// The network option to set the VM
	NetworkOption *NetworkOption `protobuf:"bytes,4,opt,name=network_option,json=networkOption,proto3" json:"network_option,omitempty"`
}

func (x *UpdateVMRequest) Reset() {
	*x = UpdateVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVMRequest) ProtoMessage() {}

func (x *UpdateVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVMRequest.ProtoReflect.Descriptor instead.
func (*UpdateVMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateVMRequest) GetVm() *models.VM {
	if x != nil {
		return x.Vm
	}
	return nil
}

func (x *UpdateVMRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateVMRequest) GetNetworkOption() *NetworkOption {
	if x != nil {
		return x.NetworkOption
	}
	return nil
}

type GetVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the VM to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetVMRequest) Reset() {
	*x = GetVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVMRequest) ProtoMessage() {}

func (x *GetVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVMRequest.ProtoReflect.Descriptor instead.
func (*GetVMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{10}
}

func (x *GetVMRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the VM to delete.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteVMRequest) Reset() {
	*x = DeleteVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVMRequest) ProtoMessage() {}

func (x *DeleteVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVMRequest.ProtoReflect.Descriptor instead.
func (*DeleteVMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteVMRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListVMsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of vlans to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 vms will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListVMs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListVlans` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListVMsRequest) Reset() {
	*x = ListVMsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMsRequest) ProtoMessage() {}

func (x *ListVMsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMsRequest.ProtoReflect.Descriptor instead.
func (*ListVMsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{12}
}

func (x *ListVMsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVMsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListVMsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListVMsRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListVMsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vms from datastore.
	Vms []*models.VM `protobuf:"bytes,1,rep,name=vms,proto3" json:"vms,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListVMsResponse) Reset() {
	*x = ListVMsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMsResponse) ProtoMessage() {}

func (x *ListVMsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMsResponse.ProtoReflect.Descriptor instead.
func (*ListVMsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{13}
}

func (x *ListVMsResponse) GetVms() []*models.VM {
	if x != nil {
		return x.Vms
	}
	return nil
}

func (x *ListVMsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetDHCPConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hostname to retrieve the dhcp config.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *GetDHCPConfigRequest) Reset() {
	*x = GetDHCPConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDHCPConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDHCPConfigRequest) ProtoMessage() {}

func (x *GetDHCPConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDHCPConfigRequest.ProtoReflect.Descriptor instead.
func (*GetDHCPConfigRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{14}
}

func (x *GetDHCPConfigRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

// Contains the required information for creating a ChromePlatform represented in
// the database.
type CreateChromePlatformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The chromePlatform to create.
	ChromePlatform *models.ChromePlatform `protobuf:"bytes,1,opt,name=chromePlatform,proto3" json:"chromePlatform,omitempty"`
	// The ID to use for the ChromePlatform, which will become the final component of
	// the ChromePlatform's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-)(_:.]{3,63}$" (3-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	ChromePlatformId string `protobuf:"bytes,2,opt,name=chromePlatform_id,json=chromePlatformId,proto3" json:"chromePlatform_id,omitempty"`
}

func (x *CreateChromePlatformRequest) Reset() {
	*x = CreateChromePlatformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChromePlatformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChromePlatformRequest) ProtoMessage() {}

func (x *CreateChromePlatformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChromePlatformRequest.ProtoReflect.Descriptor instead.
func (*CreateChromePlatformRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{15}
}

func (x *CreateChromePlatformRequest) GetChromePlatform() *models.ChromePlatform {
	if x != nil {
		return x.ChromePlatform
	}
	return nil
}

func (x *CreateChromePlatformRequest) GetChromePlatformId() string {
	if x != nil {
		return x.ChromePlatformId
	}
	return ""
}

type UpdateChromePlatformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The chromePlatform to update.
	ChromePlatform *models.ChromePlatform `protobuf:"bytes,1,opt,name=chromePlatform,proto3" json:"chromePlatform,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateChromePlatformRequest) Reset() {
	*x = UpdateChromePlatformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChromePlatformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChromePlatformRequest) ProtoMessage() {}

func (x *UpdateChromePlatformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChromePlatformRequest.ProtoReflect.Descriptor instead.
func (*UpdateChromePlatformRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateChromePlatformRequest) GetChromePlatform() *models.ChromePlatform {
	if x != nil {
		return x.ChromePlatform
	}
	return nil
}

func (x *UpdateChromePlatformRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetChromePlatformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the chromePlatform to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetChromePlatformRequest) Reset() {
	*x = GetChromePlatformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChromePlatformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChromePlatformRequest) ProtoMessage() {}

func (x *GetChromePlatformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChromePlatformRequest.ProtoReflect.Descriptor instead.
func (*GetChromePlatformRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{17}
}

func (x *GetChromePlatformRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListChromePlatformsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of chromePlatforms to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 chromePlatforms will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListChromePlatforms` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListChromePlatforms` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListChromePlatformsRequest) Reset() {
	*x = ListChromePlatformsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChromePlatformsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChromePlatformsRequest) ProtoMessage() {}

func (x *ListChromePlatformsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChromePlatformsRequest.ProtoReflect.Descriptor instead.
func (*ListChromePlatformsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{18}
}

func (x *ListChromePlatformsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListChromePlatformsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListChromePlatformsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListChromePlatformsRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListChromePlatformsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The chromePlatforms from datastore.
	ChromePlatforms []*models.ChromePlatform `protobuf:"bytes,1,rep,name=chromePlatforms,proto3" json:"chromePlatforms,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListChromePlatformsResponse) Reset() {
	*x = ListChromePlatformsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChromePlatformsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChromePlatformsResponse) ProtoMessage() {}

func (x *ListChromePlatformsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChromePlatformsResponse.ProtoReflect.Descriptor instead.
func (*ListChromePlatformsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{19}
}

func (x *ListChromePlatformsResponse) GetChromePlatforms() []*models.ChromePlatform {
	if x != nil {
		return x.ChromePlatforms
	}
	return nil
}

func (x *ListChromePlatformsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteChromePlatformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the ChromePlatform to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteChromePlatformRequest) Reset() {
	*x = DeleteChromePlatformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChromePlatformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChromePlatformRequest) ProtoMessage() {}

func (x *DeleteChromePlatformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChromePlatformRequest.ProtoReflect.Descriptor instead.
func (*DeleteChromePlatformRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteChromePlatformRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImportChromePlatformsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportChromePlatformsRequest_MachineDbSource
	//	*ImportChromePlatformsRequest_ConfigSource
	Source isImportChromePlatformsRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportChromePlatformsRequest) Reset() {
	*x = ImportChromePlatformsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportChromePlatformsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportChromePlatformsRequest) ProtoMessage() {}

func (x *ImportChromePlatformsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportChromePlatformsRequest.ProtoReflect.Descriptor instead.
func (*ImportChromePlatformsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{21}
}

func (m *ImportChromePlatformsRequest) GetSource() isImportChromePlatformsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportChromePlatformsRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportChromePlatformsRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportChromePlatformsRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportChromePlatformsRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportChromePlatformsRequest_Source interface {
	isImportChromePlatformsRequest_Source()
}

type ImportChromePlatformsRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportChromePlatformsRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportChromePlatformsRequest_MachineDbSource) isImportChromePlatformsRequest_Source() {}

func (*ImportChromePlatformsRequest_ConfigSource) isImportChromePlatformsRequest_Source() {}

type ImportChromePlatformsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passed []*ChromePlatformResult `protobuf:"bytes,1,rep,name=passed,proto3" json:"passed,omitempty"`
	Failed []*ChromePlatformResult `protobuf:"bytes,2,rep,name=failed,proto3" json:"failed,omitempty"`
}

func (x *ImportChromePlatformsResponse) Reset() {
	*x = ImportChromePlatformsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportChromePlatformsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportChromePlatformsResponse) ProtoMessage() {}

func (x *ImportChromePlatformsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportChromePlatformsResponse.ProtoReflect.Descriptor instead.
func (*ImportChromePlatformsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{22}
}

func (x *ImportChromePlatformsResponse) GetPassed() []*ChromePlatformResult {
	if x != nil {
		return x.Passed
	}
	return nil
}

func (x *ImportChromePlatformsResponse) GetFailed() []*ChromePlatformResult {
	if x != nil {
		return x.Failed
	}
	return nil
}

type ChromePlatformResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform *models.ChromePlatform `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	ErrorMsg string                 `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *ChromePlatformResult) Reset() {
	*x = ChromePlatformResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromePlatformResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromePlatformResult) ProtoMessage() {}

func (x *ChromePlatformResult) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromePlatformResult.ProtoReflect.Descriptor instead.
func (*ChromePlatformResult) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{23}
}

func (x *ChromePlatformResult) GetPlatform() *models.ChromePlatform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *ChromePlatformResult) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type ImportOSVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportOSVersionsRequest_MachineDbSource
	//	*ImportOSVersionsRequest_ConfigSource
	Source isImportOSVersionsRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportOSVersionsRequest) Reset() {
	*x = ImportOSVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportOSVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportOSVersionsRequest) ProtoMessage() {}

func (x *ImportOSVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportOSVersionsRequest.ProtoReflect.Descriptor instead.
func (*ImportOSVersionsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{24}
}

func (m *ImportOSVersionsRequest) GetSource() isImportOSVersionsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportOSVersionsRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportOSVersionsRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportOSVersionsRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportOSVersionsRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportOSVersionsRequest_Source interface {
	isImportOSVersionsRequest_Source()
}

type ImportOSVersionsRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportOSVersionsRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportOSVersionsRequest_MachineDbSource) isImportOSVersionsRequest_Source() {}

func (*ImportOSVersionsRequest_ConfigSource) isImportOSVersionsRequest_Source() {}

type ListOSVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of OSVersion to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 OSVersion will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListOSVersion` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListOSVersion` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListOSVersionsRequest) Reset() {
	*x = ListOSVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOSVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOSVersionsRequest) ProtoMessage() {}

func (x *ListOSVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOSVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListOSVersionsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{25}
}

func (x *ListOSVersionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOSVersionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOSVersionsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListOSVersionsRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListOSVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The os versions for browser lab from datastore.
	OsVersion []*models.OSVersion `protobuf:"bytes,1,rep,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListOSVersionsResponse) Reset() {
	*x = ListOSVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOSVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOSVersionsResponse) ProtoMessage() {}

func (x *ListOSVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOSVersionsResponse.ProtoReflect.Descriptor instead.
func (*ListOSVersionsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{26}
}

func (x *ListOSVersionsResponse) GetOsVersion() []*models.OSVersion {
	if x != nil {
		return x.OsVersion
	}
	return nil
}

func (x *ListOSVersionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Contains the required information for creating a MachineLSEPrototype represented in
// the database.
type CreateMachineLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The MachineLSEPrototype to create.
	MachineLSEPrototype *models.MachineLSEPrototype `protobuf:"bytes,1,opt,name=machineLSEPrototype,proto3" json:"machineLSEPrototype,omitempty"`
	// The ID to use for the MachineLSEPrototype, which will become the final component of
	// the MachineLSEPrototype's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-)(_:.]{3,63}$" (3-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	MachineLSEPrototypeId string `protobuf:"bytes,2,opt,name=machineLSEPrototype_id,json=machineLSEPrototypeId,proto3" json:"machineLSEPrototype_id,omitempty"`
}

func (x *CreateMachineLSEPrototypeRequest) Reset() {
	*x = CreateMachineLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMachineLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMachineLSEPrototypeRequest) ProtoMessage() {}

func (x *CreateMachineLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMachineLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*CreateMachineLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{27}
}

func (x *CreateMachineLSEPrototypeRequest) GetMachineLSEPrototype() *models.MachineLSEPrototype {
	if x != nil {
		return x.MachineLSEPrototype
	}
	return nil
}

func (x *CreateMachineLSEPrototypeRequest) GetMachineLSEPrototypeId() string {
	if x != nil {
		return x.MachineLSEPrototypeId
	}
	return ""
}

type UpdateMachineLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The MachineLSEPrototype to update.
	MachineLSEPrototype *models.MachineLSEPrototype `protobuf:"bytes,1,opt,name=machineLSEPrototype,proto3" json:"machineLSEPrototype,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateMachineLSEPrototypeRequest) Reset() {
	*x = UpdateMachineLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMachineLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMachineLSEPrototypeRequest) ProtoMessage() {}

func (x *UpdateMachineLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMachineLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateMachineLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateMachineLSEPrototypeRequest) GetMachineLSEPrototype() *models.MachineLSEPrototype {
	if x != nil {
		return x.MachineLSEPrototype
	}
	return nil
}

func (x *UpdateMachineLSEPrototypeRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetMachineLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the MachineLSEPrototype to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetMachineLSEPrototypeRequest) Reset() {
	*x = GetMachineLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachineLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineLSEPrototypeRequest) ProtoMessage() {}

func (x *GetMachineLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*GetMachineLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{29}
}

func (x *GetMachineLSEPrototypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListMachineLSEPrototypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of MachineLSEPrototypes to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 MachineLSEPrototypes will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListMachineLSEPrototypes` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListMachineLSEPrototypes` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListMachineLSEPrototypesRequest) Reset() {
	*x = ListMachineLSEPrototypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachineLSEPrototypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachineLSEPrototypesRequest) ProtoMessage() {}

func (x *ListMachineLSEPrototypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachineLSEPrototypesRequest.ProtoReflect.Descriptor instead.
func (*ListMachineLSEPrototypesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{30}
}

func (x *ListMachineLSEPrototypesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMachineLSEPrototypesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListMachineLSEPrototypesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListMachineLSEPrototypesRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListMachineLSEPrototypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The MachineLSEPrototypes from datastore.
	MachineLSEPrototypes []*models.MachineLSEPrototype `protobuf:"bytes,1,rep,name=machineLSEPrototypes,proto3" json:"machineLSEPrototypes,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListMachineLSEPrototypesResponse) Reset() {
	*x = ListMachineLSEPrototypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachineLSEPrototypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachineLSEPrototypesResponse) ProtoMessage() {}

func (x *ListMachineLSEPrototypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachineLSEPrototypesResponse.ProtoReflect.Descriptor instead.
func (*ListMachineLSEPrototypesResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{31}
}

func (x *ListMachineLSEPrototypesResponse) GetMachineLSEPrototypes() []*models.MachineLSEPrototype {
	if x != nil {
		return x.MachineLSEPrototypes
	}
	return nil
}

func (x *ListMachineLSEPrototypesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteMachineLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the MachineLSEPrototype to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteMachineLSEPrototypeRequest) Reset() {
	*x = DeleteMachineLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMachineLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMachineLSEPrototypeRequest) ProtoMessage() {}

func (x *DeleteMachineLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMachineLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteMachineLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteMachineLSEPrototypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a RackLSEPrototype represented in
// the database.
type CreateRackLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RackLSEPrototype to create.
	RackLSEPrototype *models.RackLSEPrototype `protobuf:"bytes,1,opt,name=rackLSEPrototype,proto3" json:"rackLSEPrototype,omitempty"`
	// The ID to use for the RackLSEPrototype, which will become the final component of
	// the RackLSEPrototype's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-)(_:.]{3,63}$" (3-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	RackLSEPrototypeId string `protobuf:"bytes,2,opt,name=rackLSEPrototype_id,json=rackLSEPrototypeId,proto3" json:"rackLSEPrototype_id,omitempty"`
}

func (x *CreateRackLSEPrototypeRequest) Reset() {
	*x = CreateRackLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRackLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRackLSEPrototypeRequest) ProtoMessage() {}

func (x *CreateRackLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRackLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*CreateRackLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{33}
}

func (x *CreateRackLSEPrototypeRequest) GetRackLSEPrototype() *models.RackLSEPrototype {
	if x != nil {
		return x.RackLSEPrototype
	}
	return nil
}

func (x *CreateRackLSEPrototypeRequest) GetRackLSEPrototypeId() string {
	if x != nil {
		return x.RackLSEPrototypeId
	}
	return ""
}

type UpdateRackLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RackLSEPrototype to update.
	RackLSEPrototype *models.RackLSEPrototype `protobuf:"bytes,1,opt,name=rackLSEPrototype,proto3" json:"rackLSEPrototype,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRackLSEPrototypeRequest) Reset() {
	*x = UpdateRackLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRackLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRackLSEPrototypeRequest) ProtoMessage() {}

func (x *UpdateRackLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRackLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateRackLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateRackLSEPrototypeRequest) GetRackLSEPrototype() *models.RackLSEPrototype {
	if x != nil {
		return x.RackLSEPrototype
	}
	return nil
}

func (x *UpdateRackLSEPrototypeRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetRackLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the RackLSEPrototype to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRackLSEPrototypeRequest) Reset() {
	*x = GetRackLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRackLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRackLSEPrototypeRequest) ProtoMessage() {}

func (x *GetRackLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRackLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*GetRackLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{35}
}

func (x *GetRackLSEPrototypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListRackLSEPrototypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of RackLSEPrototypes to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 RackLSEPrototypes will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRackLSEPrototypes` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRackLSEPrototypes` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListRackLSEPrototypesRequest) Reset() {
	*x = ListRackLSEPrototypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRackLSEPrototypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRackLSEPrototypesRequest) ProtoMessage() {}

func (x *ListRackLSEPrototypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRackLSEPrototypesRequest.ProtoReflect.Descriptor instead.
func (*ListRackLSEPrototypesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{36}
}

func (x *ListRackLSEPrototypesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRackLSEPrototypesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRackLSEPrototypesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListRackLSEPrototypesRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListRackLSEPrototypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RackLSEPrototypes from datastore.
	RackLSEPrototypes []*models.RackLSEPrototype `protobuf:"bytes,1,rep,name=rackLSEPrototypes,proto3" json:"rackLSEPrototypes,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRackLSEPrototypesResponse) Reset() {
	*x = ListRackLSEPrototypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRackLSEPrototypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRackLSEPrototypesResponse) ProtoMessage() {}

func (x *ListRackLSEPrototypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRackLSEPrototypesResponse.ProtoReflect.Descriptor instead.
func (*ListRackLSEPrototypesResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{37}
}

func (x *ListRackLSEPrototypesResponse) GetRackLSEPrototypes() []*models.RackLSEPrototype {
	if x != nil {
		return x.RackLSEPrototypes
	}
	return nil
}

func (x *ListRackLSEPrototypesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteRackLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the RackLSEPrototype to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteRackLSEPrototypeRequest) Reset() {
	*x = DeleteRackLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRackLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRackLSEPrototypeRequest) ProtoMessage() {}

func (x *DeleteRackLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRackLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteRackLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteRackLSEPrototypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating machine/nics/drac represented in
// the database.
type MachineRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machine to create.
	Machine *models.Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
}

func (x *MachineRegistrationRequest) Reset() {
	*x = MachineRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineRegistrationRequest) ProtoMessage() {}

func (x *MachineRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineRegistrationRequest.ProtoReflect.Descriptor instead.
func (*MachineRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{39}
}

func (x *MachineRegistrationRequest) GetMachine() *models.Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

type UpdateMachineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machine to update.
	Machine *models.Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateMachineRequest) Reset() {
	*x = UpdateMachineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMachineRequest) ProtoMessage() {}

func (x *UpdateMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMachineRequest.ProtoReflect.Descriptor instead.
func (*UpdateMachineRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateMachineRequest) GetMachine() *models.Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

func (x *UpdateMachineRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetMachineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the machine to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetMachineRequest) Reset() {
	*x = GetMachineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineRequest) ProtoMessage() {}

func (x *GetMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineRequest.ProtoReflect.Descriptor instead.
func (*GetMachineRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{41}
}

func (x *GetMachineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListMachinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of machines to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 machines will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListMachines` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListMachines` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
	// if this is true, machine will contain the full information of Nic/Drac.
	// By setting this to true, the list call will be slower as the server
	// needs to query and populate the Nic/Drac for each machine.
	Full bool `protobuf:"varint,5,opt,name=full,proto3" json:"full,omitempty"`
}

func (x *ListMachinesRequest) Reset() {
	*x = ListMachinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachinesRequest) ProtoMessage() {}

func (x *ListMachinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachinesRequest.ProtoReflect.Descriptor instead.
func (*ListMachinesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{42}
}

func (x *ListMachinesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMachinesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListMachinesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListMachinesRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

func (x *ListMachinesRequest) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

type ListMachinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machines from datastore.
	Machines []*models.Machine `protobuf:"bytes,1,rep,name=machines,proto3" json:"machines,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListMachinesResponse) Reset() {
	*x = ListMachinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachinesResponse) ProtoMessage() {}

func (x *ListMachinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachinesResponse.ProtoReflect.Descriptor instead.
func (*ListMachinesResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{43}
}

func (x *ListMachinesResponse) GetMachines() []*models.Machine {
	if x != nil {
		return x.Machines
	}
	return nil
}

func (x *ListMachinesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteMachineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Machine to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteMachineRequest) Reset() {
	*x = DeleteMachineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMachineRequest) ProtoMessage() {}

func (x *DeleteMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMachineRequest.ProtoReflect.Descriptor instead.
func (*DeleteMachineRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteMachineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImportMachinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportMachinesRequest_MachineDbSource
	//	*ImportMachinesRequest_ConfigSource
	Source isImportMachinesRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportMachinesRequest) Reset() {
	*x = ImportMachinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportMachinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportMachinesRequest) ProtoMessage() {}

func (x *ImportMachinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportMachinesRequest.ProtoReflect.Descriptor instead.
func (*ImportMachinesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{45}
}

func (m *ImportMachinesRequest) GetSource() isImportMachinesRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportMachinesRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportMachinesRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportMachinesRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportMachinesRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportMachinesRequest_Source interface {
	isImportMachinesRequest_Source()
}

type ImportMachinesRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportMachinesRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportMachinesRequest_MachineDbSource) isImportMachinesRequest_Source() {}

func (*ImportMachinesRequest_ConfigSource) isImportMachinesRequest_Source() {}

type RenameMachineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Machine to rename
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new name of the Machine
	NewName string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *RenameMachineRequest) Reset() {
	*x = RenameMachineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameMachineRequest) ProtoMessage() {}

func (x *RenameMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameMachineRequest.ProtoReflect.Descriptor instead.
func (*RenameMachineRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{46}
}

func (x *RenameMachineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenameMachineRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type MachineDBSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *MachineDBSource) Reset() {
	*x = MachineDBSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineDBSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineDBSource) ProtoMessage() {}

func (x *MachineDBSource) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineDBSource.ProtoReflect.Descriptor instead.
func (*MachineDBSource) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{47}
}

func (x *MachineDBSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type ConfigSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Empty config_service means it's local file.
	ConfigServiceName string `protobuf:"bytes,1,opt,name=config_service_name,json=configServiceName,proto3" json:"config_service_name,omitempty"`
	FileName          string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *ConfigSource) Reset() {
	*x = ConfigSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSource) ProtoMessage() {}

func (x *ConfigSource) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSource.ProtoReflect.Descriptor instead.
func (*ConfigSource) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{48}
}

func (x *ConfigSource) GetConfigServiceName() string {
	if x != nil {
		return x.ConfigServiceName
	}
	return ""
}

func (x *ConfigSource) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// Contains the required information for creating a Rack represented in
// the database.
type CreateRackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rack to create.
	Rack *models.Rack `protobuf:"bytes,1,opt,name=rack,proto3" json:"rack,omitempty"`
	// The ID to use for the Rack, which will become the final component of
	// the Rack's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-)(_:.]{3,63}$" (3-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	RackId string `protobuf:"bytes,2,opt,name=rack_id,json=rackId,proto3" json:"rack_id,omitempty"`
}

func (x *CreateRackRequest) Reset() {
	*x = CreateRackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRackRequest) ProtoMessage() {}

func (x *CreateRackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRackRequest.ProtoReflect.Descriptor instead.
func (*CreateRackRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{49}
}

func (x *CreateRackRequest) GetRack() *models.Rack {
	if x != nil {
		return x.Rack
	}
	return nil
}

func (x *CreateRackRequest) GetRackId() string {
	if x != nil {
		return x.RackId
	}
	return ""
}

type UpdateRackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rack to update.
	Rack *models.Rack `protobuf:"bytes,1,opt,name=rack,proto3" json:"rack,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRackRequest) Reset() {
	*x = UpdateRackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRackRequest) ProtoMessage() {}

func (x *UpdateRackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRackRequest.ProtoReflect.Descriptor instead.
func (*UpdateRackRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateRackRequest) GetRack() *models.Rack {
	if x != nil {
		return x.Rack
	}
	return nil
}

func (x *UpdateRackRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetRackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the rack to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRackRequest) Reset() {
	*x = GetRackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRackRequest) ProtoMessage() {}

func (x *GetRackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRackRequest.ProtoReflect.Descriptor instead.
func (*GetRackRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{51}
}

func (x *GetRackRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListRacksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of racks to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 racks will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRacks` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRacks` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
	// if this is true, rack will contain the full information of KVM/RPM/Switch.
	// By setting this to true, the list call will be slower as the server
	// needs to query and populate the KVM/RPM/Switch for each rack.
	Full bool `protobuf:"varint,5,opt,name=full,proto3" json:"full,omitempty"`
}

func (x *ListRacksRequest) Reset() {
	*x = ListRacksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRacksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRacksRequest) ProtoMessage() {}

func (x *ListRacksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRacksRequest.ProtoReflect.Descriptor instead.
func (*ListRacksRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{52}
}

func (x *ListRacksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRacksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRacksRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListRacksRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

func (x *ListRacksRequest) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

type ListRacksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The racks from datastore.
	Racks []*models.Rack `protobuf:"bytes,1,rep,name=racks,proto3" json:"racks,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRacksResponse) Reset() {
	*x = ListRacksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRacksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRacksResponse) ProtoMessage() {}

func (x *ListRacksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRacksResponse.ProtoReflect.Descriptor instead.
func (*ListRacksResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{53}
}

func (x *ListRacksResponse) GetRacks() []*models.Rack {
	if x != nil {
		return x.Racks
	}
	return nil
}

func (x *ListRacksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteRackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Rack to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteRackRequest) Reset() {
	*x = DeleteRackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRackRequest) ProtoMessage() {}

func (x *DeleteRackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRackRequest.ProtoReflect.Descriptor instead.
func (*DeleteRackRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{54}
}

func (x *DeleteRackRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a MachineLSE represented in
// the database.
type CreateMachineLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machineLSE to create.
	MachineLSE *models.MachineLSE `protobuf:"bytes,1,opt,name=machineLSE,proto3" json:"machineLSE,omitempty"`
	// The ID to use for the MachineLSE, which will become the final component of
	// the MachineLSE's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-)(_:.]{3,63}$" (3-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	MachineLSEId  string         `protobuf:"bytes,2,opt,name=machineLSE_id,json=machineLSEId,proto3" json:"machineLSE_id,omitempty"`
	NetworkOption *NetworkOption `protobuf:"bytes,4,opt,name=network_option,json=networkOption,proto3" json:"network_option,omitempty"`
}

func (x *CreateMachineLSERequest) Reset() {
	*x = CreateMachineLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMachineLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMachineLSERequest) ProtoMessage() {}

func (x *CreateMachineLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMachineLSERequest.ProtoReflect.Descriptor instead.
func (*CreateMachineLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{55}
}

func (x *CreateMachineLSERequest) GetMachineLSE() *models.MachineLSE {
	if x != nil {
		return x.MachineLSE
	}
	return nil
}

func (x *CreateMachineLSERequest) GetMachineLSEId() string {
	if x != nil {
		return x.MachineLSEId
	}
	return ""
}

func (x *CreateMachineLSERequest) GetNetworkOption() *NetworkOption {
	if x != nil {
		return x.NetworkOption
	}
	return nil
}

type UpdateMachineLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machineLSE to update.
	MachineLSE *models.MachineLSE `protobuf:"bytes,1,opt,name=machineLSE,proto3" json:"machineLSE,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// mapping of the name to the corresponding network options.
	NetworkOptions map[string]*NetworkOption `protobuf:"bytes,4,rep,name=network_options,json=networkOptions,proto3" json:"network_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateMachineLSERequest) Reset() {
	*x = UpdateMachineLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMachineLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMachineLSERequest) ProtoMessage() {}

func (x *UpdateMachineLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMachineLSERequest.ProtoReflect.Descriptor instead.
func (*UpdateMachineLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{56}
}

func (x *UpdateMachineLSERequest) GetMachineLSE() *models.MachineLSE {
	if x != nil {
		return x.MachineLSE
	}
	return nil
}

func (x *UpdateMachineLSERequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateMachineLSERequest) GetNetworkOptions() map[string]*NetworkOption {
	if x != nil {
		return x.NetworkOptions
	}
	return nil
}

type GetMachineLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the machineLSE to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetMachineLSERequest) Reset() {
	*x = GetMachineLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachineLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineLSERequest) ProtoMessage() {}

func (x *GetMachineLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineLSERequest.ProtoReflect.Descriptor instead.
func (*GetMachineLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{57}
}

func (x *GetMachineLSERequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListMachineLSEsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of machineLSEs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 machineLSEs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListMachineLSEs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListMachineLSEs` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
	// if this is true, machinelse will contain the full information of VMs.
	// By setting this to true, the list call will be slower as the server
	// needs to query and populate the VM for each machinelse.
	Full bool `protobuf:"varint,5,opt,name=full,proto3" json:"full,omitempty"`
}

func (x *ListMachineLSEsRequest) Reset() {
	*x = ListMachineLSEsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachineLSEsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachineLSEsRequest) ProtoMessage() {}

func (x *ListMachineLSEsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachineLSEsRequest.ProtoReflect.Descriptor instead.
func (*ListMachineLSEsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{58}
}

func (x *ListMachineLSEsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMachineLSEsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListMachineLSEsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListMachineLSEsRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

func (x *ListMachineLSEsRequest) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

type ListMachineLSEsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machineLSEs from datastore.
	MachineLSEs []*models.MachineLSE `protobuf:"bytes,1,rep,name=machineLSEs,proto3" json:"machineLSEs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListMachineLSEsResponse) Reset() {
	*x = ListMachineLSEsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachineLSEsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachineLSEsResponse) ProtoMessage() {}

func (x *ListMachineLSEsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachineLSEsResponse.ProtoReflect.Descriptor instead.
func (*ListMachineLSEsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{59}
}

func (x *ListMachineLSEsResponse) GetMachineLSEs() []*models.MachineLSE {
	if x != nil {
		return x.MachineLSEs
	}
	return nil
}

func (x *ListMachineLSEsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteMachineLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the MachineLSE to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteMachineLSERequest) Reset() {
	*x = DeleteMachineLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMachineLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMachineLSERequest) ProtoMessage() {}

func (x *DeleteMachineLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMachineLSERequest.ProtoReflect.Descriptor instead.
func (*DeleteMachineLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{60}
}

func (x *DeleteMachineLSERequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RenameMachineLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the MachineLSE to rename
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new name of the MachineLSE
	NewName string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *RenameMachineLSERequest) Reset() {
	*x = RenameMachineLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameMachineLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameMachineLSERequest) ProtoMessage() {}

func (x *RenameMachineLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameMachineLSERequest.ProtoReflect.Descriptor instead.
func (*RenameMachineLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{61}
}

func (x *RenameMachineLSERequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenameMachineLSERequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type ImportMachineLSEsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportMachineLSEsRequest_MachineDbSource
	//	*ImportMachineLSEsRequest_ConfigSource
	Source isImportMachineLSEsRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportMachineLSEsRequest) Reset() {
	*x = ImportMachineLSEsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportMachineLSEsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportMachineLSEsRequest) ProtoMessage() {}

func (x *ImportMachineLSEsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportMachineLSEsRequest.ProtoReflect.Descriptor instead.
func (*ImportMachineLSEsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{62}
}

func (m *ImportMachineLSEsRequest) GetSource() isImportMachineLSEsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportMachineLSEsRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportMachineLSEsRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportMachineLSEsRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportMachineLSEsRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportMachineLSEsRequest_Source interface {
	isImportMachineLSEsRequest_Source()
}

type ImportMachineLSEsRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportMachineLSEsRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportMachineLSEsRequest_MachineDbSource) isImportMachineLSEsRequest_Source() {}

func (*ImportMachineLSEsRequest_ConfigSource) isImportMachineLSEsRequest_Source() {}

type ImportOSMachineLSEsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportOSMachineLSEsRequest_MachineDbSource
	//	*ImportOSMachineLSEsRequest_ConfigSource
	Source isImportOSMachineLSEsRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportOSMachineLSEsRequest) Reset() {
	*x = ImportOSMachineLSEsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportOSMachineLSEsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportOSMachineLSEsRequest) ProtoMessage() {}

func (x *ImportOSMachineLSEsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportOSMachineLSEsRequest.ProtoReflect.Descriptor instead.
func (*ImportOSMachineLSEsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{63}
}

func (m *ImportOSMachineLSEsRequest) GetSource() isImportOSMachineLSEsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportOSMachineLSEsRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportOSMachineLSEsRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportOSMachineLSEsRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportOSMachineLSEsRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportOSMachineLSEsRequest_Source interface {
	isImportOSMachineLSEsRequest_Source()
}

type ImportOSMachineLSEsRequest_MachineDbSource struct {
	// Continue to use machine_db_source to specify any service host for consistency
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportOSMachineLSEsRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportOSMachineLSEsRequest_MachineDbSource) isImportOSMachineLSEsRequest_Source() {}

func (*ImportOSMachineLSEsRequest_ConfigSource) isImportOSMachineLSEsRequest_Source() {}

// Contains the required information for creating a RackLSE represented in
// the database.
type CreateRackLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rackLSE to create.
	RackLSE *models.RackLSE `protobuf:"bytes,1,opt,name=rackLSE,proto3" json:"rackLSE,omitempty"`
	// The ID to use for the RackLSE, which will become the final component of
	// the RackLSE's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-)(_:.]{3,63}$" (3-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	RackLSEId string `protobuf:"bytes,2,opt,name=rackLSE_id,json=rackLSEId,proto3" json:"rackLSE_id,omitempty"`
}

func (x *CreateRackLSERequest) Reset() {
	*x = CreateRackLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRackLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRackLSERequest) ProtoMessage() {}

func (x *CreateRackLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRackLSERequest.ProtoReflect.Descriptor instead.
func (*CreateRackLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{64}
}

func (x *CreateRackLSERequest) GetRackLSE() *models.RackLSE {
	if x != nil {
		return x.RackLSE
	}
	return nil
}

func (x *CreateRackLSERequest) GetRackLSEId() string {
	if x != nil {
		return x.RackLSEId
	}
	return ""
}

type UpdateRackLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rackLSE to update.
	RackLSE *models.RackLSE `protobuf:"bytes,1,opt,name=rackLSE,proto3" json:"rackLSE,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRackLSERequest) Reset() {
	*x = UpdateRackLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRackLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRackLSERequest) ProtoMessage() {}

func (x *UpdateRackLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRackLSERequest.ProtoReflect.Descriptor instead.
func (*UpdateRackLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{65}
}

func (x *UpdateRackLSERequest) GetRackLSE() *models.RackLSE {
	if x != nil {
		return x.RackLSE
	}
	return nil
}

func (x *UpdateRackLSERequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetRackLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the rackLSE to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRackLSERequest) Reset() {
	*x = GetRackLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRackLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRackLSERequest) ProtoMessage() {}

func (x *GetRackLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRackLSERequest.ProtoReflect.Descriptor instead.
func (*GetRackLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{66}
}

func (x *GetRackLSERequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListRackLSEsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of rackLSEs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 rackLSEs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRackLSEs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRackLSEs` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListRackLSEsRequest) Reset() {
	*x = ListRackLSEsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRackLSEsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRackLSEsRequest) ProtoMessage() {}

func (x *ListRackLSEsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRackLSEsRequest.ProtoReflect.Descriptor instead.
func (*ListRackLSEsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{67}
}

func (x *ListRackLSEsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRackLSEsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRackLSEsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListRackLSEsRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListRackLSEsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rackLSEs from datastore.
	RackLSEs []*models.RackLSE `protobuf:"bytes,1,rep,name=rackLSEs,proto3" json:"rackLSEs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRackLSEsResponse) Reset() {
	*x = ListRackLSEsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRackLSEsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRackLSEsResponse) ProtoMessage() {}

func (x *ListRackLSEsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRackLSEsResponse.ProtoReflect.Descriptor instead.
func (*ListRackLSEsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{68}
}

func (x *ListRackLSEsResponse) GetRackLSEs() []*models.RackLSE {
	if x != nil {
		return x.RackLSEs
	}
	return nil
}

func (x *ListRackLSEsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteRackLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the RackLSE to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteRackLSERequest) Reset() {
	*x = DeleteRackLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRackLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRackLSERequest) ProtoMessage() {}

func (x *DeleteRackLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRackLSERequest.ProtoReflect.Descriptor instead.
func (*DeleteRackLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{69}
}

func (x *DeleteRackLSERequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a Nic represented in
// the database.
type CreateNicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nic to create.
	Nic *models.Nic `protobuf:"bytes,1,opt,name=nic,proto3" json:"nic,omitempty"`
	// The ID to use for the Nic, which will become the final component of
	// the Nic's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-)(_:.]{3,63}$" (3-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	NicId string `protobuf:"bytes,2,opt,name=nic_id,json=nicId,proto3" json:"nic_id,omitempty"`
}

func (x *CreateNicRequest) Reset() {
	*x = CreateNicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNicRequest) ProtoMessage() {}

func (x *CreateNicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNicRequest.ProtoReflect.Descriptor instead.
func (*CreateNicRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{70}
}

func (x *CreateNicRequest) GetNic() *models.Nic {
	if x != nil {
		return x.Nic
	}
	return nil
}

func (x *CreateNicRequest) GetNicId() string {
	if x != nil {
		return x.NicId
	}
	return ""
}

type UpdateNicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nic to update.
	Nic *models.Nic `protobuf:"bytes,1,opt,name=nic,proto3" json:"nic,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateNicRequest) Reset() {
	*x = UpdateNicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNicRequest) ProtoMessage() {}

func (x *UpdateNicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNicRequest.ProtoReflect.Descriptor instead.
func (*UpdateNicRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateNicRequest) GetNic() *models.Nic {
	if x != nil {
		return x.Nic
	}
	return nil
}

func (x *UpdateNicRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetNicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the nic to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNicRequest) Reset() {
	*x = GetNicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNicRequest) ProtoMessage() {}

func (x *GetNicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNicRequest.ProtoReflect.Descriptor instead.
func (*GetNicRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{72}
}

func (x *GetNicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListNicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of nics to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 nics will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListNics` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListNics` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListNicsRequest) Reset() {
	*x = ListNicsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNicsRequest) ProtoMessage() {}

func (x *ListNicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNicsRequest.ProtoReflect.Descriptor instead.
func (*ListNicsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{73}
}

func (x *ListNicsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNicsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListNicsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListNicsRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListNicsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nics from datastore.
	Nics []*models.Nic `protobuf:"bytes,1,rep,name=nics,proto3" json:"nics,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNicsResponse) Reset() {
	*x = ListNicsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNicsResponse) ProtoMessage() {}

func (x *ListNicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNicsResponse.ProtoReflect.Descriptor instead.
func (*ListNicsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{74}
}

func (x *ListNicsResponse) GetNics() []*models.Nic {
	if x != nil {
		return x.Nics
	}
	return nil
}

func (x *ListNicsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteNicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Nic to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteNicRequest) Reset() {
	*x = DeleteNicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNicRequest) ProtoMessage() {}

func (x *DeleteNicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNicRequest.ProtoReflect.Descriptor instead.
func (*DeleteNicRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{75}
}

func (x *DeleteNicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImportNicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportNicsRequest_MachineDbSource
	//	*ImportNicsRequest_ConfigSource
	Source isImportNicsRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportNicsRequest) Reset() {
	*x = ImportNicsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportNicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportNicsRequest) ProtoMessage() {}

func (x *ImportNicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportNicsRequest.ProtoReflect.Descriptor instead.
func (*ImportNicsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{76}
}

func (m *ImportNicsRequest) GetSource() isImportNicsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportNicsRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportNicsRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportNicsRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportNicsRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportNicsRequest_Source interface {
	isImportNicsRequest_Source()
}

type ImportNicsRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportNicsRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportNicsRequest_MachineDbSource) isImportNicsRequest_Source() {}

func (*ImportNicsRequest_ConfigSource) isImportNicsRequest_Source() {}

type RenameNicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Nic to rename
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new name of the Nic
	NewName string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *RenameNicRequest) Reset() {
	*x = RenameNicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameNicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameNicRequest) ProtoMessage() {}

func (x *RenameNicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameNicRequest.ProtoReflect.Descriptor instead.
func (*RenameNicRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{77}
}

func (x *RenameNicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenameNicRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type RenameSwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Switch to rename
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new name of the Switch
	NewName string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *RenameSwitchRequest) Reset() {
	*x = RenameSwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameSwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameSwitchRequest) ProtoMessage() {}

func (x *RenameSwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameSwitchRequest.ProtoReflect.Descriptor instead.
func (*RenameSwitchRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{78}
}

func (x *RenameSwitchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenameSwitchRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type ImportDatacentersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportDatacentersRequest_MachineDbSource
	//	*ImportDatacentersRequest_ConfigSource
	Source isImportDatacentersRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportDatacentersRequest) Reset() {
	*x = ImportDatacentersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDatacentersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDatacentersRequest) ProtoMessage() {}

func (x *ImportDatacentersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDatacentersRequest.ProtoReflect.Descriptor instead.
func (*ImportDatacentersRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{79}
}

func (m *ImportDatacentersRequest) GetSource() isImportDatacentersRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportDatacentersRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportDatacentersRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportDatacentersRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportDatacentersRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportDatacentersRequest_Source interface {
	isImportDatacentersRequest_Source()
}

type ImportDatacentersRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportDatacentersRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportDatacentersRequest_MachineDbSource) isImportDatacentersRequest_Source() {}

func (*ImportDatacentersRequest_ConfigSource) isImportDatacentersRequest_Source() {}

// Contains the required information for creating a KVM represented in
// the database.
type CreateKVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The KVM to create.
	KVM *models.KVM `protobuf:"bytes,1,opt,name=KVM,proto3" json:"KVM,omitempty"`
	// The ID to use for the KVM, which will become the final component of
	// the KVM's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-)(_:.]{3,63}$" (3-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	KVMId string `protobuf:"bytes,2,opt,name=KVM_id,json=KVMId,proto3" json:"KVM_id,omitempty"`
}

func (x *CreateKVMRequest) Reset() {
	*x = CreateKVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKVMRequest) ProtoMessage() {}

func (x *CreateKVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKVMRequest.ProtoReflect.Descriptor instead.
func (*CreateKVMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{80}
}

func (x *CreateKVMRequest) GetKVM() *models.KVM {
	if x != nil {
		return x.KVM
	}
	return nil
}

func (x *CreateKVMRequest) GetKVMId() string {
	if x != nil {
		return x.KVMId
	}
	return ""
}

type UpdateKVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The KVM to update.
	KVM *models.KVM `protobuf:"bytes,1,opt,name=KVM,proto3" json:"KVM,omitempty"`
	// The list of fields to be updated.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	NetworkOption *NetworkOption         `protobuf:"bytes,4,opt,name=network_option,json=networkOption,proto3" json:"network_option,omitempty"`
}

func (x *UpdateKVMRequest) Reset() {
	*x = UpdateKVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKVMRequest) ProtoMessage() {}

func (x *UpdateKVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKVMRequest.ProtoReflect.Descriptor instead.
func (*UpdateKVMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{81}
}

func (x *UpdateKVMRequest) GetKVM() *models.KVM {
	if x != nil {
		return x.KVM
	}
	return nil
}

func (x *UpdateKVMRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateKVMRequest) GetNetworkOption() *NetworkOption {
	if x != nil {
		return x.NetworkOption
	}
	return nil
}

type GetKVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the KVM to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetKVMRequest) Reset() {
	*x = GetKVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKVMRequest) ProtoMessage() {}

func (x *GetKVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKVMRequest.ProtoReflect.Descriptor instead.
func (*GetKVMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{82}
}

func (x *GetKVMRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListKVMsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of KVMs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 KVMs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListKVMs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListKVMs` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListKVMsRequest) Reset() {
	*x = ListKVMsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKVMsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKVMsRequest) ProtoMessage() {}

func (x *ListKVMsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKVMsRequest.ProtoReflect.Descriptor instead.
func (*ListKVMsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{83}
}

func (x *ListKVMsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListKVMsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListKVMsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListKVMsRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListKVMsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The KVMs from datastore.
	KVMs []*models.KVM `protobuf:"bytes,1,rep,name=KVMs,proto3" json:"KVMs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListKVMsResponse) Reset() {
	*x = ListKVMsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKVMsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKVMsResponse) ProtoMessage() {}

func (x *ListKVMsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKVMsResponse.ProtoReflect.Descriptor instead.
func (*ListKVMsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{84}
}

func (x *ListKVMsResponse) GetKVMs() []*models.KVM {
	if x != nil {
		return x.KVMs
	}
	return nil
}

func (x *ListKVMsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteKVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the KVM to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteKVMRequest) Reset() {
	*x = DeleteKVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKVMRequest) ProtoMessage() {}

func (x *DeleteKVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKVMRequest.ProtoReflect.Descriptor instead.
func (*DeleteKVMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{85}
}

func (x *DeleteKVMRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a RPM represented in
// the database.
type CreateRPMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RPM to create.
	RPM *models.RPM `protobuf:"bytes,1,opt,name=RPM,proto3" json:"RPM,omitempty"`
	// The ID to use for the RPM, which will become the final component of
	// the RPM's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-)(_:.]{3,63}$" (3-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	RPMId string `protobuf:"bytes,2,opt,name=RPM_id,json=RPMId,proto3" json:"RPM_id,omitempty"`
}

func (x *CreateRPMRequest) Reset() {
	*x = CreateRPMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRPMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRPMRequest) ProtoMessage() {}

func (x *CreateRPMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRPMRequest.ProtoReflect.Descriptor instead.
func (*CreateRPMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{86}
}

func (x *CreateRPMRequest) GetRPM() *models.RPM {
	if x != nil {
		return x.RPM
	}
	return nil
}

func (x *CreateRPMRequest) GetRPMId() string {
	if x != nil {
		return x.RPMId
	}
	return ""
}

type UpdateRPMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RPM to update.
	RPM *models.RPM `protobuf:"bytes,1,opt,name=RPM,proto3" json:"RPM,omitempty"`
	// The list of fields to be updated.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	NetworkOption *NetworkOption         `protobuf:"bytes,3,opt,name=network_option,json=networkOption,proto3" json:"network_option,omitempty"`
}

func (x *UpdateRPMRequest) Reset() {
	*x = UpdateRPMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRPMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRPMRequest) ProtoMessage() {}

func (x *UpdateRPMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRPMRequest.ProtoReflect.Descriptor instead.
func (*UpdateRPMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{87}
}

func (x *UpdateRPMRequest) GetRPM() *models.RPM {
	if x != nil {
		return x.RPM
	}
	return nil
}

func (x *UpdateRPMRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateRPMRequest) GetNetworkOption() *NetworkOption {
	if x != nil {
		return x.NetworkOption
	}
	return nil
}

type GetRPMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the RPM to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRPMRequest) Reset() {
	*x = GetRPMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRPMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRPMRequest) ProtoMessage() {}

func (x *GetRPMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRPMRequest.ProtoReflect.Descriptor instead.
func (*GetRPMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{88}
}

func (x *GetRPMRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListRPMsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of RPMs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 RPMs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRPMs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRPMs` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListRPMsRequest) Reset() {
	*x = ListRPMsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRPMsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRPMsRequest) ProtoMessage() {}

func (x *ListRPMsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRPMsRequest.ProtoReflect.Descriptor instead.
func (*ListRPMsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{89}
}

func (x *ListRPMsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRPMsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRPMsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListRPMsRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListRPMsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RPMs from datastore.
	RPMs []*models.RPM `protobuf:"bytes,1,rep,name=RPMs,proto3" json:"RPMs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRPMsResponse) Reset() {
	*x = ListRPMsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRPMsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRPMsResponse) ProtoMessage() {}

func (x *ListRPMsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRPMsResponse.ProtoReflect.Descriptor instead.
func (*ListRPMsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{90}
}

func (x *ListRPMsResponse) GetRPMs() []*models.RPM {
	if x != nil {
		return x.RPMs
	}
	return nil
}

func (x *ListRPMsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteRPMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the RPM to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteRPMRequest) Reset() {
	*x = DeleteRPMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRPMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRPMRequest) ProtoMessage() {}

func (x *DeleteRPMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRPMRequest.ProtoReflect.Descriptor instead.
func (*DeleteRPMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{91}
}

func (x *DeleteRPMRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a Drac represented in
// the database.
type CreateDracRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The drac to create.
	Drac *models.Drac `protobuf:"bytes,1,opt,name=drac,proto3" json:"drac,omitempty"`
	// The ID to use for the Drac, which will become the final component of
	// the Drac's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-)(_:.]{3,63}$" (3-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	DracId        string         `protobuf:"bytes,2,opt,name=drac_id,json=dracId,proto3" json:"drac_id,omitempty"`
	NetworkOption *NetworkOption `protobuf:"bytes,4,opt,name=network_option,json=networkOption,proto3" json:"network_option,omitempty"`
}

func (x *CreateDracRequest) Reset() {
	*x = CreateDracRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDracRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDracRequest) ProtoMessage() {}

func (x *CreateDracRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDracRequest.ProtoReflect.Descriptor instead.
func (*CreateDracRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{92}
}

func (x *CreateDracRequest) GetDrac() *models.Drac {
	if x != nil {
		return x.Drac
	}
	return nil
}

func (x *CreateDracRequest) GetDracId() string {
	if x != nil {
		return x.DracId
	}
	return ""
}

func (x *CreateDracRequest) GetNetworkOption() *NetworkOption {
	if x != nil {
		return x.NetworkOption
	}
	return nil
}

type UpdateDracRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The drac to update.
	Drac *models.Drac `protobuf:"bytes,1,opt,name=drac,proto3" json:"drac,omitempty"`
	// The list of fields to be updated.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	NetworkOption *NetworkOption         `protobuf:"bytes,4,opt,name=network_option,json=networkOption,proto3" json:"network_option,omitempty"`
}

func (x *UpdateDracRequest) Reset() {
	*x = UpdateDracRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDracRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDracRequest) ProtoMessage() {}

func (x *UpdateDracRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDracRequest.ProtoReflect.Descriptor instead.
func (*UpdateDracRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{93}
}

func (x *UpdateDracRequest) GetDrac() *models.Drac {
	if x != nil {
		return x.Drac
	}
	return nil
}

func (x *UpdateDracRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateDracRequest) GetNetworkOption() *NetworkOption {
	if x != nil {
		return x.NetworkOption
	}
	return nil
}

type GetDracRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the drac to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDracRequest) Reset() {
	*x = GetDracRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDracRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDracRequest) ProtoMessage() {}

func (x *GetDracRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDracRequest.ProtoReflect.Descriptor instead.
func (*GetDracRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{94}
}

func (x *GetDracRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListDracsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of dracs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 dracs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListDracs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListDracs` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListDracsRequest) Reset() {
	*x = ListDracsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDracsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDracsRequest) ProtoMessage() {}

func (x *ListDracsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDracsRequest.ProtoReflect.Descriptor instead.
func (*ListDracsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{95}
}

func (x *ListDracsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDracsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDracsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListDracsRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListDracsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dracs from datastore.
	Dracs []*models.Drac `protobuf:"bytes,1,rep,name=dracs,proto3" json:"dracs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDracsResponse) Reset() {
	*x = ListDracsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDracsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDracsResponse) ProtoMessage() {}

func (x *ListDracsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDracsResponse.ProtoReflect.Descriptor instead.
func (*ListDracsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{96}
}

func (x *ListDracsResponse) GetDracs() []*models.Drac {
	if x != nil {
		return x.Dracs
	}
	return nil
}

func (x *ListDracsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteDracRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Drac to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteDracRequest) Reset() {
	*x = DeleteDracRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDracRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDracRequest) ProtoMessage() {}

func (x *DeleteDracRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDracRequest.ProtoReflect.Descriptor instead.
func (*DeleteDracRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{97}
}

func (x *DeleteDracRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a Switch represented in
// the database.
type CreateSwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The switch to create.
	Switch *models.Switch `protobuf:"bytes,1,opt,name=switch,proto3" json:"switch,omitempty"`
	// The ID to use for the Switch, which will become the final component of
	// the Switch's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-)(_:.]{3,63}$" (3-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	SwitchId string `protobuf:"bytes,2,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
}

func (x *CreateSwitchRequest) Reset() {
	*x = CreateSwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSwitchRequest) ProtoMessage() {}

func (x *CreateSwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSwitchRequest.ProtoReflect.Descriptor instead.
func (*CreateSwitchRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{98}
}

func (x *CreateSwitchRequest) GetSwitch() *models.Switch {
	if x != nil {
		return x.Switch
	}
	return nil
}

func (x *CreateSwitchRequest) GetSwitchId() string {
	if x != nil {
		return x.SwitchId
	}
	return ""
}

type UpdateSwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The switch to update.
	Switch *models.Switch `protobuf:"bytes,1,opt,name=switch,proto3" json:"switch,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateSwitchRequest) Reset() {
	*x = UpdateSwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSwitchRequest) ProtoMessage() {}

func (x *UpdateSwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSwitchRequest.ProtoReflect.Descriptor instead.
func (*UpdateSwitchRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{99}
}

func (x *UpdateSwitchRequest) GetSwitch() *models.Switch {
	if x != nil {
		return x.Switch
	}
	return nil
}

func (x *UpdateSwitchRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetSwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the switch to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSwitchRequest) Reset() {
	*x = GetSwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwitchRequest) ProtoMessage() {}

func (x *GetSwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwitchRequest.ProtoReflect.Descriptor instead.
func (*GetSwitchRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{100}
}

func (x *GetSwitchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListSwitchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of switches to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 switches will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListSwitches` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListSwitches` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListSwitchesRequest) Reset() {
	*x = ListSwitchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSwitchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSwitchesRequest) ProtoMessage() {}

func (x *ListSwitchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSwitchesRequest.ProtoReflect.Descriptor instead.
func (*ListSwitchesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{101}
}

func (x *ListSwitchesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSwitchesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSwitchesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListSwitchesRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListSwitchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The switches from datastore.
	Switches []*models.Switch `protobuf:"bytes,1,rep,name=switches,proto3" json:"switches,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSwitchesResponse) Reset() {
	*x = ListSwitchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSwitchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSwitchesResponse) ProtoMessage() {}

func (x *ListSwitchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSwitchesResponse.ProtoReflect.Descriptor instead.
func (*ListSwitchesResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{102}
}

func (x *ListSwitchesResponse) GetSwitches() []*models.Switch {
	if x != nil {
		return x.Switches
	}
	return nil
}

func (x *ListSwitchesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteSwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Switch to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteSwitchRequest) Reset() {
	*x = DeleteSwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSwitchRequest) ProtoMessage() {}

func (x *DeleteSwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSwitchRequest.ProtoReflect.Descriptor instead.
func (*DeleteSwitchRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{103}
}

func (x *DeleteSwitchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a Vlan represented in
// the database.
type CreateVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vlan to create.
	Vlan *models.Vlan `protobuf:"bytes,1,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// The ID to use for the Vlan, which will become the final component of
	// the Vlan's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-)(_:.]{3,63}$" (3-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	VlanId string `protobuf:"bytes,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *CreateVlanRequest) Reset() {
	*x = CreateVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVlanRequest) ProtoMessage() {}

func (x *CreateVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVlanRequest.ProtoReflect.Descriptor instead.
func (*CreateVlanRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{104}
}

func (x *CreateVlanRequest) GetVlan() *models.Vlan {
	if x != nil {
		return x.Vlan
	}
	return nil
}

func (x *CreateVlanRequest) GetVlanId() string {
	if x != nil {
		return x.VlanId
	}
	return ""
}

type UpdateVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vlan to update.
	Vlan *models.Vlan `protobuf:"bytes,1,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateVlanRequest) Reset() {
	*x = UpdateVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVlanRequest) ProtoMessage() {}

func (x *UpdateVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVlanRequest.ProtoReflect.Descriptor instead.
func (*UpdateVlanRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{105}
}

func (x *UpdateVlanRequest) GetVlan() *models.Vlan {
	if x != nil {
		return x.Vlan
	}
	return nil
}

func (x *UpdateVlanRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the vlan to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetVlanRequest) Reset() {
	*x = GetVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVlanRequest) ProtoMessage() {}

func (x *GetVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVlanRequest.ProtoReflect.Descriptor instead.
func (*GetVlanRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{106}
}

func (x *GetVlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListVlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of vlans to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 vlans will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListVlans` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListVlans` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListVlansRequest) Reset() {
	*x = ListVlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVlansRequest) ProtoMessage() {}

func (x *ListVlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVlansRequest.ProtoReflect.Descriptor instead.
func (*ListVlansRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{107}
}

func (x *ListVlansRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVlansRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListVlansRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListVlansRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListVlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vlans from datastore.
	Vlans []*models.Vlan `protobuf:"bytes,1,rep,name=vlans,proto3" json:"vlans,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListVlansResponse) Reset() {
	*x = ListVlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVlansResponse) ProtoMessage() {}

func (x *ListVlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVlansResponse.ProtoReflect.Descriptor instead.
func (*ListVlansResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{108}
}

func (x *ListVlansResponse) GetVlans() []*models.Vlan {
	if x != nil {
		return x.Vlans
	}
	return nil
}

func (x *ListVlansResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Vlan to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteVlanRequest) Reset() {
	*x = DeleteVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVlanRequest) ProtoMessage() {}

func (x *DeleteVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVlanRequest.ProtoReflect.Descriptor instead.
func (*DeleteVlanRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{109}
}

func (x *DeleteVlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImportVlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportVlansRequest_MachineDbSource
	//	*ImportVlansRequest_ConfigSource
	Source isImportVlansRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportVlansRequest) Reset() {
	*x = ImportVlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportVlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportVlansRequest) ProtoMessage() {}

func (x *ImportVlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportVlansRequest.ProtoReflect.Descriptor instead.
func (*ImportVlansRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{110}
}

func (m *ImportVlansRequest) GetSource() isImportVlansRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportVlansRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportVlansRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportVlansRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportVlansRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportVlansRequest_Source interface {
	isImportVlansRequest_Source()
}

type ImportVlansRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportVlansRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportVlansRequest_MachineDbSource) isImportVlansRequest_Source() {}

func (*ImportVlansRequest_ConfigSource) isImportVlansRequest_Source() {}

type ImportOSVlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportOSVlansRequest_MachineDbSource
	//	*ImportOSVlansRequest_ConfigSource
	Source isImportOSVlansRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportOSVlansRequest) Reset() {
	*x = ImportOSVlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportOSVlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportOSVlansRequest) ProtoMessage() {}

func (x *ImportOSVlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportOSVlansRequest.ProtoReflect.Descriptor instead.
func (*ImportOSVlansRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{111}
}

func (m *ImportOSVlansRequest) GetSource() isImportOSVlansRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportOSVlansRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportOSVlansRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportOSVlansRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportOSVlansRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportOSVlansRequest_Source interface {
	isImportOSVlansRequest_Source()
}

type ImportOSVlansRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportOSVlansRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportOSVlansRequest_MachineDbSource) isImportOSVlansRequest_Source() {}

func (*ImportOSVlansRequest_ConfigSource) isImportOSVlansRequest_Source() {}

type ImportStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportStatesRequest_MachineDbSource
	//	*ImportStatesRequest_ConfigSource
	Source isImportStatesRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportStatesRequest) Reset() {
	*x = ImportStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportStatesRequest) ProtoMessage() {}

func (x *ImportStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportStatesRequest.ProtoReflect.Descriptor instead.
func (*ImportStatesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{112}
}

func (m *ImportStatesRequest) GetSource() isImportStatesRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportStatesRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportStatesRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportStatesRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportStatesRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportStatesRequest_Source interface {
	isImportStatesRequest_Source()
}

type ImportStatesRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportStatesRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportStatesRequest_MachineDbSource) isImportStatesRequest_Source() {}

func (*ImportStatesRequest_ConfigSource) isImportStatesRequest_Source() {}

type GetStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the resource to retrieve the state.
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
}

func (x *GetStateRequest) Reset() {
	*x = GetStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRequest) ProtoMessage() {}

func (x *GetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRequest.ProtoReflect.Descriptor instead.
func (*GetStateRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{113}
}

func (x *GetStateRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type GetDutStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Machine/Asset id.
	ChromeosDeviceId string `protobuf:"bytes,1,opt,name=chromeos_device_id,json=chromeosDeviceId,proto3" json:"chromeos_device_id,omitempty"`
	// Hostname of the DUT/MachineLSE.
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *GetDutStateRequest) Reset() {
	*x = GetDutStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDutStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDutStateRequest) ProtoMessage() {}

func (x *GetDutStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDutStateRequest.ProtoReflect.Descriptor instead.
func (*GetDutStateRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{114}
}

func (x *GetDutStateRequest) GetChromeosDeviceId() string {
	if x != nil {
		return x.ChromeosDeviceId
	}
	return ""
}

func (x *GetDutStateRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type ListDutStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of DutStates to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 DutStates will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListDutStates` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListDutStates` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListDutStatesRequest) Reset() {
	*x = ListDutStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDutStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDutStatesRequest) ProtoMessage() {}

func (x *ListDutStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDutStatesRequest.ProtoReflect.Descriptor instead.
func (*ListDutStatesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{115}
}

func (x *ListDutStatesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDutStatesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDutStatesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListDutStatesRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListDutStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The DutStates from datastore.
	DutStates []*lab.DutState `protobuf:"bytes,1,rep,name=dut_states,json=dutStates,proto3" json:"dut_states,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDutStatesResponse) Reset() {
	*x = ListDutStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDutStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDutStatesResponse) ProtoMessage() {}

func (x *ListDutStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDutStatesResponse.ProtoReflect.Descriptor instead.
func (*ListDutStatesResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{116}
}

func (x *ListDutStatesResponse) GetDutStates() []*lab.DutState {
	if x != nil {
		return x.DutStates
	}
	return nil
}

func (x *ListDutStatesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state record to update.
	State *models.StateRecord `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateStateRequest) Reset() {
	*x = UpdateStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStateRequest) ProtoMessage() {}

func (x *UpdateStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateStateRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{117}
}

func (x *UpdateStateRequest) GetState() *models.StateRecord {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *UpdateStateRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateDutStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state record to update.
	DutState *lab.DutState `protobuf:"bytes,1,opt,name=dut_state,json=dutState,proto3" json:"dut_state,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Used for updating back essential configs from repair/deploy task.
	DutMeta *models.DutMeta `protobuf:"bytes,3,opt,name=dut_meta,json=dutMeta,proto3" json:"dut_meta,omitempty"`
	LabMeta *models.LabMeta `protobuf:"bytes,4,opt,name=lab_meta,json=labMeta,proto3" json:"lab_meta,omitempty"`
}

func (x *UpdateDutStateRequest) Reset() {
	*x = UpdateDutStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDutStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDutStateRequest) ProtoMessage() {}

func (x *UpdateDutStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDutStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateDutStateRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{118}
}

func (x *UpdateDutStateRequest) GetDutState() *lab.DutState {
	if x != nil {
		return x.DutState
	}
	return nil
}

func (x *UpdateDutStateRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateDutStateRequest) GetDutMeta() *models.DutMeta {
	if x != nil {
		return x.DutMeta
	}
	return nil
}

func (x *UpdateDutStateRequest) GetLabMeta() *models.LabMeta {
	if x != nil {
		return x.LabMeta
	}
	return nil
}

type UpdateDeviceRecoveryDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id or asset tag for chromeos device.
	ChromeosDeviceId string `protobuf:"bytes,1,opt,name=chromeos_device_id,json=chromeosDeviceId,proto3" json:"chromeos_device_id,omitempty"`
	// The hostname of the device.
	// Optional field but strongly recommended. If empty, hostname will be derived from chromeos_device_id.
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The DUT state to update.
	ResourceState models.State `protobuf:"varint,3,opt,name=resource_state,json=resourceState,proto3,enum=unifiedfleet.api.v1.models.State" json:"resource_state,omitempty"`
	// The state record to update.
	// DutState.id is required and its value should be equal to chromeos_device_id(tag 1)
	// DutState.hostname is optional, if not empty it should be equal to hostname(tag 2)
	DutState *lab.DutState `protobuf:"bytes,4,opt,name=dut_state,json=dutState,proto3" json:"dut_state,omitempty"`
	// Used for updating back essential configs from repair/deploy task.
	DutData *UpdateDeviceRecoveryDataRequest_DutData `protobuf:"bytes,5,opt,name=dut_data,json=dutData,proto3" json:"dut_data,omitempty"`
	// Used for updating back essential configs from repair/deploy task.
	LabData *UpdateDeviceRecoveryDataRequest_LabData `protobuf:"bytes,6,opt,name=lab_data,json=labData,proto3" json:"lab_data,omitempty"`
}

func (x *UpdateDeviceRecoveryDataRequest) Reset() {
	*x = UpdateDeviceRecoveryDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRecoveryDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRecoveryDataRequest) ProtoMessage() {}

func (x *UpdateDeviceRecoveryDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRecoveryDataRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRecoveryDataRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{119}
}

func (x *UpdateDeviceRecoveryDataRequest) GetChromeosDeviceId() string {
	if x != nil {
		return x.ChromeosDeviceId
	}
	return ""
}

func (x *UpdateDeviceRecoveryDataRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *UpdateDeviceRecoveryDataRequest) GetResourceState() models.State {
	if x != nil {
		return x.ResourceState
	}
	return models.State(0)
}

func (x *UpdateDeviceRecoveryDataRequest) GetDutState() *lab.DutState {
	if x != nil {
		return x.DutState
	}
	return nil
}

func (x *UpdateDeviceRecoveryDataRequest) GetDutData() *UpdateDeviceRecoveryDataRequest_DutData {
	if x != nil {
		return x.DutData
	}
	return nil
}

func (x *UpdateDeviceRecoveryDataRequest) GetLabData() *UpdateDeviceRecoveryDataRequest_LabData {
	if x != nil {
		return x.LabData
	}
	return nil
}

type UpdateDeviceRecoveryDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDeviceRecoveryDataResponse) Reset() {
	*x = UpdateDeviceRecoveryDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRecoveryDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRecoveryDataResponse) ProtoMessage() {}

func (x *UpdateDeviceRecoveryDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRecoveryDataResponse.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRecoveryDataResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{120}
}

type RackRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rack to create.
	Rack *models.Rack `protobuf:"bytes,1,opt,name=rack,proto3" json:"rack,omitempty"`
}

func (x *RackRegistrationRequest) Reset() {
	*x = RackRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackRegistrationRequest) ProtoMessage() {}

func (x *RackRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackRegistrationRequest.ProtoReflect.Descriptor instead.
func (*RackRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{121}
}

func (x *RackRegistrationRequest) GetRack() *models.Rack {
	if x != nil {
		return x.Rack
	}
	return nil
}

type NetworkOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vlan to setup the network configurations
	Vlan string `protobuf:"bytes,1,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// Specifying nic name for automatically assign IP
	Nic string `protobuf:"bytes,2,opt,name=nic,proto3" json:"nic,omitempty"`
	// Delete the existing network configurations if existing
	Delete bool `protobuf:"varint,3,opt,name=delete,proto3" json:"delete,omitempty"`
	// The user-specified ip, if it's setup, other options will be ignored.
	Ip string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *NetworkOption) Reset() {
	*x = NetworkOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkOption) ProtoMessage() {}

func (x *NetworkOption) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkOption.ProtoReflect.Descriptor instead.
func (*NetworkOption) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{122}
}

func (x *NetworkOption) GetVlan() string {
	if x != nil {
		return x.Vlan
	}
	return ""
}

func (x *NetworkOption) GetNic() string {
	if x != nil {
		return x.Nic
	}
	return ""
}

func (x *NetworkOption) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

func (x *NetworkOption) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type CreateAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset to register
	Asset *models.Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *CreateAssetRequest) Reset() {
	*x = CreateAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssetRequest) ProtoMessage() {}

func (x *CreateAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssetRequest.ProtoReflect.Descriptor instead.
func (*CreateAssetRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{123}
}

func (x *CreateAssetRequest) GetAsset() *models.Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

type UpdateAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset to update.
	Asset *models.Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateAssetRequest) Reset() {
	*x = UpdateAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetRequest) ProtoMessage() {}

func (x *UpdateAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetRequest.ProtoReflect.Descriptor instead.
func (*UpdateAssetRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{124}
}

func (x *UpdateAssetRequest) GetAsset() *models.Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *UpdateAssetRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the asset to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetAssetRequest) Reset() {
	*x = GetAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetRequest) ProtoMessage() {}

func (x *GetAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetRequest.ProtoReflect.Descriptor instead.
func (*GetAssetRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{125}
}

func (x *GetAssetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListAssetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of assets to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 assets will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListAssets` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListAssets` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListAssetsRequest) Reset() {
	*x = ListAssetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetsRequest) ProtoMessage() {}

func (x *ListAssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetsRequest.ProtoReflect.Descriptor instead.
func (*ListAssetsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{126}
}

func (x *ListAssetsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAssetsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListAssetsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListAssetsRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListAssetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The assets from datastore.
	Assets []*models.Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAssetsResponse) Reset() {
	*x = ListAssetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetsResponse) ProtoMessage() {}

func (x *ListAssetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetsResponse.ProtoReflect.Descriptor instead.
func (*ListAssetsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{127}
}

func (x *ListAssetsResponse) GetAssets() []*models.Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *ListAssetsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the asset to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteAssetRequest) Reset() {
	*x = DeleteAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssetRequest) ProtoMessage() {}

func (x *DeleteAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssetRequest.ProtoReflect.Descriptor instead.
func (*DeleteAssetRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{128}
}

func (x *DeleteAssetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RenameAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Asset to rename
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new name of the Asset.
	NewName string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *RenameAssetRequest) Reset() {
	*x = RenameAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameAssetRequest) ProtoMessage() {}

func (x *RenameAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameAssetRequest.ProtoReflect.Descriptor instead.
func (*RenameAssetRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{129}
}

func (x *RenameAssetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenameAssetRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type BatchGetKVMsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all kvms being retrieved.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The names of the kvms to retrieve.
	// Format: kvms/{kvm}
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetKVMsRequest) Reset() {
	*x = BatchGetKVMsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetKVMsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetKVMsRequest) ProtoMessage() {}

func (x *BatchGetKVMsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetKVMsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetKVMsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{130}
}

func (x *BatchGetKVMsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetKVMsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetKVMsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The KVMs from datastore.
	KVMs []*models.KVM `protobuf:"bytes,1,rep,name=KVMs,proto3" json:"KVMs,omitempty"`
}

func (x *BatchGetKVMsResponse) Reset() {
	*x = BatchGetKVMsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetKVMsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetKVMsResponse) ProtoMessage() {}

func (x *BatchGetKVMsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetKVMsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetKVMsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{131}
}

func (x *BatchGetKVMsResponse) GetKVMs() []*models.KVM {
	if x != nil {
		return x.KVMs
	}
	return nil
}

type BatchGetDHCPConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all dhcp configs being retrieved.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The hostnames of the dhcp configs to retrieve.
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetDHCPConfigsRequest) Reset() {
	*x = BatchGetDHCPConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetDHCPConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetDHCPConfigsRequest) ProtoMessage() {}

func (x *BatchGetDHCPConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetDHCPConfigsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetDHCPConfigsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{132}
}

func (x *BatchGetDHCPConfigsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetDHCPConfigsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetDHCPConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The KVMs from datastore.
	DhcpConfigs []*models.DHCPConfig `protobuf:"bytes,1,rep,name=dhcp_configs,json=dhcpConfigs,proto3" json:"dhcp_configs,omitempty"`
}

func (x *BatchGetDHCPConfigsResponse) Reset() {
	*x = BatchGetDHCPConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetDHCPConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetDHCPConfigsResponse) ProtoMessage() {}

func (x *BatchGetDHCPConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetDHCPConfigsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetDHCPConfigsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{133}
}

func (x *BatchGetDHCPConfigsResponse) GetDhcpConfigs() []*models.DHCPConfig {
	if x != nil {
		return x.DhcpConfigs
	}
	return nil
}

type BatchGetMachineLSEsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all machine lses being retrieved.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The names of the machine lses to retrieve.
	// Format: machineLSEs/{name}
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetMachineLSEsRequest) Reset() {
	*x = BatchGetMachineLSEsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetMachineLSEsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetMachineLSEsRequest) ProtoMessage() {}

func (x *BatchGetMachineLSEsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetMachineLSEsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetMachineLSEsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{134}
}

func (x *BatchGetMachineLSEsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetMachineLSEsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetMachineLSEsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Machine lses from datastore.
	MachineLses []*models.MachineLSE `protobuf:"bytes,1,rep,name=machine_lses,json=machineLses,proto3" json:"machine_lses,omitempty"`
}

func (x *BatchGetMachineLSEsResponse) Reset() {
	*x = BatchGetMachineLSEsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetMachineLSEsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetMachineLSEsResponse) ProtoMessage() {}

func (x *BatchGetMachineLSEsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetMachineLSEsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetMachineLSEsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{135}
}

func (x *BatchGetMachineLSEsResponse) GetMachineLses() []*models.MachineLSE {
	if x != nil {
		return x.MachineLses
	}
	return nil
}

type BatchGetMachinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all machines being retrieved.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The names of the machines to retrieve.
	// Format: machines/{name}
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetMachinesRequest) Reset() {
	*x = BatchGetMachinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetMachinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetMachinesRequest) ProtoMessage() {}

func (x *BatchGetMachinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetMachinesRequest.ProtoReflect.Descriptor instead.
func (*BatchGetMachinesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{136}
}

func (x *BatchGetMachinesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetMachinesRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetMachinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machines from datastore.
	Machines []*models.Machine `protobuf:"bytes,1,rep,name=machines,proto3" json:"machines,omitempty"`
}

func (x *BatchGetMachinesResponse) Reset() {
	*x = BatchGetMachinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetMachinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetMachinesResponse) ProtoMessage() {}

func (x *BatchGetMachinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetMachinesResponse.ProtoReflect.Descriptor instead.
func (*BatchGetMachinesResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{137}
}

func (x *BatchGetMachinesResponse) GetMachines() []*models.Machine {
	if x != nil {
		return x.Machines
	}
	return nil
}

type BatchGetSwitchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all switches being retrieved.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The names of the switches to retrieve.
	// Format: switches/{name}
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetSwitchesRequest) Reset() {
	*x = BatchGetSwitchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetSwitchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetSwitchesRequest) ProtoMessage() {}

func (x *BatchGetSwitchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetSwitchesRequest.ProtoReflect.Descriptor instead.
func (*BatchGetSwitchesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{138}
}

func (x *BatchGetSwitchesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetSwitchesRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetSwitchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The switches from datastore.
	Switches []*models.Switch `protobuf:"bytes,1,rep,name=switches,proto3" json:"switches,omitempty"`
}

func (x *BatchGetSwitchesResponse) Reset() {
	*x = BatchGetSwitchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetSwitchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetSwitchesResponse) ProtoMessage() {}

func (x *BatchGetSwitchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetSwitchesResponse.ProtoReflect.Descriptor instead.
func (*BatchGetSwitchesResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{139}
}

func (x *BatchGetSwitchesResponse) GetSwitches() []*models.Switch {
	if x != nil {
		return x.Switches
	}
	return nil
}

type BatchGetRPMsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all rpms being retrieved.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The names of the rpms to retrieve.
	// Format: rpms/{name}
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetRPMsRequest) Reset() {
	*x = BatchGetRPMsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetRPMsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetRPMsRequest) ProtoMessage() {}

func (x *BatchGetRPMsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetRPMsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetRPMsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{140}
}

func (x *BatchGetRPMsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetRPMsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetRPMsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rpms from datastore.
	Rpms []*models.RPM `protobuf:"bytes,1,rep,name=rpms,proto3" json:"rpms,omitempty"`
}

func (x *BatchGetRPMsResponse) Reset() {
	*x = BatchGetRPMsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetRPMsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetRPMsResponse) ProtoMessage() {}

func (x *BatchGetRPMsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetRPMsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetRPMsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{141}
}

func (x *BatchGetRPMsResponse) GetRpms() []*models.RPM {
	if x != nil {
		return x.Rpms
	}
	return nil
}

type BatchGetDracsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all dracs being retrieved.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The names of the dracs to retrieve.
	// Format: dracs/{name}
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetDracsRequest) Reset() {
	*x = BatchGetDracsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetDracsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetDracsRequest) ProtoMessage() {}

func (x *BatchGetDracsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetDracsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetDracsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{142}
}

func (x *BatchGetDracsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetDracsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetDracsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dracs from datastore.
	Dracs []*models.Drac `protobuf:"bytes,1,rep,name=dracs,proto3" json:"dracs,omitempty"`
}

func (x *BatchGetDracsResponse) Reset() {
	*x = BatchGetDracsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetDracsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetDracsResponse) ProtoMessage() {}

func (x *BatchGetDracsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetDracsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetDracsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{143}
}

func (x *BatchGetDracsResponse) GetDracs() []*models.Drac {
	if x != nil {
		return x.Dracs
	}
	return nil
}

type BatchGetNicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all nics being retrieved.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The names of the nics to retrieve.
	// Format: nics/{name}
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetNicsRequest) Reset() {
	*x = BatchGetNicsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetNicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetNicsRequest) ProtoMessage() {}

func (x *BatchGetNicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetNicsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetNicsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{144}
}

func (x *BatchGetNicsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetNicsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetNicsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nics from datastore.
	Nics []*models.Nic `protobuf:"bytes,1,rep,name=nics,proto3" json:"nics,omitempty"`
}

func (x *BatchGetNicsResponse) Reset() {
	*x = BatchGetNicsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetNicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetNicsResponse) ProtoMessage() {}

func (x *BatchGetNicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetNicsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetNicsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{145}
}

func (x *BatchGetNicsResponse) GetNics() []*models.Nic {
	if x != nil {
		return x.Nics
	}
	return nil
}

type BatchGetVMsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all vms being retrieved.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The names of the vms to retrieve.
	// Format: vms/{name}
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetVMsRequest) Reset() {
	*x = BatchGetVMsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetVMsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetVMsRequest) ProtoMessage() {}

func (x *BatchGetVMsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetVMsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetVMsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{146}
}

func (x *BatchGetVMsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetVMsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetVMsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vms from datastore.
	Vms []*models.VM `protobuf:"bytes,1,rep,name=vms,proto3" json:"vms,omitempty"`
}

func (x *BatchGetVMsResponse) Reset() {
	*x = BatchGetVMsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetVMsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetVMsResponse) ProtoMessage() {}

func (x *BatchGetVMsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetVMsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetVMsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{147}
}

func (x *BatchGetVMsResponse) GetVms() []*models.VM {
	if x != nil {
		return x.Vms
	}
	return nil
}

type BatchGetVlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all vlans being retrieved.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The names of the vlans to retrieve.
	// Format: vlans/{name}
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetVlansRequest) Reset() {
	*x = BatchGetVlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetVlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetVlansRequest) ProtoMessage() {}

func (x *BatchGetVlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetVlansRequest.ProtoReflect.Descriptor instead.
func (*BatchGetVlansRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{148}
}

func (x *BatchGetVlansRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetVlansRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetVlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vlans from datastore.
	Vlans []*models.Vlan `protobuf:"bytes,1,rep,name=vlans,proto3" json:"vlans,omitempty"`
}

func (x *BatchGetVlansResponse) Reset() {
	*x = BatchGetVlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetVlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetVlansResponse) ProtoMessage() {}

func (x *BatchGetVlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetVlansResponse.ProtoReflect.Descriptor instead.
func (*BatchGetVlansResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{149}
}

func (x *BatchGetVlansResponse) GetVlans() []*models.Vlan {
	if x != nil {
		return x.Vlans
	}
	return nil
}

type BatchGetRacksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all racks being retrieved.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The names of the racks to retrieve.
	// Format: racks/{name}
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetRacksRequest) Reset() {
	*x = BatchGetRacksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetRacksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetRacksRequest) ProtoMessage() {}

func (x *BatchGetRacksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetRacksRequest.ProtoReflect.Descriptor instead.
func (*BatchGetRacksRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{150}
}

func (x *BatchGetRacksRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetRacksRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetRacksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The racks from datastore.
	Racks []*models.Rack `protobuf:"bytes,1,rep,name=racks,proto3" json:"racks,omitempty"`
}

func (x *BatchGetRacksResponse) Reset() {
	*x = BatchGetRacksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetRacksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetRacksResponse) ProtoMessage() {}

func (x *BatchGetRacksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetRacksResponse.ProtoReflect.Descriptor instead.
func (*BatchGetRacksResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{151}
}

func (x *BatchGetRacksResponse) GetRacks() []*models.Rack {
	if x != nil {
		return x.Racks
	}
	return nil
}

type BatchGetChromePlatformsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all chrome platforms being retrieved.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The names of the chrome platforms to retrieve.
	// Format: chromeplatforms/{name}
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetChromePlatformsRequest) Reset() {
	*x = BatchGetChromePlatformsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetChromePlatformsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetChromePlatformsRequest) ProtoMessage() {}

func (x *BatchGetChromePlatformsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetChromePlatformsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetChromePlatformsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{152}
}

func (x *BatchGetChromePlatformsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetChromePlatformsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetChromePlatformsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The chrome platforms from datastore.
	ChromePlatforms []*models.ChromePlatform `protobuf:"bytes,1,rep,name=chrome_platforms,json=chromePlatforms,proto3" json:"chrome_platforms,omitempty"`
}

func (x *BatchGetChromePlatformsResponse) Reset() {
	*x = BatchGetChromePlatformsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetChromePlatformsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetChromePlatformsResponse) ProtoMessage() {}

func (x *BatchGetChromePlatformsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetChromePlatformsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetChromePlatformsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{153}
}

func (x *BatchGetChromePlatformsResponse) GetChromePlatforms() []*models.ChromePlatform {
	if x != nil {
		return x.ChromePlatforms
	}
	return nil
}

type BatchGetMachineLSEPrototypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all machine lse prototypes being retrieved.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The names of the machine lse prototypes to retrieve.
	// Format: machineLSEPrototypes/{name}
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetMachineLSEPrototypesRequest) Reset() {
	*x = BatchGetMachineLSEPrototypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetMachineLSEPrototypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetMachineLSEPrototypesRequest) ProtoMessage() {}

func (x *BatchGetMachineLSEPrototypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetMachineLSEPrototypesRequest.ProtoReflect.Descriptor instead.
func (*BatchGetMachineLSEPrototypesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{154}
}

func (x *BatchGetMachineLSEPrototypesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetMachineLSEPrototypesRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetMachineLSEPrototypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machine lse prototypes from datastore.
	MachineLsePrototypes []*models.MachineLSEPrototype `protobuf:"bytes,1,rep,name=machine_lse_prototypes,json=machineLsePrototypes,proto3" json:"machine_lse_prototypes,omitempty"`
}

func (x *BatchGetMachineLSEPrototypesResponse) Reset() {
	*x = BatchGetMachineLSEPrototypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetMachineLSEPrototypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetMachineLSEPrototypesResponse) ProtoMessage() {}

func (x *BatchGetMachineLSEPrototypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetMachineLSEPrototypesResponse.ProtoReflect.Descriptor instead.
func (*BatchGetMachineLSEPrototypesResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{155}
}

func (x *BatchGetMachineLSEPrototypesResponse) GetMachineLsePrototypes() []*models.MachineLSEPrototype {
	if x != nil {
		return x.MachineLsePrototypes
	}
	return nil
}

type BatchGetRackLSEPrototypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource shared by all rack lse prototypes being retrieved.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The names of the rack lse prototypes to retrieve.
	// Format: rackLSEPrototypes/{name}
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetRackLSEPrototypesRequest) Reset() {
	*x = BatchGetRackLSEPrototypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetRackLSEPrototypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetRackLSEPrototypesRequest) ProtoMessage() {}

func (x *BatchGetRackLSEPrototypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetRackLSEPrototypesRequest.ProtoReflect.Descriptor instead.
func (*BatchGetRackLSEPrototypesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{156}
}

func (x *BatchGetRackLSEPrototypesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetRackLSEPrototypesRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetRackLSEPrototypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rack lse prototypes from datastore.
	RackLsePrototypes []*models.RackLSEPrototype `protobuf:"bytes,1,rep,name=rack_lse_prototypes,json=rackLsePrototypes,proto3" json:"rack_lse_prototypes,omitempty"`
}

func (x *BatchGetRackLSEPrototypesResponse) Reset() {
	*x = BatchGetRackLSEPrototypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetRackLSEPrototypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetRackLSEPrototypesResponse) ProtoMessage() {}

func (x *BatchGetRackLSEPrototypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetRackLSEPrototypesResponse.ProtoReflect.Descriptor instead.
func (*BatchGetRackLSEPrototypesResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{157}
}

func (x *BatchGetRackLSEPrototypesResponse) GetRackLsePrototypes() []*models.RackLSEPrototype {
	if x != nil {
		return x.RackLsePrototypes
	}
	return nil
}

type GetChromeOSDeviceDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Machine/Asset id.
	ChromeosDeviceId string `protobuf:"bytes,1,opt,name=chromeos_device_id,json=chromeosDeviceId,proto3" json:"chromeos_device_id,omitempty"`
	// Hostname of the DUT/MachineLSE.
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *GetChromeOSDeviceDataRequest) Reset() {
	*x = GetChromeOSDeviceDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChromeOSDeviceDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChromeOSDeviceDataRequest) ProtoMessage() {}

func (x *GetChromeOSDeviceDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChromeOSDeviceDataRequest.ProtoReflect.Descriptor instead.
func (*GetChromeOSDeviceDataRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{158}
}

func (x *GetChromeOSDeviceDataRequest) GetChromeosDeviceId() string {
	if x != nil {
		return x.ChromeosDeviceId
	}
	return ""
}

func (x *GetChromeOSDeviceDataRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

// Contains the required information for creating a CachingService represented in
// the database.
type CreateCachingServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CachingService to create.
	CachingService *models.CachingService `protobuf:"bytes,1,opt,name=cachingService,proto3" json:"cachingService,omitempty"`
	// The ID to use for the CachingService, which will become the final component of
	// the CachingService's resource name.
	//
	// Pattern is {hostname or ipv4}.
	CachingServiceId string `protobuf:"bytes,2,opt,name=cachingService_id,json=cachingServiceId,proto3" json:"cachingService_id,omitempty"`
}

func (x *CreateCachingServiceRequest) Reset() {
	*x = CreateCachingServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCachingServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCachingServiceRequest) ProtoMessage() {}

func (x *CreateCachingServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCachingServiceRequest.ProtoReflect.Descriptor instead.
func (*CreateCachingServiceRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{159}
}

func (x *CreateCachingServiceRequest) GetCachingService() *models.CachingService {
	if x != nil {
		return x.CachingService
	}
	return nil
}

func (x *CreateCachingServiceRequest) GetCachingServiceId() string {
	if x != nil {
		return x.CachingServiceId
	}
	return ""
}

type UpdateCachingServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CachingService to update.
	CachingService *models.CachingService `protobuf:"bytes,1,opt,name=cachingService,proto3" json:"cachingService,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateCachingServiceRequest) Reset() {
	*x = UpdateCachingServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCachingServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCachingServiceRequest) ProtoMessage() {}

func (x *UpdateCachingServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCachingServiceRequest.ProtoReflect.Descriptor instead.
func (*UpdateCachingServiceRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{160}
}

func (x *UpdateCachingServiceRequest) GetCachingService() *models.CachingService {
	if x != nil {
		return x.CachingService
	}
	return nil
}

func (x *UpdateCachingServiceRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetCachingServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the CachingService to retrieve.
	// Pattern is 'cachingservices/{hostname or ipv4}'
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetCachingServiceRequest) Reset() {
	*x = GetCachingServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCachingServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCachingServiceRequest) ProtoMessage() {}

func (x *GetCachingServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCachingServiceRequest.ProtoReflect.Descriptor instead.
func (*GetCachingServiceRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{161}
}

func (x *GetCachingServiceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListCachingServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of CachingServices to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 CachingServices will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListCachingServices` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListCachingServices` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keysOnly,proto3" json:"keysOnly,omitempty"`
}

func (x *ListCachingServicesRequest) Reset() {
	*x = ListCachingServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCachingServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCachingServicesRequest) ProtoMessage() {}

func (x *ListCachingServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCachingServicesRequest.ProtoReflect.Descriptor instead.
func (*ListCachingServicesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{162}
}

func (x *ListCachingServicesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCachingServicesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListCachingServicesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListCachingServicesRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListCachingServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CachingServices from datastore.
	CachingServices []*models.CachingService `protobuf:"bytes,1,rep,name=cachingServices,proto3" json:"cachingServices,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListCachingServicesResponse) Reset() {
	*x = ListCachingServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCachingServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCachingServicesResponse) ProtoMessage() {}

func (x *ListCachingServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCachingServicesResponse.ProtoReflect.Descriptor instead.
func (*ListCachingServicesResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{163}
}

func (x *ListCachingServicesResponse) GetCachingServices() []*models.CachingService {
	if x != nil {
		return x.CachingServices
	}
	return nil
}

func (x *ListCachingServicesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteCachingServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the CachingService to delete.
	// Pattern is 'cachingservices/{hostname or ipv4}'
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteCachingServiceRequest) Reset() {
	*x = DeleteCachingServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCachingServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCachingServiceRequest) ProtoMessage() {}

func (x *DeleteCachingServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCachingServiceRequest.ProtoReflect.Descriptor instead.
func (*DeleteCachingServiceRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{164}
}

func (x *DeleteCachingServiceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a SchedulingUnit represented in
// the database.
type CreateSchedulingUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The SchedulingUnit to create.
	SchedulingUnit *models.SchedulingUnit `protobuf:"bytes,1,opt,name=scheduling_unit,json=schedulingUnit,proto3" json:"scheduling_unit,omitempty"`
	// The ID to use for the SchedulingUnit, which will become the final component of
	// the SchedulingUnit's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-)(_:.]{3,63}$" (3-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	SchedulingUnitId string `protobuf:"bytes,2,opt,name=scheduling_unit_id,json=schedulingUnitId,proto3" json:"scheduling_unit_id,omitempty"`
}

func (x *CreateSchedulingUnitRequest) Reset() {
	*x = CreateSchedulingUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchedulingUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchedulingUnitRequest) ProtoMessage() {}

func (x *CreateSchedulingUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchedulingUnitRequest.ProtoReflect.Descriptor instead.
func (*CreateSchedulingUnitRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{165}
}

func (x *CreateSchedulingUnitRequest) GetSchedulingUnit() *models.SchedulingUnit {
	if x != nil {
		return x.SchedulingUnit
	}
	return nil
}

func (x *CreateSchedulingUnitRequest) GetSchedulingUnitId() string {
	if x != nil {
		return x.SchedulingUnitId
	}
	return ""
}

type UpdateSchedulingUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The SchedulingUnit to update.
	SchedulingUnit *models.SchedulingUnit `protobuf:"bytes,1,opt,name=scheduling_unit,json=schedulingUnit,proto3" json:"scheduling_unit,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateSchedulingUnitRequest) Reset() {
	*x = UpdateSchedulingUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSchedulingUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchedulingUnitRequest) ProtoMessage() {}

func (x *UpdateSchedulingUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchedulingUnitRequest.ProtoReflect.Descriptor instead.
func (*UpdateSchedulingUnitRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{166}
}

func (x *UpdateSchedulingUnitRequest) GetSchedulingUnit() *models.SchedulingUnit {
	if x != nil {
		return x.SchedulingUnit
	}
	return nil
}

func (x *UpdateSchedulingUnitRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetSchedulingUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the SchedulingUnit to retrieve.
	// Pattern is 'schedulingunits/{ipv4}'
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSchedulingUnitRequest) Reset() {
	*x = GetSchedulingUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulingUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulingUnitRequest) ProtoMessage() {}

func (x *GetSchedulingUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulingUnitRequest.ProtoReflect.Descriptor instead.
func (*GetSchedulingUnitRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{167}
}

func (x *GetSchedulingUnitRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListSchedulingUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of SchedulingUnits to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 SchedulingUnits will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListSchedulingUnits` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListSchedulingUnits` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter takes the filtering condition.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// if this is true, only keys will be returned else the entire object
	// will be returned. By setting this to true, the list call be will faster.
	KeysOnly bool `protobuf:"varint,4,opt,name=keys_only,json=keysOnly,proto3" json:"keys_only,omitempty"`
}

func (x *ListSchedulingUnitsRequest) Reset() {
	*x = ListSchedulingUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSchedulingUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchedulingUnitsRequest) ProtoMessage() {}

func (x *ListSchedulingUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchedulingUnitsRequest.ProtoReflect.Descriptor instead.
func (*ListSchedulingUnitsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{168}
}

func (x *ListSchedulingUnitsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSchedulingUnitsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSchedulingUnitsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListSchedulingUnitsRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

type ListSchedulingUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The SchedulingUnits from datastore.
	SchedulingUnits []*models.SchedulingUnit `protobuf:"bytes,1,rep,name=scheduling_units,json=schedulingUnits,proto3" json:"scheduling_units,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSchedulingUnitsResponse) Reset() {
	*x = ListSchedulingUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSchedulingUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchedulingUnitsResponse) ProtoMessage() {}

func (x *ListSchedulingUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchedulingUnitsResponse.ProtoReflect.Descriptor instead.
func (*ListSchedulingUnitsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{169}
}

func (x *ListSchedulingUnitsResponse) GetSchedulingUnits() []*models.SchedulingUnit {
	if x != nil {
		return x.SchedulingUnits
	}
	return nil
}

func (x *ListSchedulingUnitsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteSchedulingUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the SchedulingUnit to delete.
	// Pattern is 'schedulingunits/{schedulingunit}'
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteSchedulingUnitRequest) Reset() {
	*x = DeleteSchedulingUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSchedulingUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchedulingUnitRequest) ProtoMessage() {}

func (x *DeleteSchedulingUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchedulingUnitRequest.ProtoReflect.Descriptor instead.
func (*DeleteSchedulingUnitRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{170}
}

func (x *DeleteSchedulingUnitRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateConfigBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ConfigBundle to update.
	// The ConfigBundle's ID composed of `${program}-${design}-${designconfig}` is
	// used to identify the ConfigBundle to be updated.
	// Pattern is 'config_bundles/{config_bundle}'
	// Proto path:
	// go.chromium.org/chromiumos/config/proto/chromiumos/config/payload/config_bundle.proto
	ConfigBundle []byte `protobuf:"bytes,1,opt,name=config_bundle,json=configBundle,proto3" json:"config_bundle,omitempty"`
	// OPTIONAL: The list of fields to be updated. If omitted, the whole
	// config_bundle will be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the ConfigBundle is not found, a new ConfigBundle will
	// be created. In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdateConfigBundleRequest) Reset() {
	*x = UpdateConfigBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigBundleRequest) ProtoMessage() {}

func (x *UpdateConfigBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigBundleRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigBundleRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{171}
}

func (x *UpdateConfigBundleRequest) GetConfigBundle() []byte {
	if x != nil {
		return x.ConfigBundle
	}
	return nil
}

func (x *UpdateConfigBundleRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateConfigBundleRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type UpdateConfigBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return value of UpdateConfigBundle.
	// NOTE: bytes is returned to avoid import errors for protos in
	// go.chromium.org. This should ideally be the ConfigBundle proto.
	// Proto path:
	// go.chromium.org/chromiumos/config/proto/chromiumos/config/payload/config_bundle.proto
	ConfigBundle []byte `protobuf:"bytes,1,opt,name=config_bundle,json=configBundle,proto3" json:"config_bundle,omitempty"`
}

func (x *UpdateConfigBundleResponse) Reset() {
	*x = UpdateConfigBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigBundleResponse) ProtoMessage() {}

func (x *UpdateConfigBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigBundleResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigBundleResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{172}
}

func (x *UpdateConfigBundleResponse) GetConfigBundle() []byte {
	if x != nil {
		return x.ConfigBundle
	}
	return nil
}

type GetDeviceDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Machine/Asset ID.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Hostname of the DUT/MachineLSE.
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *GetDeviceDataRequest) Reset() {
	*x = GetDeviceDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceDataRequest) ProtoMessage() {}

func (x *GetDeviceDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceDataRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceDataRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{173}
}

func (x *GetDeviceDataRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *GetDeviceDataRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type GetDeviceDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Resource:
	//	*GetDeviceDataResponse_SchedulingUnit
	//	*GetDeviceDataResponse_ChromeOsDeviceData
	//	*GetDeviceDataResponse_AttachedDeviceData
	//	*GetDeviceDataResponse_BrowserDeviceData
	Resource     isGetDeviceDataResponse_Resource   `protobuf_oneof:"resource"`
	ResourceType GetDeviceDataResponse_ResourceType `protobuf:"varint,4,opt,name=resource_type,json=resourceType,proto3,enum=unifiedfleet.api.v1.rpc.GetDeviceDataResponse_ResourceType" json:"resource_type,omitempty"`
}

func (x *GetDeviceDataResponse) Reset() {
	*x = GetDeviceDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceDataResponse) ProtoMessage() {}

func (x *GetDeviceDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceDataResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceDataResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{174}
}

func (m *GetDeviceDataResponse) GetResource() isGetDeviceDataResponse_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *GetDeviceDataResponse) GetSchedulingUnit() *models.SchedulingUnit {
	if x, ok := x.GetResource().(*GetDeviceDataResponse_SchedulingUnit); ok {
		return x.SchedulingUnit
	}
	return nil
}

func (x *GetDeviceDataResponse) GetChromeOsDeviceData() *models.ChromeOSDeviceData {
	if x, ok := x.GetResource().(*GetDeviceDataResponse_ChromeOsDeviceData); ok {
		return x.ChromeOsDeviceData
	}
	return nil
}

func (x *GetDeviceDataResponse) GetAttachedDeviceData() *AttachedDeviceData {
	if x, ok := x.GetResource().(*GetDeviceDataResponse_AttachedDeviceData); ok {
		return x.AttachedDeviceData
	}
	return nil
}

func (x *GetDeviceDataResponse) GetBrowserDeviceData() *BrowserDeviceData {
	if x, ok := x.GetResource().(*GetDeviceDataResponse_BrowserDeviceData); ok {
		return x.BrowserDeviceData
	}
	return nil
}

func (x *GetDeviceDataResponse) GetResourceType() GetDeviceDataResponse_ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return GetDeviceDataResponse_RESOURCE_TYPE_UNSPECIFIED
}

type isGetDeviceDataResponse_Resource interface {
	isGetDeviceDataResponse_Resource()
}

type GetDeviceDataResponse_SchedulingUnit struct {
	SchedulingUnit *models.SchedulingUnit `protobuf:"bytes,1,opt,name=scheduling_unit,json=schedulingUnit,proto3,oneof"`
}

type GetDeviceDataResponse_ChromeOsDeviceData struct {
	ChromeOsDeviceData *models.ChromeOSDeviceData `protobuf:"bytes,2,opt,name=chrome_os_device_data,json=chromeOsDeviceData,proto3,oneof"`
}

type GetDeviceDataResponse_AttachedDeviceData struct {
	AttachedDeviceData *AttachedDeviceData `protobuf:"bytes,3,opt,name=attached_device_data,json=attachedDeviceData,proto3,oneof"`
}

type GetDeviceDataResponse_BrowserDeviceData struct {
	BrowserDeviceData *BrowserDeviceData `protobuf:"bytes,5,opt,name=browser_device_data,json=browserDeviceData,proto3,oneof"`
}

func (*GetDeviceDataResponse_SchedulingUnit) isGetDeviceDataResponse_Resource() {}

func (*GetDeviceDataResponse_ChromeOsDeviceData) isGetDeviceDataResponse_Resource() {}

func (*GetDeviceDataResponse_AttachedDeviceData) isGetDeviceDataResponse_Resource() {}

func (*GetDeviceDataResponse_BrowserDeviceData) isGetDeviceDataResponse_Resource() {}

// Next Tag: 4
type AttachedDeviceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabConfig *models.MachineLSE `protobuf:"bytes,1,opt,name=lab_config,json=labConfig,proto3" json:"lab_config,omitempty"`
	Machine   *models.Machine    `protobuf:"bytes,2,opt,name=machine,proto3" json:"machine,omitempty"`
	DutState  *lab.DutState      `protobuf:"bytes,3,opt,name=dut_state,json=dutState,proto3" json:"dut_state,omitempty"`
}

func (x *AttachedDeviceData) Reset() {
	*x = AttachedDeviceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachedDeviceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachedDeviceData) ProtoMessage() {}

func (x *AttachedDeviceData) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachedDeviceData.ProtoReflect.Descriptor instead.
func (*AttachedDeviceData) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{175}
}

func (x *AttachedDeviceData) GetLabConfig() *models.MachineLSE {
	if x != nil {
		return x.LabConfig
	}
	return nil
}

func (x *AttachedDeviceData) GetMachine() *models.Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

func (x *AttachedDeviceData) GetDutState() *lab.DutState {
	if x != nil {
		return x.DutState
	}
	return nil
}

// Next Tag: 2
type BrowserDeviceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host *models.MachineLSE `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Vm   *models.VM         `protobuf:"bytes,2,opt,name=vm,proto3" json:"vm,omitempty"`
}

func (x *BrowserDeviceData) Reset() {
	*x = BrowserDeviceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserDeviceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserDeviceData) ProtoMessage() {}

func (x *BrowserDeviceData) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserDeviceData.ProtoReflect.Descriptor instead.
func (*BrowserDeviceData) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{176}
}

func (x *BrowserDeviceData) GetHost() *models.MachineLSE {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *BrowserDeviceData) GetVm() *models.VM {
	if x != nil {
		return x.Vm
	}
	return nil
}

type CheckFleetTestsPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Test parameters to validate to see if the test is a valid test.
	TestName string `protobuf:"bytes,1,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	Board    string `protobuf:"bytes,2,opt,name=board,proto3" json:"board,omitempty"`
	Model    string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	Image    string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *CheckFleetTestsPolicyRequest) Reset() {
	*x = CheckFleetTestsPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckFleetTestsPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFleetTestsPolicyRequest) ProtoMessage() {}

func (x *CheckFleetTestsPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFleetTestsPolicyRequest.ProtoReflect.Descriptor instead.
func (*CheckFleetTestsPolicyRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{177}
}

func (x *CheckFleetTestsPolicyRequest) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *CheckFleetTestsPolicyRequest) GetBoard() string {
	if x != nil {
		return x.Board
	}
	return ""
}

func (x *CheckFleetTestsPolicyRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CheckFleetTestsPolicyRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type TestStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TestStatus Code will provide information about the validity or invalidity of the test
	Code TestStatus_Code `protobuf:"varint,1,opt,name=code,proto3,enum=unifiedfleet.api.v1.rpc.TestStatus_Code" json:"code,omitempty"`
	// message contains a description of the Status
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TestStatus) Reset() {
	*x = TestStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStatus) ProtoMessage() {}

func (x *TestStatus) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestStatus.ProtoReflect.Descriptor instead.
func (*TestStatus) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{178}
}

func (x *TestStatus) GetCode() TestStatus_Code {
	if x != nil {
		return x.Code
	}
	return TestStatus_UNSPECIFIED
}

func (x *TestStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CheckFleetTestsPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether the test parameters are valid for a test.
	//
	// Deprecated: Do not use.
	IsTestValid bool `protobuf:"varint,1,opt,name=is_test_valid,json=isTestValid,proto3" json:"is_test_valid,omitempty"`
	// Status of the test with a code and an optional message
	TestStatus *TestStatus `protobuf:"bytes,2,opt,name=testStatus,proto3" json:"testStatus,omitempty"`
}

func (x *CheckFleetTestsPolicyResponse) Reset() {
	*x = CheckFleetTestsPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckFleetTestsPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFleetTestsPolicyResponse) ProtoMessage() {}

func (x *CheckFleetTestsPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFleetTestsPolicyResponse.ProtoReflect.Descriptor instead.
func (*CheckFleetTestsPolicyResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{179}
}

// Deprecated: Do not use.
func (x *CheckFleetTestsPolicyResponse) GetIsTestValid() bool {
	if x != nil {
		return x.IsTestValid
	}
	return false
}

func (x *CheckFleetTestsPolicyResponse) GetTestStatus() *TestStatus {
	if x != nil {
		return x.TestStatus
	}
	return nil
}

type UpdateDeviceRecoveryDataRequest_DutData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	HwID         string `protobuf:"bytes,2,opt,name=hwID,proto3" json:"hwID,omitempty"`
	DeviceSku    string `protobuf:"bytes,3,opt,name=device_sku,json=deviceSku,proto3" json:"device_sku,omitempty"`
}

func (x *UpdateDeviceRecoveryDataRequest_DutData) Reset() {
	*x = UpdateDeviceRecoveryDataRequest_DutData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRecoveryDataRequest_DutData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRecoveryDataRequest_DutData) ProtoMessage() {}

func (x *UpdateDeviceRecoveryDataRequest_DutData) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRecoveryDataRequest_DutData.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRecoveryDataRequest_DutData) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{119, 0}
}

func (x *UpdateDeviceRecoveryDataRequest_DutData) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *UpdateDeviceRecoveryDataRequest_DutData) GetHwID() string {
	if x != nil {
		return x.HwID
	}
	return ""
}

func (x *UpdateDeviceRecoveryDataRequest_DutData) GetDeviceSku() string {
	if x != nil {
		return x.DeviceSku
	}
	return ""
}

type UpdateDeviceRecoveryDataRequest_WifiRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string              `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	State    lab.PeripheralState `protobuf:"varint,2,opt,name=state,proto3,enum=unifiedfleet.api.v1.models.chromeos.lab.PeripheralState" json:"state,omitempty"`
}

func (x *UpdateDeviceRecoveryDataRequest_WifiRouter) Reset() {
	*x = UpdateDeviceRecoveryDataRequest_WifiRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRecoveryDataRequest_WifiRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRecoveryDataRequest_WifiRouter) ProtoMessage() {}

func (x *UpdateDeviceRecoveryDataRequest_WifiRouter) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRecoveryDataRequest_WifiRouter.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRecoveryDataRequest_WifiRouter) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{119, 1}
}

func (x *UpdateDeviceRecoveryDataRequest_WifiRouter) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *UpdateDeviceRecoveryDataRequest_WifiRouter) GetState() lab.PeripheralState {
	if x != nil {
		return x.State
	}
	return lab.PeripheralState(0)
}

type UpdateDeviceRecoveryDataRequest_BluetoothPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string              `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	State    lab.PeripheralState `protobuf:"varint,2,opt,name=state,proto3,enum=unifiedfleet.api.v1.models.chromeos.lab.PeripheralState" json:"state,omitempty"`
}

func (x *UpdateDeviceRecoveryDataRequest_BluetoothPeer) Reset() {
	*x = UpdateDeviceRecoveryDataRequest_BluetoothPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRecoveryDataRequest_BluetoothPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRecoveryDataRequest_BluetoothPeer) ProtoMessage() {}

func (x *UpdateDeviceRecoveryDataRequest_BluetoothPeer) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRecoveryDataRequest_BluetoothPeer.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRecoveryDataRequest_BluetoothPeer) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{119, 2}
}

func (x *UpdateDeviceRecoveryDataRequest_BluetoothPeer) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *UpdateDeviceRecoveryDataRequest_BluetoothPeer) GetState() lab.PeripheralState {
	if x != nil {
		return x.State
	}
	return lab.PeripheralState(0)
}

type UpdateDeviceRecoveryDataRequest_LabData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServoType      string                                           `protobuf:"bytes,1,opt,name=servo_type,json=servoType,proto3" json:"servo_type,omitempty"`
	SmartUsbhub    bool                                             `protobuf:"varint,2,opt,name=smart_usbhub,json=smartUsbhub,proto3" json:"smart_usbhub,omitempty"`
	ServoTopology  *lab.ServoTopology                               `protobuf:"bytes,3,opt,name=servo_topology,json=servoTopology,proto3" json:"servo_topology,omitempty"`
	ServoComponent string                                           `protobuf:"bytes,4,opt,name=servo_component,json=servoComponent,proto3" json:"servo_component,omitempty"`
	WifiRouters    []*UpdateDeviceRecoveryDataRequest_WifiRouter    `protobuf:"bytes,5,rep,name=wifi_routers,json=wifiRouters,proto3" json:"wifi_routers,omitempty"`
	BlueoothPeers  []*UpdateDeviceRecoveryDataRequest_BluetoothPeer `protobuf:"bytes,6,rep,name=blueooth_peers,json=blueoothPeers,proto3" json:"blueooth_peers,omitempty"`
}

func (x *UpdateDeviceRecoveryDataRequest_LabData) Reset() {
	*x = UpdateDeviceRecoveryDataRequest_LabData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRecoveryDataRequest_LabData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRecoveryDataRequest_LabData) ProtoMessage() {}

func (x *UpdateDeviceRecoveryDataRequest_LabData) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRecoveryDataRequest_LabData.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRecoveryDataRequest_LabData) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{119, 3}
}

func (x *UpdateDeviceRecoveryDataRequest_LabData) GetServoType() string {
	if x != nil {
		return x.ServoType
	}
	return ""
}

func (x *UpdateDeviceRecoveryDataRequest_LabData) GetSmartUsbhub() bool {
	if x != nil {
		return x.SmartUsbhub
	}
	return false
}

func (x *UpdateDeviceRecoveryDataRequest_LabData) GetServoTopology() *lab.ServoTopology {
	if x != nil {
		return x.ServoTopology
	}
	return nil
}

func (x *UpdateDeviceRecoveryDataRequest_LabData) GetServoComponent() string {
	if x != nil {
		return x.ServoComponent
	}
	return ""
}

func (x *UpdateDeviceRecoveryDataRequest_LabData) GetWifiRouters() []*UpdateDeviceRecoveryDataRequest_WifiRouter {
	if x != nil {
		return x.WifiRouters
	}
	return nil
}

func (x *UpdateDeviceRecoveryDataRequest_LabData) GetBlueoothPeers() []*UpdateDeviceRecoveryDataRequest_BluetoothPeer {
	if x != nil {
		return x.BlueoothPeers
	}
	return nil
}

var File_infra_unifiedfleet_api_v1_rpc_fleet_proto protoreflect.FileDescriptor

var file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDesc = []byte{
	0x0a, 0x29, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x70, 0x63, 0x2f,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6c,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6c,
	0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2c, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x2f,
	0x64, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x39, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xcd, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x16, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x6c, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x14,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x73, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x9d, 0x01, 0x0a, 0x26, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53,
	0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x22, 0x93, 0x01, 0x0a, 0x27, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x17, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x15, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x73, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x37, 0x0a,
	0x35, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x24,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c,
	0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x25, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x17,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x15, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x73, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xb5, 0x01, 0x0a, 0x21,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x68, 0x0a, 0x17, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x73, 0x65,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x73, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x02, 0x76, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x56, 0x4d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x76, 0x6d, 0x12, 0x4d, 0x0a, 0x0e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x52, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x5f, 0x69, 0x64,
	0x22, 0xf4, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x02, 0x76, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x4d,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x76, 0x6d, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x4d, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x05, 0x10,
	0x06, 0x52, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x5f, 0x69, 0x64,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x56, 0x4d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x25, 0x0a, 0x23, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x56, 0x4d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x25, 0x0a, 0x23, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x4d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0x6b, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x76, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x4d, 0x52,
	0x03, 0x76, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x37, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x67, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x31, 0x0a, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0f,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6a, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x31, 0x0a, 0x2f, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x1c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x44, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x1d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x45, 0x0a,
	0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x22, 0x7b, 0x0a, 0x14, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x22, 0xc9, 0x01, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x53, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a,
	0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x62, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x87, 0x01,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xc1, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a,
	0x16, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x13, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x71,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x50, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x36, 0x0a, 0x34, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c,
	0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x91, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xaf, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x14, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x14, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x74, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x36, 0x0a, 0x34, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaf, 0x01,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5d, 0x0a, 0x10, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x72, 0x61,
	0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x13, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x61, 0x63,
	0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22,
	0xbb, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53,
	0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5d, 0x0a, 0x10, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10,
	0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x6b, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x33, 0x0a, 0x31, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a,
	0x11, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x11, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x6e, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c,
	0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x39, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x33, 0x0a, 0x31, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x63, 0x6b, 0x4c,
	0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x60, 0x0a, 0x1a, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x59, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x66, 0x75, 0x6c, 0x6c, 0x22, 0x7f, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5c, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a,
	0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x62, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa9, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x25, 0x0a, 0x0f, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x22, 0x5b, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x67, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61,
	0x63, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04,
	0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52,
	0x61, 0x63, 0x6b, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75,
	0x6c, 0x6c, 0x22, 0x73, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x56, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xea, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x49, 0x64, 0x12, 0x4d, 0x0a,
	0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x9b, 0x03, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53,
	0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x6d, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x69, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x53, 0x45, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x62, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb2, 0x01, 0x0a,
	0x17, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53,
	0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2d, 0x0a, 0x2b,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x4e, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xca, 0x01, 0x0a, 0x18, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x62,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xcc,
	0x01, 0x0a, 0x1a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x53, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a,
	0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x62, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x79, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x63,
	0x6b, 0x4c, 0x53, 0x45, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x72, 0x61,
	0x63, 0x6b, 0x4c, 0x53, 0x45, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x59, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x7f, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63,
	0x6b, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x08, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61, 0x63,
	0x6b, 0x4c, 0x53, 0x45, 0x52, 0x08, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5c, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x6e, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x4e, 0x69, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6e, 0x69, 0x63,
	0x12, 0x15, 0x0a, 0x06, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x52, 0x07, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x6e,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4e, 0x69, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03,
	0x6e, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22,
	0x51, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x69, 0x63, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x6f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4e, 0x69, 0x63, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x54, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x26, 0x0a, 0x24, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x69, 0x63, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc3, 0x01,
	0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64,
	0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x44, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4e, 0x69, 0x63, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x6e, 0x65,
	0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x69, 0x63, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x29, 0x0a, 0x27, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xca, 0x01, 0x0a,
	0x18, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x6d, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4b, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x03, 0x4b, 0x56, 0x4d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4b, 0x56, 0x4d, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x03, 0x4b, 0x56, 0x4d, 0x12, 0x15, 0x0a, 0x06, 0x4b, 0x56, 0x4d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4b, 0x56, 0x4d, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x22, 0xe2, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x03, 0x4b, 0x56, 0x4d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4b, 0x56, 0x4d, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x03, 0x4b, 0x56, 0x4d, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x4d, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x51, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x4b, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x56, 0x4d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x81, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73,
	0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73,
	0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x6f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x56, 0x4d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x4b, 0x56, 0x4d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x4b, 0x56, 0x4d, 0x52, 0x04, 0x4b, 0x56, 0x4d, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x54, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b,
	0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a,
	0x24, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4b, 0x56, 0x4d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x50, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x03, 0x52, 0x50, 0x4d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x50, 0x4d, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x03, 0x52, 0x50, 0x4d, 0x12, 0x15, 0x0a, 0x06, 0x52, 0x50, 0x4d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x50, 0x4d, 0x49, 0x64, 0x22, 0xd6,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x50, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x52, 0x50, 0x4d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x50,
	0x4d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x52, 0x50, 0x4d, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x4d, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x50,
	0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x52, 0x50, 0x4d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x50, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x6f,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x50, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x52, 0x50, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x50,
	0x4d, 0x52, 0x04, 0x52, 0x50, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x54, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x50, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x50, 0x4d, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x72, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x64,
	0x72, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x72, 0x61, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x64, 0x72, 0x61, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x61, 0x63, 0x49, 0x64, 0x12,
	0x4d, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0xe9, 0x01,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x72, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44,
	0x72, 0x61, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x72, 0x61, 0x63, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x4d, 0x0a, 0x0e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x44, 0x72, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x72, 0x61, 0x63, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x82,
	0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f,
	0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f,
	0x6e, 0x6c, 0x79, 0x22, 0x73, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x64, 0x72, 0x61, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x72, 0x61, 0x63, 0x52, 0x05, 0x64, 0x72, 0x61, 0x63, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x56, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x72, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x72, 0x61, 0x63, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x7f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x52, 0x04, 0x72, 0x61, 0x63,
	0x6b, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x52, 0x04, 0x72,
	0x61, 0x63, 0x6b, 0x22, 0x57, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73,
	0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73,
	0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x7e, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x29, 0x0a, 0x27, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x67, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56,
	0x6c, 0x61, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x73,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x56, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x56, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x12,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44,
	0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x44, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x53, 0x56,
	0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x62, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x13,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64,
	0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x44, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x6f, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x86, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x64, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61,
	0x62, 0x2e, 0x44, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x64, 0x75, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x95, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xa9, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x53, 0x0a, 0x09, 0x64, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x44, 0x75, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x64, 0x75, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x3e, 0x0a, 0x08, 0x64, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x44, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x07, 0x64, 0x75, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x3e, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x4c, 0x61, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x4d, 0x65, 0x74,
	0x61, 0x22, 0xd5, 0x09, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f,
	0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x64, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62,
	0x2e, 0x44, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x64, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x08, 0x64, 0x75, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x64, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4c, 0x61, 0x62, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x61, 0x0a, 0x07, 0x44, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x77, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x77, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x6b, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x6b, 0x75, 0x1a, 0x78, 0x0a, 0x0a, 0x57, 0x69, 0x66, 0x69, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x7b, 0x0a, 0x0d, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f,
	0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xaa, 0x03, 0x0a,
	0x07, 0x4c, 0x61, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x5f, 0x75, 0x73, 0x62, 0x68, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x55, 0x73, 0x62, 0x68, 0x75, 0x62, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x6f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x6f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x66, 0x0a, 0x0c, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x77,
	0x69, 0x66, 0x69, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6d, 0x0a, 0x0e, 0x62, 0x6c,
	0x75, 0x65, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x46, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x6c, 0x75,
	0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0d, 0x62, 0x6c, 0x75, 0x65,
	0x6f, 0x6f, 0x74, 0x68, 0x50, 0x65, 0x65, 0x72, 0x73, 0x22, 0x22, 0x0a, 0x20, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a,
	0x17, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x72,
	0x61, 0x63, 0x6b, 0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x6c, 0x61, 0x6e, 0x52,
	0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x3b, 0x0a, 0x03, 0x6e, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x29, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x69, 0x63, 0x52, 0x03, 0x6e,
	0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x52, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x8f,
	0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x55, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x77, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x58, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x28, 0x0a, 0x26, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xa3, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x4b, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x14, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4b, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x4b, 0x56, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4b,
	0x56, 0x4d, 0x52, 0x04, 0x4b, 0x56, 0x4d, 0x73, 0x22, 0x4a, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x44, 0x48, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x4a,
	0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x1b, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x73, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x5b, 0x0a,
	0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x52, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x17, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22,
	0x43, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x50, 0x4d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x52, 0x50, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x72, 0x70, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x50, 0x4d, 0x52, 0x04, 0x72, 0x70, 0x6d,
	0x73, 0x22, 0x44, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x05, 0x64, 0x72, 0x61, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x72, 0x61,
	0x63, 0x52, 0x05, 0x64, 0x72, 0x61, 0x63, 0x73, 0x22, 0x43, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x4b, 0x0a,
	0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x4e, 0x69, 0x63, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x22, 0x42, 0x0a, 0x12, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x47,
	0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x76, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x56, 0x4d, 0x52, 0x03, 0x76, 0x6d, 0x73, 0x22, 0x44, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x4f, 0x0a,
	0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x44,
	0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x05, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x05,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x4e, 0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x1f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0f,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x22,
	0x53, 0x0a, 0x23, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x24, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a,
	0x16, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x14,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x21, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x13,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x11, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x63,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0e, 0x63, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x67, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x31, 0x0a, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x63, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x63,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6a, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x31, 0x0a, 0x2f, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x58, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x0f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x67, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x31, 0x0a, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x9c, 0x01, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6a, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x31, 0x0a, 0x2f,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22,
	0x41, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x22, 0x4f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xbb, 0x05, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x63, 0x0a, 0x15, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x6f,
	0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x73, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x14, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x13, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x48, 0x52, 0x4f, 0x4d, 0x45, 0x4f, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x04, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0xea, 0x01, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3d, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x4e,
	0x0a, 0x09, 0x64, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x44, 0x75, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x7f,
	0x0a, 0x11, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x02, 0x76, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x4d, 0x52, 0x02, 0x76, 0x6d, 0x22,
	0x7d, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xe4,
	0x01, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x10, 0x05, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46,
	0x6c, 0x65, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x43, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x32, 0xde, 0x6c, 0x0a, 0x05, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x12, 0x78,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x34, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x78, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x34, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x72, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x33,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x34, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x62, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x35, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x71, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x53, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x10, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x53, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x87, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53,
	0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x36, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x38, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c,
	0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7e, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53,
	0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7e, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53,
	0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x78, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x33, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63,
	0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x35,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63,
	0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6f, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x63, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x5d, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x2a, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x6b, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x54, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x63, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x66, 0x0a, 0x10,
	0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x52, 0x61, 0x63, 0x6b, 0x12, 0x5a, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x63, 0x6b, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61, 0x63, 0x6b,
	0x12, 0x54, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x12, 0x27, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x12, 0x62, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61,
	0x63, 0x6b, 0x73, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6c, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45,
	0x12, 0x30, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x6c, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x30,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x66, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53,
	0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45,
	0x12, 0x74, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c,
	0x53, 0x45, 0x73, 0x12, 0x2f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x30, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x6c, 0x0a, 0x10, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x30, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c,
	0x53, 0x45, 0x12, 0x5a, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x12, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c,
	0x53, 0x45, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e,
	0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x53, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x73, 0x12, 0x33, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x53, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c,
	0x53, 0x45, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x63,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x12,
	0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x61, 0x63, 0x6b,
	0x4c, 0x53, 0x45, 0x12, 0x63, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63,
	0x6b, 0x4c, 0x53, 0x45, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x12, 0x5d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x12, 0x6b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x73, 0x12, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61,
	0x63, 0x6b, 0x4c, 0x53, 0x45, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x4e, 0x69, 0x63, 0x12, 0x57, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x69, 0x63, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4e, 0x69, 0x63, 0x12, 0x51,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x12, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4e, 0x69,
	0x63, 0x12, 0x5f, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x12, 0x28, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x12,
	0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x69, 0x63, 0x73,
	0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x57, 0x0a, 0x09, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x69, 0x63, 0x12, 0x29, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4e, 0x69, 0x63, 0x12, 0x5a, 0x0a, 0x11, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b,
	0x56, 0x4d, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4b, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4b, 0x56, 0x4d, 0x12, 0x57,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x56, 0x4d, 0x12, 0x29, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x56, 0x4d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x4b, 0x56, 0x4d, 0x12, 0x51, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4b, 0x56,
	0x4d, 0x12, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4b, 0x56, 0x4d, 0x12, 0x5f, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x56, 0x4d, 0x73, 0x12, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x56, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x56, 0x4d, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x50, 0x4d, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x50, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x52, 0x50, 0x4d, 0x12, 0x57, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x50,
	0x4d, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x50, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x50, 0x4d, 0x12, 0x51, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x52, 0x50, 0x4d, 0x12, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x50, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x50, 0x4d,
	0x12, 0x5f, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x50, 0x4d, 0x73, 0x12, 0x28, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x50, 0x4d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x50, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x50, 0x4d, 0x12, 0x29,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x50, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x5a, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x63, 0x12,
	0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x72, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x72, 0x61, 0x63, 0x12, 0x5a, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x63, 0x12, 0x2a, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x72, 0x61, 0x63, 0x12, 0x54, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x44, 0x72, 0x61, 0x63, 0x12, 0x27, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x72, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x72, 0x61, 0x63, 0x12,
	0x62, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x63, 0x73, 0x12, 0x29, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61,
	0x63, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x72, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x60, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x5a, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x6b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x54, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x0c, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x5a, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x5a, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x6c, 0x61, 0x6e, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x12, 0x54, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x27, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x62, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e,
	0x0a, 0x0b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x2b, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6c,
	0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52,
	0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x53, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x12,
	0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x4f, 0x53, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x63, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x5d, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x6d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44,
	0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x44,
	0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6e, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e,
	0x6c, 0x61, 0x62, 0x2e, 0x44, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8f, 0x01, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x48, 0x43,
	0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x4d, 0x12, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x4d, 0x12, 0x54, 0x0a, 0x08,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x12, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x56, 0x4d, 0x12, 0x4c, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x4d, 0x12, 0x28,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x4e, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x12, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x4d,
	0x12, 0x5c, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x73, 0x12, 0x27, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d,
	0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x5d, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x57, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x65, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x5d, 0x0a, 0x0b, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x2b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x6b, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4b, 0x56, 0x4d, 0x73, 0x12,
	0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x4b, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x4b, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a,
	0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x33, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x80, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x12, 0x33, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x30, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x52, 0x50, 0x4d, 0x73, 0x12, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x50, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x50, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6e, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61,
	0x63, 0x73, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6b, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63,
	0x73, 0x12, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68,
	0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x73, 0x12, 0x2b, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x56, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x73, 0x12, 0x37, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x35, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x78, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x34, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x8a, 0x01, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xa4, 0x01, 0x0a, 0x1f, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c,
	0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x84, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53,
	0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x34, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x78, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x34,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x72, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x34, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7d, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x32, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a,
	0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x35, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6c, 0x65,
	0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x25, 0x5a, 0x23, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x70, 0x63, 0x3b, 0x75, 0x66, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescOnce sync.Once
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescData = file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDesc
)

func file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP() []byte {
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescOnce.Do(func() {
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescData)
	})
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescData
}

var file_infra_unifiedfleet_api_v1_rpc_fleet_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes = make([]protoimpl.MessageInfo, 185)
var file_infra_unifiedfleet_api_v1_rpc_fleet_proto_goTypes = []interface{}{
	(GetDeviceDataResponse_ResourceType)(0),               // 0: unifiedfleet.api.v1.rpc.GetDeviceDataResponse.ResourceType
	(TestStatus_Code)(0),                                  // 1: unifiedfleet.api.v1.rpc.TestStatus.Code
	(*UpdateMachineLSEDeploymentRequest)(nil),             // 2: unifiedfleet.api.v1.rpc.UpdateMachineLSEDeploymentRequest
	(*BatchUpdateMachineLSEDeploymentRequest)(nil),        // 3: unifiedfleet.api.v1.rpc.BatchUpdateMachineLSEDeploymentRequest
	(*BatchUpdateMachineLSEDeploymentResponse)(nil),       // 4: unifiedfleet.api.v1.rpc.BatchUpdateMachineLSEDeploymentResponse
	(*GetMachineLSEDeploymentRequest)(nil),                // 5: unifiedfleet.api.v1.rpc.GetMachineLSEDeploymentRequest
	(*BatchGetMachineLSEDeploymentsRequest)(nil),          // 6: unifiedfleet.api.v1.rpc.BatchGetMachineLSEDeploymentsRequest
	(*BatchGetMachineLSEDeploymentsResponse)(nil),         // 7: unifiedfleet.api.v1.rpc.BatchGetMachineLSEDeploymentsResponse
	(*ListMachineLSEDeploymentsRequest)(nil),              // 8: unifiedfleet.api.v1.rpc.ListMachineLSEDeploymentsRequest
	(*ListMachineLSEDeploymentsResponse)(nil),             // 9: unifiedfleet.api.v1.rpc.ListMachineLSEDeploymentsResponse
	(*CreateVMRequest)(nil),                               // 10: unifiedfleet.api.v1.rpc.CreateVMRequest
	(*UpdateVMRequest)(nil),                               // 11: unifiedfleet.api.v1.rpc.UpdateVMRequest
	(*GetVMRequest)(nil),                                  // 12: unifiedfleet.api.v1.rpc.GetVMRequest
	(*DeleteVMRequest)(nil),                               // 13: unifiedfleet.api.v1.rpc.DeleteVMRequest
	(*ListVMsRequest)(nil),                                // 14: unifiedfleet.api.v1.rpc.ListVMsRequest
	(*ListVMsResponse)(nil),                               // 15: unifiedfleet.api.v1.rpc.ListVMsResponse
	(*GetDHCPConfigRequest)(nil),                          // 16: unifiedfleet.api.v1.rpc.GetDHCPConfigRequest
	(*CreateChromePlatformRequest)(nil),                   // 17: unifiedfleet.api.v1.rpc.CreateChromePlatformRequest
	(*UpdateChromePlatformRequest)(nil),                   // 18: unifiedfleet.api.v1.rpc.UpdateChromePlatformRequest
	(*GetChromePlatformRequest)(nil),                      // 19: unifiedfleet.api.v1.rpc.GetChromePlatformRequest
	(*ListChromePlatformsRequest)(nil),                    // 20: unifiedfleet.api.v1.rpc.ListChromePlatformsRequest
	(*ListChromePlatformsResponse)(nil),                   // 21: unifiedfleet.api.v1.rpc.ListChromePlatformsResponse
	(*DeleteChromePlatformRequest)(nil),                   // 22: unifiedfleet.api.v1.rpc.DeleteChromePlatformRequest
	(*ImportChromePlatformsRequest)(nil),                  // 23: unifiedfleet.api.v1.rpc.ImportChromePlatformsRequest
	(*ImportChromePlatformsResponse)(nil),                 // 24: unifiedfleet.api.v1.rpc.ImportChromePlatformsResponse
	(*ChromePlatformResult)(nil),                          // 25: unifiedfleet.api.v1.rpc.ChromePlatformResult
	(*ImportOSVersionsRequest)(nil),                       // 26: unifiedfleet.api.v1.rpc.ImportOSVersionsRequest
	(*ListOSVersionsRequest)(nil),                         // 27: unifiedfleet.api.v1.rpc.ListOSVersionsRequest
	(*ListOSVersionsResponse)(nil),                        // 28: unifiedfleet.api.v1.rpc.ListOSVersionsResponse
	(*CreateMachineLSEPrototypeRequest)(nil),              // 29: unifiedfleet.api.v1.rpc.CreateMachineLSEPrototypeRequest
	(*UpdateMachineLSEPrototypeRequest)(nil),              // 30: unifiedfleet.api.v1.rpc.UpdateMachineLSEPrototypeRequest
	(*GetMachineLSEPrototypeRequest)(nil),                 // 31: unifiedfleet.api.v1.rpc.GetMachineLSEPrototypeRequest
	(*ListMachineLSEPrototypesRequest)(nil),               // 32: unifiedfleet.api.v1.rpc.ListMachineLSEPrototypesRequest
	(*ListMachineLSEPrototypesResponse)(nil),              // 33: unifiedfleet.api.v1.rpc.ListMachineLSEPrototypesResponse
	(*DeleteMachineLSEPrototypeRequest)(nil),              // 34: unifiedfleet.api.v1.rpc.DeleteMachineLSEPrototypeRequest
	(*CreateRackLSEPrototypeRequest)(nil),                 // 35: unifiedfleet.api.v1.rpc.CreateRackLSEPrototypeRequest
	(*UpdateRackLSEPrototypeRequest)(nil),                 // 36: unifiedfleet.api.v1.rpc.UpdateRackLSEPrototypeRequest
	(*GetRackLSEPrototypeRequest)(nil),                    // 37: unifiedfleet.api.v1.rpc.GetRackLSEPrototypeRequest
	(*ListRackLSEPrototypesRequest)(nil),                  // 38: unifiedfleet.api.v1.rpc.ListRackLSEPrototypesRequest
	(*ListRackLSEPrototypesResponse)(nil),                 // 39: unifiedfleet.api.v1.rpc.ListRackLSEPrototypesResponse
	(*DeleteRackLSEPrototypeRequest)(nil),                 // 40: unifiedfleet.api.v1.rpc.DeleteRackLSEPrototypeRequest
	(*MachineRegistrationRequest)(nil),                    // 41: unifiedfleet.api.v1.rpc.MachineRegistrationRequest
	(*UpdateMachineRequest)(nil),                          // 42: unifiedfleet.api.v1.rpc.UpdateMachineRequest
	(*GetMachineRequest)(nil),                             // 43: unifiedfleet.api.v1.rpc.GetMachineRequest
	(*ListMachinesRequest)(nil),                           // 44: unifiedfleet.api.v1.rpc.ListMachinesRequest
	(*ListMachinesResponse)(nil),                          // 45: unifiedfleet.api.v1.rpc.ListMachinesResponse
	(*DeleteMachineRequest)(nil),                          // 46: unifiedfleet.api.v1.rpc.DeleteMachineRequest
	(*ImportMachinesRequest)(nil),                         // 47: unifiedfleet.api.v1.rpc.ImportMachinesRequest
	(*RenameMachineRequest)(nil),                          // 48: unifiedfleet.api.v1.rpc.RenameMachineRequest
	(*MachineDBSource)(nil),                               // 49: unifiedfleet.api.v1.rpc.MachineDBSource
	(*ConfigSource)(nil),                                  // 50: unifiedfleet.api.v1.rpc.ConfigSource
	(*CreateRackRequest)(nil),                             // 51: unifiedfleet.api.v1.rpc.CreateRackRequest
	(*UpdateRackRequest)(nil),                             // 52: unifiedfleet.api.v1.rpc.UpdateRackRequest
	(*GetRackRequest)(nil),                                // 53: unifiedfleet.api.v1.rpc.GetRackRequest
	(*ListRacksRequest)(nil),                              // 54: unifiedfleet.api.v1.rpc.ListRacksRequest
	(*ListRacksResponse)(nil),                             // 55: unifiedfleet.api.v1.rpc.ListRacksResponse
	(*DeleteRackRequest)(nil),                             // 56: unifiedfleet.api.v1.rpc.DeleteRackRequest
	(*CreateMachineLSERequest)(nil),                       // 57: unifiedfleet.api.v1.rpc.CreateMachineLSERequest
	(*UpdateMachineLSERequest)(nil),                       // 58: unifiedfleet.api.v1.rpc.UpdateMachineLSERequest
	(*GetMachineLSERequest)(nil),                          // 59: unifiedfleet.api.v1.rpc.GetMachineLSERequest
	(*ListMachineLSEsRequest)(nil),                        // 60: unifiedfleet.api.v1.rpc.ListMachineLSEsRequest
	(*ListMachineLSEsResponse)(nil),                       // 61: unifiedfleet.api.v1.rpc.ListMachineLSEsResponse
	(*DeleteMachineLSERequest)(nil),                       // 62: unifiedfleet.api.v1.rpc.DeleteMachineLSERequest
	(*RenameMachineLSERequest)(nil),                       // 63: unifiedfleet.api.v1.rpc.RenameMachineLSERequest
	(*ImportMachineLSEsRequest)(nil),                      // 64: unifiedfleet.api.v1.rpc.ImportMachineLSEsRequest
	(*ImportOSMachineLSEsRequest)(nil),                    // 65: unifiedfleet.api.v1.rpc.ImportOSMachineLSEsRequest
	(*CreateRackLSERequest)(nil),                          // 66: unifiedfleet.api.v1.rpc.CreateRackLSERequest
	(*UpdateRackLSERequest)(nil),                          // 67: unifiedfleet.api.v1.rpc.UpdateRackLSERequest
	(*GetRackLSERequest)(nil),                             // 68: unifiedfleet.api.v1.rpc.GetRackLSERequest
	(*ListRackLSEsRequest)(nil),                           // 69: unifiedfleet.api.v1.rpc.ListRackLSEsRequest
	(*ListRackLSEsResponse)(nil),                          // 70: unifiedfleet.api.v1.rpc.ListRackLSEsResponse
	(*DeleteRackLSERequest)(nil),                          // 71: unifiedfleet.api.v1.rpc.DeleteRackLSERequest
	(*CreateNicRequest)(nil),                              // 72: unifiedfleet.api.v1.rpc.CreateNicRequest
	(*UpdateNicRequest)(nil),                              // 73: unifiedfleet.api.v1.rpc.UpdateNicRequest
	(*GetNicRequest)(nil),                                 // 74: unifiedfleet.api.v1.rpc.GetNicRequest
	(*ListNicsRequest)(nil),                               // 75: unifiedfleet.api.v1.rpc.ListNicsRequest
	(*ListNicsResponse)(nil),                              // 76: unifiedfleet.api.v1.rpc.ListNicsResponse
	(*DeleteNicRequest)(nil),                              // 77: unifiedfleet.api.v1.rpc.DeleteNicRequest
	(*ImportNicsRequest)(nil),                             // 78: unifiedfleet.api.v1.rpc.ImportNicsRequest
	(*RenameNicRequest)(nil),                              // 79: unifiedfleet.api.v1.rpc.RenameNicRequest
	(*RenameSwitchRequest)(nil),                           // 80: unifiedfleet.api.v1.rpc.RenameSwitchRequest
	(*ImportDatacentersRequest)(nil),                      // 81: unifiedfleet.api.v1.rpc.ImportDatacentersRequest
	(*CreateKVMRequest)(nil),                              // 82: unifiedfleet.api.v1.rpc.CreateKVMRequest
	(*UpdateKVMRequest)(nil),                              // 83: unifiedfleet.api.v1.rpc.UpdateKVMRequest
	(*GetKVMRequest)(nil),                                 // 84: unifiedfleet.api.v1.rpc.GetKVMRequest
	(*ListKVMsRequest)(nil),                               // 85: unifiedfleet.api.v1.rpc.ListKVMsRequest
	(*ListKVMsResponse)(nil),                              // 86: unifiedfleet.api.v1.rpc.ListKVMsResponse
	(*DeleteKVMRequest)(nil),                              // 87: unifiedfleet.api.v1.rpc.DeleteKVMRequest
	(*CreateRPMRequest)(nil),                              // 88: unifiedfleet.api.v1.rpc.CreateRPMRequest
	(*UpdateRPMRequest)(nil),                              // 89: unifiedfleet.api.v1.rpc.UpdateRPMRequest
	(*GetRPMRequest)(nil),                                 // 90: unifiedfleet.api.v1.rpc.GetRPMRequest
	(*ListRPMsRequest)(nil),                               // 91: unifiedfleet.api.v1.rpc.ListRPMsRequest
	(*ListRPMsResponse)(nil),                              // 92: unifiedfleet.api.v1.rpc.ListRPMsResponse
	(*DeleteRPMRequest)(nil),                              // 93: unifiedfleet.api.v1.rpc.DeleteRPMRequest
	(*CreateDracRequest)(nil),                             // 94: unifiedfleet.api.v1.rpc.CreateDracRequest
	(*UpdateDracRequest)(nil),                             // 95: unifiedfleet.api.v1.rpc.UpdateDracRequest
	(*GetDracRequest)(nil),                                // 96: unifiedfleet.api.v1.rpc.GetDracRequest
	(*ListDracsRequest)(nil),                              // 97: unifiedfleet.api.v1.rpc.ListDracsRequest
	(*ListDracsResponse)(nil),                             // 98: unifiedfleet.api.v1.rpc.ListDracsResponse
	(*DeleteDracRequest)(nil),                             // 99: unifiedfleet.api.v1.rpc.DeleteDracRequest
	(*CreateSwitchRequest)(nil),                           // 100: unifiedfleet.api.v1.rpc.CreateSwitchRequest
	(*UpdateSwitchRequest)(nil),                           // 101: unifiedfleet.api.v1.rpc.UpdateSwitchRequest
	(*GetSwitchRequest)(nil),                              // 102: unifiedfleet.api.v1.rpc.GetSwitchRequest
	(*ListSwitchesRequest)(nil),                           // 103: unifiedfleet.api.v1.rpc.ListSwitchesRequest
	(*ListSwitchesResponse)(nil),                          // 104: unifiedfleet.api.v1.rpc.ListSwitchesResponse
	(*DeleteSwitchRequest)(nil),                           // 105: unifiedfleet.api.v1.rpc.DeleteSwitchRequest
	(*CreateVlanRequest)(nil),                             // 106: unifiedfleet.api.v1.rpc.CreateVlanRequest
	(*UpdateVlanRequest)(nil),                             // 107: unifiedfleet.api.v1.rpc.UpdateVlanRequest
	(*GetVlanRequest)(nil),                                // 108: unifiedfleet.api.v1.rpc.GetVlanRequest
	(*ListVlansRequest)(nil),                              // 109: unifiedfleet.api.v1.rpc.ListVlansRequest
	(*ListVlansResponse)(nil),                             // 110: unifiedfleet.api.v1.rpc.ListVlansResponse
	(*DeleteVlanRequest)(nil),                             // 111: unifiedfleet.api.v1.rpc.DeleteVlanRequest
	(*ImportVlansRequest)(nil),                            // 112: unifiedfleet.api.v1.rpc.ImportVlansRequest
	(*ImportOSVlansRequest)(nil),                          // 113: unifiedfleet.api.v1.rpc.ImportOSVlansRequest
	(*ImportStatesRequest)(nil),                           // 114: unifiedfleet.api.v1.rpc.ImportStatesRequest
	(*GetStateRequest)(nil),                               // 115: unifiedfleet.api.v1.rpc.GetStateRequest
	(*GetDutStateRequest)(nil),                            // 116: unifiedfleet.api.v1.rpc.GetDutStateRequest
	(*ListDutStatesRequest)(nil),                          // 117: unifiedfleet.api.v1.rpc.ListDutStatesRequest
	(*ListDutStatesResponse)(nil),                         // 118: unifiedfleet.api.v1.rpc.ListDutStatesResponse
	(*UpdateStateRequest)(nil),                            // 119: unifiedfleet.api.v1.rpc.UpdateStateRequest
	(*UpdateDutStateRequest)(nil),                         // 120: unifiedfleet.api.v1.rpc.UpdateDutStateRequest
	(*UpdateDeviceRecoveryDataRequest)(nil),               // 121: unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest
	(*UpdateDeviceRecoveryDataResponse)(nil),              // 122: unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataResponse
	(*RackRegistrationRequest)(nil),                       // 123: unifiedfleet.api.v1.rpc.RackRegistrationRequest
	(*NetworkOption)(nil),                                 // 124: unifiedfleet.api.v1.rpc.NetworkOption
	(*CreateAssetRequest)(nil),                            // 125: unifiedfleet.api.v1.rpc.CreateAssetRequest
	(*UpdateAssetRequest)(nil),                            // 126: unifiedfleet.api.v1.rpc.UpdateAssetRequest
	(*GetAssetRequest)(nil),                               // 127: unifiedfleet.api.v1.rpc.GetAssetRequest
	(*ListAssetsRequest)(nil),                             // 128: unifiedfleet.api.v1.rpc.ListAssetsRequest
	(*ListAssetsResponse)(nil),                            // 129: unifiedfleet.api.v1.rpc.ListAssetsResponse
	(*DeleteAssetRequest)(nil),                            // 130: unifiedfleet.api.v1.rpc.DeleteAssetRequest
	(*RenameAssetRequest)(nil),                            // 131: unifiedfleet.api.v1.rpc.RenameAssetRequest
	(*BatchGetKVMsRequest)(nil),                           // 132: unifiedfleet.api.v1.rpc.BatchGetKVMsRequest
	(*BatchGetKVMsResponse)(nil),                          // 133: unifiedfleet.api.v1.rpc.BatchGetKVMsResponse
	(*BatchGetDHCPConfigsRequest)(nil),                    // 134: unifiedfleet.api.v1.rpc.BatchGetDHCPConfigsRequest
	(*BatchGetDHCPConfigsResponse)(nil),                   // 135: unifiedfleet.api.v1.rpc.BatchGetDHCPConfigsResponse
	(*BatchGetMachineLSEsRequest)(nil),                    // 136: unifiedfleet.api.v1.rpc.BatchGetMachineLSEsRequest
	(*BatchGetMachineLSEsResponse)(nil),                   // 137: unifiedfleet.api.v1.rpc.BatchGetMachineLSEsResponse
	(*BatchGetMachinesRequest)(nil),                       // 138: unifiedfleet.api.v1.rpc.BatchGetMachinesRequest
	(*BatchGetMachinesResponse)(nil),                      // 139: unifiedfleet.api.v1.rpc.BatchGetMachinesResponse
	(*BatchGetSwitchesRequest)(nil),                       // 140: unifiedfleet.api.v1.rpc.BatchGetSwitchesRequest
	(*BatchGetSwitchesResponse)(nil),                      // 141: unifiedfleet.api.v1.rpc.BatchGetSwitchesResponse
	(*BatchGetRPMsRequest)(nil),                           // 142: unifiedfleet.api.v1.rpc.BatchGetRPMsRequest
	(*BatchGetRPMsResponse)(nil),                          // 143: unifiedfleet.api.v1.rpc.BatchGetRPMsResponse
	(*BatchGetDracsRequest)(nil),                          // 144: unifiedfleet.api.v1.rpc.BatchGetDracsRequest
	(*BatchGetDracsResponse)(nil),                         // 145: unifiedfleet.api.v1.rpc.BatchGetDracsResponse
	(*BatchGetNicsRequest)(nil),                           // 146: unifiedfleet.api.v1.rpc.BatchGetNicsRequest
	(*BatchGetNicsResponse)(nil),                          // 147: unifiedfleet.api.v1.rpc.BatchGetNicsResponse
	(*BatchGetVMsRequest)(nil),                            // 148: unifiedfleet.api.v1.rpc.BatchGetVMsRequest
	(*BatchGetVMsResponse)(nil),                           // 149: unifiedfleet.api.v1.rpc.BatchGetVMsResponse
	(*BatchGetVlansRequest)(nil),                          // 150: unifiedfleet.api.v1.rpc.BatchGetVlansRequest
	(*BatchGetVlansResponse)(nil),                         // 151: unifiedfleet.api.v1.rpc.BatchGetVlansResponse
	(*BatchGetRacksRequest)(nil),                          // 152: unifiedfleet.api.v1.rpc.BatchGetRacksRequest
	(*BatchGetRacksResponse)(nil),                         // 153: unifiedfleet.api.v1.rpc.BatchGetRacksResponse
	(*BatchGetChromePlatformsRequest)(nil),                // 154: unifiedfleet.api.v1.rpc.BatchGetChromePlatformsRequest
	(*BatchGetChromePlatformsResponse)(nil),               // 155: unifiedfleet.api.v1.rpc.BatchGetChromePlatformsResponse
	(*BatchGetMachineLSEPrototypesRequest)(nil),           // 156: unifiedfleet.api.v1.rpc.BatchGetMachineLSEPrototypesRequest
	(*BatchGetMachineLSEPrototypesResponse)(nil),          // 157: unifiedfleet.api.v1.rpc.BatchGetMachineLSEPrototypesResponse
	(*BatchGetRackLSEPrototypesRequest)(nil),              // 158: unifiedfleet.api.v1.rpc.BatchGetRackLSEPrototypesRequest
	(*BatchGetRackLSEPrototypesResponse)(nil),             // 159: unifiedfleet.api.v1.rpc.BatchGetRackLSEPrototypesResponse
	(*GetChromeOSDeviceDataRequest)(nil),                  // 160: unifiedfleet.api.v1.rpc.GetChromeOSDeviceDataRequest
	(*CreateCachingServiceRequest)(nil),                   // 161: unifiedfleet.api.v1.rpc.CreateCachingServiceRequest
	(*UpdateCachingServiceRequest)(nil),                   // 162: unifiedfleet.api.v1.rpc.UpdateCachingServiceRequest
	(*GetCachingServiceRequest)(nil),                      // 163: unifiedfleet.api.v1.rpc.GetCachingServiceRequest
	(*ListCachingServicesRequest)(nil),                    // 164: unifiedfleet.api.v1.rpc.ListCachingServicesRequest
	(*ListCachingServicesResponse)(nil),                   // 165: unifiedfleet.api.v1.rpc.ListCachingServicesResponse
	(*DeleteCachingServiceRequest)(nil),                   // 166: unifiedfleet.api.v1.rpc.DeleteCachingServiceRequest
	(*CreateSchedulingUnitRequest)(nil),                   // 167: unifiedfleet.api.v1.rpc.CreateSchedulingUnitRequest
	(*UpdateSchedulingUnitRequest)(nil),                   // 168: unifiedfleet.api.v1.rpc.UpdateSchedulingUnitRequest
	(*GetSchedulingUnitRequest)(nil),                      // 169: unifiedfleet.api.v1.rpc.GetSchedulingUnitRequest
	(*ListSchedulingUnitsRequest)(nil),                    // 170: unifiedfleet.api.v1.rpc.ListSchedulingUnitsRequest
	(*ListSchedulingUnitsResponse)(nil),                   // 171: unifiedfleet.api.v1.rpc.ListSchedulingUnitsResponse
	(*DeleteSchedulingUnitRequest)(nil),                   // 172: unifiedfleet.api.v1.rpc.DeleteSchedulingUnitRequest
	(*UpdateConfigBundleRequest)(nil),                     // 173: unifiedfleet.api.v1.rpc.UpdateConfigBundleRequest
	(*UpdateConfigBundleResponse)(nil),                    // 174: unifiedfleet.api.v1.rpc.UpdateConfigBundleResponse
	(*GetDeviceDataRequest)(nil),                          // 175: unifiedfleet.api.v1.rpc.GetDeviceDataRequest
	(*GetDeviceDataResponse)(nil),                         // 176: unifiedfleet.api.v1.rpc.GetDeviceDataResponse
	(*AttachedDeviceData)(nil),                            // 177: unifiedfleet.api.v1.rpc.AttachedDeviceData
	(*BrowserDeviceData)(nil),                             // 178: unifiedfleet.api.v1.rpc.BrowserDeviceData
	(*CheckFleetTestsPolicyRequest)(nil),                  // 179: unifiedfleet.api.v1.rpc.CheckFleetTestsPolicyRequest
	(*TestStatus)(nil),                                    // 180: unifiedfleet.api.v1.rpc.TestStatus
	(*CheckFleetTestsPolicyResponse)(nil),                 // 181: unifiedfleet.api.v1.rpc.CheckFleetTestsPolicyResponse
	nil,                                                   // 182: unifiedfleet.api.v1.rpc.UpdateMachineLSERequest.NetworkOptionsEntry
	(*UpdateDeviceRecoveryDataRequest_DutData)(nil),       // 183: unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.DutData
	(*UpdateDeviceRecoveryDataRequest_WifiRouter)(nil),    // 184: unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.WifiRouter
	(*UpdateDeviceRecoveryDataRequest_BluetoothPeer)(nil), // 185: unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.BluetoothPeer
	(*UpdateDeviceRecoveryDataRequest_LabData)(nil),       // 186: unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.LabData
	(*models.MachineLSEDeployment)(nil),                   // 187: unifiedfleet.api.v1.models.MachineLSEDeployment
	(*fieldmaskpb.FieldMask)(nil),                         // 188: google.protobuf.FieldMask
	(*models.VM)(nil),                                     // 189: unifiedfleet.api.v1.models.VM
	(*models.ChromePlatform)(nil),                         // 190: unifiedfleet.api.v1.models.ChromePlatform
	(*models.OSVersion)(nil),                              // 191: unifiedfleet.api.v1.models.OSVersion
	(*models.MachineLSEPrototype)(nil),                    // 192: unifiedfleet.api.v1.models.MachineLSEPrototype
	(*models.RackLSEPrototype)(nil),                       // 193: unifiedfleet.api.v1.models.RackLSEPrototype
	(*models.Machine)(nil),                                // 194: unifiedfleet.api.v1.models.Machine
	(*models.Rack)(nil),                                   // 195: unifiedfleet.api.v1.models.Rack
	(*models.MachineLSE)(nil),                             // 196: unifiedfleet.api.v1.models.MachineLSE
	(*models.RackLSE)(nil),                                // 197: unifiedfleet.api.v1.models.RackLSE
	(*models.Nic)(nil),                                    // 198: unifiedfleet.api.v1.models.Nic
	(*models.KVM)(nil),                                    // 199: unifiedfleet.api.v1.models.KVM
	(*models.RPM)(nil),                                    // 200: unifiedfleet.api.v1.models.RPM
	(*models.Drac)(nil),                                   // 201: unifiedfleet.api.v1.models.Drac
	(*models.Switch)(nil),                                 // 202: unifiedfleet.api.v1.models.Switch
	(*models.Vlan)(nil),                                   // 203: unifiedfleet.api.v1.models.Vlan
	(*lab.DutState)(nil),                                  // 204: unifiedfleet.api.v1.models.chromeos.lab.DutState
	(*models.StateRecord)(nil),                            // 205: unifiedfleet.api.v1.models.StateRecord
	(*models.DutMeta)(nil),                                // 206: unifiedfleet.api.v1.models.DutMeta
	(*models.LabMeta)(nil),                                // 207: unifiedfleet.api.v1.models.LabMeta
	(models.State)(0),                                     // 208: unifiedfleet.api.v1.models.State
	(*models.Asset)(nil),                                  // 209: unifiedfleet.api.v1.models.asset
	(*models.DHCPConfig)(nil),                             // 210: unifiedfleet.api.v1.models.DHCPConfig
	(*models.CachingService)(nil),                         // 211: unifiedfleet.api.v1.models.CachingService
	(*models.SchedulingUnit)(nil),                         // 212: unifiedfleet.api.v1.models.SchedulingUnit
	(*models.ChromeOSDeviceData)(nil),                     // 213: unifiedfleet.api.v1.models.ChromeOSDeviceData
	(lab.PeripheralState)(0),                              // 214: unifiedfleet.api.v1.models.chromeos.lab.PeripheralState
	(*lab.ServoTopology)(nil),                             // 215: unifiedfleet.api.v1.models.chromeos.lab.ServoTopology
	(*emptypb.Empty)(nil),                                 // 216: google.protobuf.Empty
	(*status.Status)(nil),                                 // 217: google.rpc.Status
}
var file_infra_unifiedfleet_api_v1_rpc_fleet_proto_depIdxs = []int32{
	187, // 0: unifiedfleet.api.v1.rpc.UpdateMachineLSEDeploymentRequest.machine_lse_deployment:type_name -> unifiedfleet.api.v1.models.MachineLSEDeployment
	188, // 1: unifiedfleet.api.v1.rpc.UpdateMachineLSEDeploymentRequest.update_mask:type_name -> google.protobuf.FieldMask
	2,   // 2: unifiedfleet.api.v1.rpc.BatchUpdateMachineLSEDeploymentRequest.requests:type_name -> unifiedfleet.api.v1.rpc.UpdateMachineLSEDeploymentRequest
	187, // 3: unifiedfleet.api.v1.rpc.BatchUpdateMachineLSEDeploymentResponse.machine_lse_deployments:type_name -> unifiedfleet.api.v1.models.MachineLSEDeployment
	187, // 4: unifiedfleet.api.v1.rpc.BatchGetMachineLSEDeploymentsResponse.machine_lse_deployments:type_name -> unifiedfleet.api.v1.models.MachineLSEDeployment
	187, // 5: unifiedfleet.api.v1.rpc.ListMachineLSEDeploymentsResponse.machine_lse_deployments:type_name -> unifiedfleet.api.v1.models.MachineLSEDeployment
	189, // 6: unifiedfleet.api.v1.rpc.CreateVMRequest.vm:type_name -> unifiedfleet.api.v1.models.VM
	124, // 7: unifiedfleet.api.v1.rpc.CreateVMRequest.network_option:type_name -> unifiedfleet.api.v1.rpc.NetworkOption
	189, // 8: unifiedfleet.api.v1.rpc.UpdateVMRequest.vm:type_name -> unifiedfleet.api.v1.models.VM
	188, // 9: unifiedfleet.api.v1.rpc.UpdateVMRequest.update_mask:type_name -> google.protobuf.FieldMask
	124, // 10: unifiedfleet.api.v1.rpc.UpdateVMRequest.network_option:type_name -> unifiedfleet.api.v1.rpc.NetworkOption
	189, // 11: unifiedfleet.api.v1.rpc.ListVMsResponse.vms:type_name -> unifiedfleet.api.v1.models.VM
	190, // 12: unifiedfleet.api.v1.rpc.CreateChromePlatformRequest.chromePlatform:type_name -> unifiedfleet.api.v1.models.ChromePlatform
	190, // 13: unifiedfleet.api.v1.rpc.UpdateChromePlatformRequest.chromePlatform:type_name -> unifiedfleet.api.v1.models.ChromePlatform
	188, // 14: unifiedfleet.api.v1.rpc.UpdateChromePlatformRequest.update_mask:type_name -> google.protobuf.FieldMask
	190, // 15: unifiedfleet.api.v1.rpc.ListChromePlatformsResponse.chromePlatforms:type_name -> unifiedfleet.api.v1.models.ChromePlatform
	49,  // 16: unifiedfleet.api.v1.rpc.ImportChromePlatformsRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	50,  // 17: unifiedfleet.api.v1.rpc.ImportChromePlatformsRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	25,  // 18: unifiedfleet.api.v1.rpc.ImportChromePlatformsResponse.passed:type_name -> unifiedfleet.api.v1.rpc.ChromePlatformResult
	25,  // 19: unifiedfleet.api.v1.rpc.ImportChromePlatformsResponse.failed:type_name -> unifiedfleet.api.v1.rpc.ChromePlatformResult
	190, // 20: unifiedfleet.api.v1.rpc.ChromePlatformResult.platform:type_name -> unifiedfleet.api.v1.models.ChromePlatform
	49,  // 21: unifiedfleet.api.v1.rpc.ImportOSVersionsRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	50,  // 22: unifiedfleet.api.v1.rpc.ImportOSVersionsRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	191, // 23: unifiedfleet.api.v1.rpc.ListOSVersionsResponse.os_version:type_name -> unifiedfleet.api.v1.models.OSVersion
	192, // 24: unifiedfleet.api.v1.rpc.CreateMachineLSEPrototypeRequest.machineLSEPrototype:type_name -> unifiedfleet.api.v1.models.MachineLSEPrototype
	192, // 25: unifiedfleet.api.v1.rpc.UpdateMachineLSEPrototypeRequest.machineLSEPrototype:type_name -> unifiedfleet.api.v1.models.MachineLSEPrototype
	188, // 26: unifiedfleet.api.v1.rpc.UpdateMachineLSEPrototypeRequest.update_mask:type_name -> google.protobuf.FieldMask
	192, // 27: unifiedfleet.api.v1.rpc.ListMachineLSEPrototypesResponse.machineLSEPrototypes:type_name -> unifiedfleet.api.v1.models.MachineLSEPrototype
	193, // 28: unifiedfleet.api.v1.rpc.CreateRackLSEPrototypeRequest.rackLSEPrototype:type_name -> unifiedfleet.api.v1.models.RackLSEPrototype
	193, // 29: unifiedfleet.api.v1.rpc.UpdateRackLSEPrototypeRequest.rackLSEPrototype:type_name -> unifiedfleet.api.v1.models.RackLSEPrototype
	188, // 30: unifiedfleet.api.v1.rpc.UpdateRackLSEPrototypeRequest.update_mask:type_name -> google.protobuf.FieldMask
	193, // 31: unifiedfleet.api.v1.rpc.ListRackLSEPrototypesResponse.rackLSEPrototypes:type_name -> unifiedfleet.api.v1.models.RackLSEPrototype
	194, // 32: unifiedfleet.api.v1.rpc.MachineRegistrationRequest.machine:type_name -> unifiedfleet.api.v1.models.Machine
	194, // 33: unifiedfleet.api.v1.rpc.UpdateMachineRequest.machine:type_name -> unifiedfleet.api.v1.models.Machine
	188, // 34: unifiedfleet.api.v1.rpc.UpdateMachineRequest.update_mask:type_name -> google.protobuf.FieldMask
	194, // 35: unifiedfleet.api.v1.rpc.ListMachinesResponse.machines:type_name -> unifiedfleet.api.v1.models.Machine
	49,  // 36: unifiedfleet.api.v1.rpc.ImportMachinesRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	50,  // 37: unifiedfleet.api.v1.rpc.ImportMachinesRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	195, // 38: unifiedfleet.api.v1.rpc.CreateRackRequest.rack:type_name -> unifiedfleet.api.v1.models.Rack
	195, // 39: unifiedfleet.api.v1.rpc.UpdateRackRequest.rack:type_name -> unifiedfleet.api.v1.models.Rack
	188, // 40: unifiedfleet.api.v1.rpc.UpdateRackRequest.update_mask:type_name -> google.protobuf.FieldMask
	195, // 41: unifiedfleet.api.v1.rpc.ListRacksResponse.racks:type_name -> unifiedfleet.api.v1.models.Rack
	196, // 42: unifiedfleet.api.v1.rpc.CreateMachineLSERequest.machineLSE:type_name -> unifiedfleet.api.v1.models.MachineLSE
	124, // 43: unifiedfleet.api.v1.rpc.CreateMachineLSERequest.network_option:type_name -> unifiedfleet.api.v1.rpc.NetworkOption
	196, // 44: unifiedfleet.api.v1.rpc.UpdateMachineLSERequest.machineLSE:type_name -> unifiedfleet.api.v1.models.MachineLSE
	188, // 45: unifiedfleet.api.v1.rpc.UpdateMachineLSERequest.update_mask:type_name -> google.protobuf.FieldMask
	182, // 46: unifiedfleet.api.v1.rpc.UpdateMachineLSERequest.network_options:type_name -> unifiedfleet.api.v1.rpc.UpdateMachineLSERequest.NetworkOptionsEntry
	196, // 47: unifiedfleet.api.v1.rpc.ListMachineLSEsResponse.machineLSEs:type_name -> unifiedfleet.api.v1.models.MachineLSE
	49,  // 48: unifiedfleet.api.v1.rpc.ImportMachineLSEsRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	50,  // 49: unifiedfleet.api.v1.rpc.ImportMachineLSEsRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	49,  // 50: unifiedfleet.api.v1.rpc.ImportOSMachineLSEsRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	50,  // 51: unifiedfleet.api.v1.rpc.ImportOSMachineLSEsRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	197, // 52: unifiedfleet.api.v1.rpc.CreateRackLSERequest.rackLSE:type_name -> unifiedfleet.api.v1.models.RackLSE
	197, // 53: unifiedfleet.api.v1.rpc.UpdateRackLSERequest.rackLSE:type_name -> unifiedfleet.api.v1.models.RackLSE
	188, // 54: unifiedfleet.api.v1.rpc.UpdateRackLSERequest.update_mask:type_name -> google.protobuf.FieldMask
	197, // 55: unifiedfleet.api.v1.rpc.ListRackLSEsResponse.rackLSEs:type_name -> unifiedfleet.api.v1.models.RackLSE
	198, // 56: unifiedfleet.api.v1.rpc.CreateNicRequest.nic:type_name -> unifiedfleet.api.v1.models.Nic
	198, // 57: unifiedfleet.api.v1.rpc.UpdateNicRequest.nic:type_name -> unifiedfleet.api.v1.models.Nic
	188, // 58: unifiedfleet.api.v1.rpc.UpdateNicRequest.update_mask:type_name -> google.protobuf.FieldMask
	198, // 59: unifiedfleet.api.v1.rpc.ListNicsResponse.nics:type_name -> unifiedfleet.api.v1.models.Nic
	49,  // 60: unifiedfleet.api.v1.rpc.ImportNicsRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	50,  // 61: unifiedfleet.api.v1.rpc.ImportNicsRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	49,  // 62: unifiedfleet.api.v1.rpc.ImportDatacentersRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	50,  // 63: unifiedfleet.api.v1.rpc.ImportDatacentersRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	199, // 64: unifiedfleet.api.v1.rpc.CreateKVMRequest.KVM:type_name -> unifiedfleet.api.v1.models.KVM
	199, // 65: unifiedfleet.api.v1.rpc.UpdateKVMRequest.KVM:type_name -> unifiedfleet.api.v1.models.KVM
	188, // 66: unifiedfleet.api.v1.rpc.UpdateKVMRequest.update_mask:type_name -> google.protobuf.FieldMask
	124, // 67: unifiedfleet.api.v1.rpc.UpdateKVMRequest.network_option:type_name -> unifiedfleet.api.v1.rpc.NetworkOption
	199, // 68: unifiedfleet.api.v1.rpc.ListKVMsResponse.KVMs:type_name -> unifiedfleet.api.v1.models.KVM
	200, // 69: unifiedfleet.api.v1.rpc.CreateRPMRequest.RPM:type_name -> unifiedfleet.api.v1.models.RPM
	200, // 70: unifiedfleet.api.v1.rpc.UpdateRPMRequest.RPM:type_name -> unifiedfleet.api.v1.models.RPM
	188, // 71: unifiedfleet.api.v1.rpc.UpdateRPMRequest.update_mask:type_name -> google.protobuf.FieldMask
	124, // 72: unifiedfleet.api.v1.rpc.UpdateRPMRequest.network_option:type_name -> unifiedfleet.api.v1.rpc.NetworkOption
	200, // 73: unifiedfleet.api.v1.rpc.ListRPMsResponse.RPMs:type_name -> unifiedfleet.api.v1.models.RPM
	201, // 74: unifiedfleet.api.v1.rpc.CreateDracRequest.drac:type_name -> unifiedfleet.api.v1.models.Drac
	124, // 75: unifiedfleet.api.v1.rpc.CreateDracRequest.network_option:type_name -> unifiedfleet.api.v1.rpc.NetworkOption
	201, // 76: unifiedfleet.api.v1.rpc.UpdateDracRequest.drac:type_name -> unifiedfleet.api.v1.models.Drac
	188, // 77: unifiedfleet.api.v1.rpc.UpdateDracRequest.update_mask:type_name -> google.protobuf.FieldMask
	124, // 78: unifiedfleet.api.v1.rpc.UpdateDracRequest.network_option:type_name -> unifiedfleet.api.v1.rpc.NetworkOption
	201, // 79: unifiedfleet.api.v1.rpc.ListDracsResponse.dracs:type_name -> unifiedfleet.api.v1.models.Drac
	202, // 80: unifiedfleet.api.v1.rpc.CreateSwitchRequest.switch:type_name -> unifiedfleet.api.v1.models.Switch
	202, // 81: unifiedfleet.api.v1.rpc.UpdateSwitchRequest.switch:type_name -> unifiedfleet.api.v1.models.Switch
	188, // 82: unifiedfleet.api.v1.rpc.UpdateSwitchRequest.update_mask:type_name -> google.protobuf.FieldMask
	202, // 83: unifiedfleet.api.v1.rpc.ListSwitchesResponse.switches:type_name -> unifiedfleet.api.v1.models.Switch
	203, // 84: unifiedfleet.api.v1.rpc.CreateVlanRequest.vlan:type_name -> unifiedfleet.api.v1.models.Vlan
	203, // 85: unifiedfleet.api.v1.rpc.UpdateVlanRequest.vlan:type_name -> unifiedfleet.api.v1.models.Vlan
	188, // 86: unifiedfleet.api.v1.rpc.UpdateVlanRequest.update_mask:type_name -> google.protobuf.FieldMask
	203, // 87: unifiedfleet.api.v1.rpc.ListVlansResponse.vlans:type_name -> unifiedfleet.api.v1.models.Vlan
	49,  // 88: unifiedfleet.api.v1.rpc.ImportVlansRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	50,  // 89: unifiedfleet.api.v1.rpc.ImportVlansRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	49,  // 90: unifiedfleet.api.v1.rpc.ImportOSVlansRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	50,  // 91: unifiedfleet.api.v1.rpc.ImportOSVlansRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	49,  // 92: unifiedfleet.api.v1.rpc.ImportStatesRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	50,  // 93: unifiedfleet.api.v1.rpc.ImportStatesRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	204, // 94: unifiedfleet.api.v1.rpc.ListDutStatesResponse.dut_states:type_name -> unifiedfleet.api.v1.models.chromeos.lab.DutState
	205, // 95: unifiedfleet.api.v1.rpc.UpdateStateRequest.state:type_name -> unifiedfleet.api.v1.models.StateRecord
	188, // 96: unifiedfleet.api.v1.rpc.UpdateStateRequest.update_mask:type_name -> google.protobuf.FieldMask
	204, // 97: unifiedfleet.api.v1.rpc.UpdateDutStateRequest.dut_state:type_name -> unifiedfleet.api.v1.models.chromeos.lab.DutState
	188, // 98: unifiedfleet.api.v1.rpc.UpdateDutStateRequest.update_mask:type_name -> google.protobuf.FieldMask
	206, // 99: unifiedfleet.api.v1.rpc.UpdateDutStateRequest.dut_meta:type_name -> unifiedfleet.api.v1.models.DutMeta
	207, // 100: unifiedfleet.api.v1.rpc.UpdateDutStateRequest.lab_meta:type_name -> unifiedfleet.api.v1.models.LabMeta
	208, // 101: unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.resource_state:type_name -> unifiedfleet.api.v1.models.State
	204, // 102: unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.dut_state:type_name -> unifiedfleet.api.v1.models.chromeos.lab.DutState
	183, // 103: unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.dut_data:type_name -> unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.DutData
	186, // 104: unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.lab_data:type_name -> unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.LabData
	195, // 105: unifiedfleet.api.v1.rpc.RackRegistrationRequest.rack:type_name -> unifiedfleet.api.v1.models.Rack
	209, // 106: unifiedfleet.api.v1.rpc.CreateAssetRequest.asset:type_name -> unifiedfleet.api.v1.models.asset
	209, // 107: unifiedfleet.api.v1.rpc.UpdateAssetRequest.asset:type_name -> unifiedfleet.api.v1.models.asset
	188, // 108: unifiedfleet.api.v1.rpc.UpdateAssetRequest.update_mask:type_name -> google.protobuf.FieldMask
	209, // 109: unifiedfleet.api.v1.rpc.ListAssetsResponse.assets:type_name -> unifiedfleet.api.v1.models.asset
	199, // 110: unifiedfleet.api.v1.rpc.BatchGetKVMsResponse.KVMs:type_name -> unifiedfleet.api.v1.models.KVM
	210, // 111: unifiedfleet.api.v1.rpc.BatchGetDHCPConfigsResponse.dhcp_configs:type_name -> unifiedfleet.api.v1.models.DHCPConfig
	196, // 112: unifiedfleet.api.v1.rpc.BatchGetMachineLSEsResponse.machine_lses:type_name -> unifiedfleet.api.v1.models.MachineLSE
	194, // 113: unifiedfleet.api.v1.rpc.BatchGetMachinesResponse.machines:type_name -> unifiedfleet.api.v1.models.Machine
	202, // 114: unifiedfleet.api.v1.rpc.BatchGetSwitchesResponse.switches:type_name -> unifiedfleet.api.v1.models.Switch
	200, // 115: unifiedfleet.api.v1.rpc.BatchGetRPMsResponse.rpms:type_name -> unifiedfleet.api.v1.models.RPM
	201, // 116: unifiedfleet.api.v1.rpc.BatchGetDracsResponse.dracs:type_name -> unifiedfleet.api.v1.models.Drac
	198, // 117: unifiedfleet.api.v1.rpc.BatchGetNicsResponse.nics:type_name -> unifiedfleet.api.v1.models.Nic
	189, // 118: unifiedfleet.api.v1.rpc.BatchGetVMsResponse.vms:type_name -> unifiedfleet.api.v1.models.VM
	203, // 119: unifiedfleet.api.v1.rpc.BatchGetVlansResponse.vlans:type_name -> unifiedfleet.api.v1.models.Vlan
	195, // 120: unifiedfleet.api.v1.rpc.BatchGetRacksResponse.racks:type_name -> unifiedfleet.api.v1.models.Rack
	190, // 121: unifiedfleet.api.v1.rpc.BatchGetChromePlatformsResponse.chrome_platforms:type_name -> unifiedfleet.api.v1.models.ChromePlatform
	192, // 122: unifiedfleet.api.v1.rpc.BatchGetMachineLSEPrototypesResponse.machine_lse_prototypes:type_name -> unifiedfleet.api.v1.models.MachineLSEPrototype
	193, // 123: unifiedfleet.api.v1.rpc.BatchGetRackLSEPrototypesResponse.rack_lse_prototypes:type_name -> unifiedfleet.api.v1.models.RackLSEPrototype
	211, // 124: unifiedfleet.api.v1.rpc.CreateCachingServiceRequest.cachingService:type_name -> unifiedfleet.api.v1.models.CachingService
	211, // 125: unifiedfleet.api.v1.rpc.UpdateCachingServiceRequest.cachingService:type_name -> unifiedfleet.api.v1.models.CachingService
	188, // 126: unifiedfleet.api.v1.rpc.UpdateCachingServiceRequest.update_mask:type_name -> google.protobuf.FieldMask
	211, // 127: unifiedfleet.api.v1.rpc.ListCachingServicesResponse.cachingServices:type_name -> unifiedfleet.api.v1.models.CachingService
	212, // 128: unifiedfleet.api.v1.rpc.CreateSchedulingUnitRequest.scheduling_unit:type_name -> unifiedfleet.api.v1.models.SchedulingUnit
	212, // 129: unifiedfleet.api.v1.rpc.UpdateSchedulingUnitRequest.scheduling_unit:type_name -> unifiedfleet.api.v1.models.SchedulingUnit
	188, // 130: unifiedfleet.api.v1.rpc.UpdateSchedulingUnitRequest.update_mask:type_name -> google.protobuf.FieldMask
	212, // 131: unifiedfleet.api.v1.rpc.ListSchedulingUnitsResponse.scheduling_units:type_name -> unifiedfleet.api.v1.models.SchedulingUnit
	188, // 132: unifiedfleet.api.v1.rpc.UpdateConfigBundleRequest.update_mask:type_name -> google.protobuf.FieldMask
	212, // 133: unifiedfleet.api.v1.rpc.GetDeviceDataResponse.scheduling_unit:type_name -> unifiedfleet.api.v1.models.SchedulingUnit
	213, // 134: unifiedfleet.api.v1.rpc.GetDeviceDataResponse.chrome_os_device_data:type_name -> unifiedfleet.api.v1.models.ChromeOSDeviceData
	177, // 135: unifiedfleet.api.v1.rpc.GetDeviceDataResponse.attached_device_data:type_name -> unifiedfleet.api.v1.rpc.AttachedDeviceData
	178, // 136: unifiedfleet.api.v1.rpc.GetDeviceDataResponse.browser_device_data:type_name -> unifiedfleet.api.v1.rpc.BrowserDeviceData
	0,   // 137: unifiedfleet.api.v1.rpc.GetDeviceDataResponse.resource_type:type_name -> unifiedfleet.api.v1.rpc.GetDeviceDataResponse.ResourceType
	196, // 138: unifiedfleet.api.v1.rpc.AttachedDeviceData.lab_config:type_name -> unifiedfleet.api.v1.models.MachineLSE
	194, // 139: unifiedfleet.api.v1.rpc.AttachedDeviceData.machine:type_name -> unifiedfleet.api.v1.models.Machine
	204, // 140: unifiedfleet.api.v1.rpc.AttachedDeviceData.dut_state:type_name -> unifiedfleet.api.v1.models.chromeos.lab.DutState
	196, // 141: unifiedfleet.api.v1.rpc.BrowserDeviceData.host:type_name -> unifiedfleet.api.v1.models.MachineLSE
	189, // 142: unifiedfleet.api.v1.rpc.BrowserDeviceData.vm:type_name -> unifiedfleet.api.v1.models.VM
	1,   // 143: unifiedfleet.api.v1.rpc.TestStatus.code:type_name -> unifiedfleet.api.v1.rpc.TestStatus.Code
	180, // 144: unifiedfleet.api.v1.rpc.CheckFleetTestsPolicyResponse.testStatus:type_name -> unifiedfleet.api.v1.rpc.TestStatus
	124, // 145: unifiedfleet.api.v1.rpc.UpdateMachineLSERequest.NetworkOptionsEntry.value:type_name -> unifiedfleet.api.v1.rpc.NetworkOption
	214, // 146: unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.WifiRouter.state:type_name -> unifiedfleet.api.v1.models.chromeos.lab.PeripheralState
	214, // 147: unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.BluetoothPeer.state:type_name -> unifiedfleet.api.v1.models.chromeos.lab.PeripheralState
	215, // 148: unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.LabData.servo_topology:type_name -> unifiedfleet.api.v1.models.chromeos.lab.ServoTopology
	184, // 149: unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.LabData.wifi_routers:type_name -> unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.WifiRouter
	185, // 150: unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.LabData.blueooth_peers:type_name -> unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest.BluetoothPeer
	17,  // 151: unifiedfleet.api.v1.rpc.Fleet.CreateChromePlatform:input_type -> unifiedfleet.api.v1.rpc.CreateChromePlatformRequest
	18,  // 152: unifiedfleet.api.v1.rpc.Fleet.UpdateChromePlatform:input_type -> unifiedfleet.api.v1.rpc.UpdateChromePlatformRequest
	19,  // 153: unifiedfleet.api.v1.rpc.Fleet.GetChromePlatform:input_type -> unifiedfleet.api.v1.rpc.GetChromePlatformRequest
	20,  // 154: unifiedfleet.api.v1.rpc.Fleet.ListChromePlatforms:input_type -> unifiedfleet.api.v1.rpc.ListChromePlatformsRequest
	22,  // 155: unifiedfleet.api.v1.rpc.Fleet.DeleteChromePlatform:input_type -> unifiedfleet.api.v1.rpc.DeleteChromePlatformRequest
	23,  // 156: unifiedfleet.api.v1.rpc.Fleet.ImportChromePlatforms:input_type -> unifiedfleet.api.v1.rpc.ImportChromePlatformsRequest
	27,  // 157: unifiedfleet.api.v1.rpc.Fleet.ListOSVersions:input_type -> unifiedfleet.api.v1.rpc.ListOSVersionsRequest
	26,  // 158: unifiedfleet.api.v1.rpc.Fleet.ImportOSVersions:input_type -> unifiedfleet.api.v1.rpc.ImportOSVersionsRequest
	29,  // 159: unifiedfleet.api.v1.rpc.Fleet.CreateMachineLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.CreateMachineLSEPrototypeRequest
	30,  // 160: unifiedfleet.api.v1.rpc.Fleet.UpdateMachineLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.UpdateMachineLSEPrototypeRequest
	31,  // 161: unifiedfleet.api.v1.rpc.Fleet.GetMachineLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.GetMachineLSEPrototypeRequest
	32,  // 162: unifiedfleet.api.v1.rpc.Fleet.ListMachineLSEPrototypes:input_type -> unifiedfleet.api.v1.rpc.ListMachineLSEPrototypesRequest
	34,  // 163: unifiedfleet.api.v1.rpc.Fleet.DeleteMachineLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.DeleteMachineLSEPrototypeRequest
	35,  // 164: unifiedfleet.api.v1.rpc.Fleet.CreateRackLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.CreateRackLSEPrototypeRequest
	36,  // 165: unifiedfleet.api.v1.rpc.Fleet.UpdateRackLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.UpdateRackLSEPrototypeRequest
	37,  // 166: unifiedfleet.api.v1.rpc.Fleet.GetRackLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.GetRackLSEPrototypeRequest
	38,  // 167: unifiedfleet.api.v1.rpc.Fleet.ListRackLSEPrototypes:input_type -> unifiedfleet.api.v1.rpc.ListRackLSEPrototypesRequest
	40,  // 168: unifiedfleet.api.v1.rpc.Fleet.DeleteRackLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.DeleteRackLSEPrototypeRequest
	41,  // 169: unifiedfleet.api.v1.rpc.Fleet.MachineRegistration:input_type -> unifiedfleet.api.v1.rpc.MachineRegistrationRequest
	42,  // 170: unifiedfleet.api.v1.rpc.Fleet.UpdateMachine:input_type -> unifiedfleet.api.v1.rpc.UpdateMachineRequest
	43,  // 171: unifiedfleet.api.v1.rpc.Fleet.GetMachine:input_type -> unifiedfleet.api.v1.rpc.GetMachineRequest
	44,  // 172: unifiedfleet.api.v1.rpc.Fleet.ListMachines:input_type -> unifiedfleet.api.v1.rpc.ListMachinesRequest
	46,  // 173: unifiedfleet.api.v1.rpc.Fleet.DeleteMachine:input_type -> unifiedfleet.api.v1.rpc.DeleteMachineRequest
	47,  // 174: unifiedfleet.api.v1.rpc.Fleet.ImportMachines:input_type -> unifiedfleet.api.v1.rpc.ImportMachinesRequest
	48,  // 175: unifiedfleet.api.v1.rpc.Fleet.RenameMachine:input_type -> unifiedfleet.api.v1.rpc.RenameMachineRequest
	123, // 176: unifiedfleet.api.v1.rpc.Fleet.RackRegistration:input_type -> unifiedfleet.api.v1.rpc.RackRegistrationRequest
	52,  // 177: unifiedfleet.api.v1.rpc.Fleet.UpdateRack:input_type -> unifiedfleet.api.v1.rpc.UpdateRackRequest
	53,  // 178: unifiedfleet.api.v1.rpc.Fleet.GetRack:input_type -> unifiedfleet.api.v1.rpc.GetRackRequest
	54,  // 179: unifiedfleet.api.v1.rpc.Fleet.ListRacks:input_type -> unifiedfleet.api.v1.rpc.ListRacksRequest
	56,  // 180: unifiedfleet.api.v1.rpc.Fleet.DeleteRack:input_type -> unifiedfleet.api.v1.rpc.DeleteRackRequest
	57,  // 181: unifiedfleet.api.v1.rpc.Fleet.CreateMachineLSE:input_type -> unifiedfleet.api.v1.rpc.CreateMachineLSERequest
	58,  // 182: unifiedfleet.api.v1.rpc.Fleet.UpdateMachineLSE:input_type -> unifiedfleet.api.v1.rpc.UpdateMachineLSERequest
	59,  // 183: unifiedfleet.api.v1.rpc.Fleet.GetMachineLSE:input_type -> unifiedfleet.api.v1.rpc.GetMachineLSERequest
	60,  // 184: unifiedfleet.api.v1.rpc.Fleet.ListMachineLSEs:input_type -> unifiedfleet.api.v1.rpc.ListMachineLSEsRequest
	62,  // 185: unifiedfleet.api.v1.rpc.Fleet.DeleteMachineLSE:input_type -> unifiedfleet.api.v1.rpc.DeleteMachineLSERequest
	63,  // 186: unifiedfleet.api.v1.rpc.Fleet.RenameMachineLSE:input_type -> unifiedfleet.api.v1.rpc.RenameMachineLSERequest
	64,  // 187: unifiedfleet.api.v1.rpc.Fleet.ImportMachineLSEs:input_type -> unifiedfleet.api.v1.rpc.ImportMachineLSEsRequest
	65,  // 188: unifiedfleet.api.v1.rpc.Fleet.ImportOSMachineLSEs:input_type -> unifiedfleet.api.v1.rpc.ImportOSMachineLSEsRequest
	66,  // 189: unifiedfleet.api.v1.rpc.Fleet.CreateRackLSE:input_type -> unifiedfleet.api.v1.rpc.CreateRackLSERequest
	67,  // 190: unifiedfleet.api.v1.rpc.Fleet.UpdateRackLSE:input_type -> unifiedfleet.api.v1.rpc.UpdateRackLSERequest
	68,  // 191: unifiedfleet.api.v1.rpc.Fleet.GetRackLSE:input_type -> unifiedfleet.api.v1.rpc.GetRackLSERequest
	69,  // 192: unifiedfleet.api.v1.rpc.Fleet.ListRackLSEs:input_type -> unifiedfleet.api.v1.rpc.ListRackLSEsRequest
	71,  // 193: unifiedfleet.api.v1.rpc.Fleet.DeleteRackLSE:input_type -> unifiedfleet.api.v1.rpc.DeleteRackLSERequest
	72,  // 194: unifiedfleet.api.v1.rpc.Fleet.CreateNic:input_type -> unifiedfleet.api.v1.rpc.CreateNicRequest
	73,  // 195: unifiedfleet.api.v1.rpc.Fleet.UpdateNic:input_type -> unifiedfleet.api.v1.rpc.UpdateNicRequest
	74,  // 196: unifiedfleet.api.v1.rpc.Fleet.GetNic:input_type -> unifiedfleet.api.v1.rpc.GetNicRequest
	75,  // 197: unifiedfleet.api.v1.rpc.Fleet.ListNics:input_type -> unifiedfleet.api.v1.rpc.ListNicsRequest
	77,  // 198: unifiedfleet.api.v1.rpc.Fleet.DeleteNic:input_type -> unifiedfleet.api.v1.rpc.DeleteNicRequest
	78,  // 199: unifiedfleet.api.v1.rpc.Fleet.ImportNics:input_type -> unifiedfleet.api.v1.rpc.ImportNicsRequest
	79,  // 200: unifiedfleet.api.v1.rpc.Fleet.RenameNic:input_type -> unifiedfleet.api.v1.rpc.RenameNicRequest
	81,  // 201: unifiedfleet.api.v1.rpc.Fleet.ImportDatacenters:input_type -> unifiedfleet.api.v1.rpc.ImportDatacentersRequest
	82,  // 202: unifiedfleet.api.v1.rpc.Fleet.CreateKVM:input_type -> unifiedfleet.api.v1.rpc.CreateKVMRequest
	83,  // 203: unifiedfleet.api.v1.rpc.Fleet.UpdateKVM:input_type -> unifiedfleet.api.v1.rpc.UpdateKVMRequest
	84,  // 204: unifiedfleet.api.v1.rpc.Fleet.GetKVM:input_type -> unifiedfleet.api.v1.rpc.GetKVMRequest
	85,  // 205: unifiedfleet.api.v1.rpc.Fleet.ListKVMs:input_type -> unifiedfleet.api.v1.rpc.ListKVMsRequest
	87,  // 206: unifiedfleet.api.v1.rpc.Fleet.DeleteKVM:input_type -> unifiedfleet.api.v1.rpc.DeleteKVMRequest
	88,  // 207: unifiedfleet.api.v1.rpc.Fleet.CreateRPM:input_type -> unifiedfleet.api.v1.rpc.CreateRPMRequest
	89,  // 208: unifiedfleet.api.v1.rpc.Fleet.UpdateRPM:input_type -> unifiedfleet.api.v1.rpc.UpdateRPMRequest
	90,  // 209: unifiedfleet.api.v1.rpc.Fleet.GetRPM:input_type -> unifiedfleet.api.v1.rpc.GetRPMRequest
	91,  // 210: unifiedfleet.api.v1.rpc.Fleet.ListRPMs:input_type -> unifiedfleet.api.v1.rpc.ListRPMsRequest
	93,  // 211: unifiedfleet.api.v1.rpc.Fleet.DeleteRPM:input_type -> unifiedfleet.api.v1.rpc.DeleteRPMRequest
	94,  // 212: unifiedfleet.api.v1.rpc.Fleet.CreateDrac:input_type -> unifiedfleet.api.v1.rpc.CreateDracRequest
	95,  // 213: unifiedfleet.api.v1.rpc.Fleet.UpdateDrac:input_type -> unifiedfleet.api.v1.rpc.UpdateDracRequest
	96,  // 214: unifiedfleet.api.v1.rpc.Fleet.GetDrac:input_type -> unifiedfleet.api.v1.rpc.GetDracRequest
	97,  // 215: unifiedfleet.api.v1.rpc.Fleet.ListDracs:input_type -> unifiedfleet.api.v1.rpc.ListDracsRequest
	99,  // 216: unifiedfleet.api.v1.rpc.Fleet.DeleteDrac:input_type -> unifiedfleet.api.v1.rpc.DeleteDracRequest
	100, // 217: unifiedfleet.api.v1.rpc.Fleet.CreateSwitch:input_type -> unifiedfleet.api.v1.rpc.CreateSwitchRequest
	101, // 218: unifiedfleet.api.v1.rpc.Fleet.UpdateSwitch:input_type -> unifiedfleet.api.v1.rpc.UpdateSwitchRequest
	102, // 219: unifiedfleet.api.v1.rpc.Fleet.GetSwitch:input_type -> unifiedfleet.api.v1.rpc.GetSwitchRequest
	103, // 220: unifiedfleet.api.v1.rpc.Fleet.ListSwitches:input_type -> unifiedfleet.api.v1.rpc.ListSwitchesRequest
	105, // 221: unifiedfleet.api.v1.rpc.Fleet.DeleteSwitch:input_type -> unifiedfleet.api.v1.rpc.DeleteSwitchRequest
	80,  // 222: unifiedfleet.api.v1.rpc.Fleet.RenameSwitch:input_type -> unifiedfleet.api.v1.rpc.RenameSwitchRequest
	106, // 223: unifiedfleet.api.v1.rpc.Fleet.CreateVlan:input_type -> unifiedfleet.api.v1.rpc.CreateVlanRequest
	107, // 224: unifiedfleet.api.v1.rpc.Fleet.UpdateVlan:input_type -> unifiedfleet.api.v1.rpc.UpdateVlanRequest
	108, // 225: unifiedfleet.api.v1.rpc.Fleet.GetVlan:input_type -> unifiedfleet.api.v1.rpc.GetVlanRequest
	109, // 226: unifiedfleet.api.v1.rpc.Fleet.ListVlans:input_type -> unifiedfleet.api.v1.rpc.ListVlansRequest
	111, // 227: unifiedfleet.api.v1.rpc.Fleet.DeleteVlan:input_type -> unifiedfleet.api.v1.rpc.DeleteVlanRequest
	112, // 228: unifiedfleet.api.v1.rpc.Fleet.ImportVlans:input_type -> unifiedfleet.api.v1.rpc.ImportVlansRequest
	113, // 229: unifiedfleet.api.v1.rpc.Fleet.ImportOSVlans:input_type -> unifiedfleet.api.v1.rpc.ImportOSVlansRequest
	114, // 230: unifiedfleet.api.v1.rpc.Fleet.ImportStates:input_type -> unifiedfleet.api.v1.rpc.ImportStatesRequest
	119, // 231: unifiedfleet.api.v1.rpc.Fleet.UpdateState:input_type -> unifiedfleet.api.v1.rpc.UpdateStateRequest
	115, // 232: unifiedfleet.api.v1.rpc.Fleet.GetState:input_type -> unifiedfleet.api.v1.rpc.GetStateRequest
	116, // 233: unifiedfleet.api.v1.rpc.Fleet.GetDutState:input_type -> unifiedfleet.api.v1.rpc.GetDutStateRequest
	117, // 234: unifiedfleet.api.v1.rpc.Fleet.ListDutStates:input_type -> unifiedfleet.api.v1.rpc.ListDutStatesRequest
	120, // 235: unifiedfleet.api.v1.rpc.Fleet.UpdateDutState:input_type -> unifiedfleet.api.v1.rpc.UpdateDutStateRequest
	121, // 236: unifiedfleet.api.v1.rpc.Fleet.UpdateDeviceRecoveryData:input_type -> unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataRequest
	16,  // 237: unifiedfleet.api.v1.rpc.Fleet.GetDHCPConfig:input_type -> unifiedfleet.api.v1.rpc.GetDHCPConfigRequest
	10,  // 238: unifiedfleet.api.v1.rpc.Fleet.CreateVM:input_type -> unifiedfleet.api.v1.rpc.CreateVMRequest
	11,  // 239: unifiedfleet.api.v1.rpc.Fleet.UpdateVM:input_type -> unifiedfleet.api.v1.rpc.UpdateVMRequest
	13,  // 240: unifiedfleet.api.v1.rpc.Fleet.DeleteVM:input_type -> unifiedfleet.api.v1.rpc.DeleteVMRequest
	12,  // 241: unifiedfleet.api.v1.rpc.Fleet.GetVM:input_type -> unifiedfleet.api.v1.rpc.GetVMRequest
	14,  // 242: unifiedfleet.api.v1.rpc.Fleet.ListVMs:input_type -> unifiedfleet.api.v1.rpc.ListVMsRequest
	125, // 243: unifiedfleet.api.v1.rpc.Fleet.CreateAsset:input_type -> unifiedfleet.api.v1.rpc.CreateAssetRequest
	126, // 244: unifiedfleet.api.v1.rpc.Fleet.UpdateAsset:input_type -> unifiedfleet.api.v1.rpc.UpdateAssetRequest
	127, // 245: unifiedfleet.api.v1.rpc.Fleet.GetAsset:input_type -> unifiedfleet.api.v1.rpc.GetAssetRequest
	128, // 246: unifiedfleet.api.v1.rpc.Fleet.ListAssets:input_type -> unifiedfleet.api.v1.rpc.ListAssetsRequest
	130, // 247: unifiedfleet.api.v1.rpc.Fleet.DeleteAsset:input_type -> unifiedfleet.api.v1.rpc.DeleteAssetRequest
	131, // 248: unifiedfleet.api.v1.rpc.Fleet.RenameAsset:input_type -> unifiedfleet.api.v1.rpc.RenameAssetRequest
	132, // 249: unifiedfleet.api.v1.rpc.Fleet.BatchGetKVMs:input_type -> unifiedfleet.api.v1.rpc.BatchGetKVMsRequest
	134, // 250: unifiedfleet.api.v1.rpc.Fleet.BatchGetDHCPConfigs:input_type -> unifiedfleet.api.v1.rpc.BatchGetDHCPConfigsRequest
	136, // 251: unifiedfleet.api.v1.rpc.Fleet.BatchGetMachineLSEs:input_type -> unifiedfleet.api.v1.rpc.BatchGetMachineLSEsRequest
	138, // 252: unifiedfleet.api.v1.rpc.Fleet.BatchGetMachines:input_type -> unifiedfleet.api.v1.rpc.BatchGetMachinesRequest
	140, // 253: unifiedfleet.api.v1.rpc.Fleet.BatchGetSwitches:input_type -> unifiedfleet.api.v1.rpc.BatchGetSwitchesRequest
	142, // 254: unifiedfleet.api.v1.rpc.Fleet.BatchGetRPMs:input_type -> unifiedfleet.api.v1.rpc.BatchGetRPMsRequest
	144, // 255: unifiedfleet.api.v1.rpc.Fleet.BatchGetDracs:input_type -> unifiedfleet.api.v1.rpc.BatchGetDracsRequest
	146, // 256: unifiedfleet.api.v1.rpc.Fleet.BatchGetNics:input_type -> unifiedfleet.api.v1.rpc.BatchGetNicsRequest
	148, // 257: unifiedfleet.api.v1.rpc.Fleet.BatchGetVMs:input_type -> unifiedfleet.api.v1.rpc.BatchGetVMsRequest
	150, // 258: unifiedfleet.api.v1.rpc.Fleet.BatchGetVlans:input_type -> unifiedfleet.api.v1.rpc.BatchGetVlansRequest
	152, // 259: unifiedfleet.api.v1.rpc.Fleet.BatchGetRacks:input_type -> unifiedfleet.api.v1.rpc.BatchGetRacksRequest
	154, // 260: unifiedfleet.api.v1.rpc.Fleet.BatchGetChromePlatforms:input_type -> unifiedfleet.api.v1.rpc.BatchGetChromePlatformsRequest
	156, // 261: unifiedfleet.api.v1.rpc.Fleet.BatchGetMachineLSEPrototypes:input_type -> unifiedfleet.api.v1.rpc.BatchGetMachineLSEPrototypesRequest
	158, // 262: unifiedfleet.api.v1.rpc.Fleet.BatchGetRackLSEPrototypes:input_type -> unifiedfleet.api.v1.rpc.BatchGetRackLSEPrototypesRequest
	160, // 263: unifiedfleet.api.v1.rpc.Fleet.GetChromeOSDeviceData:input_type -> unifiedfleet.api.v1.rpc.GetChromeOSDeviceDataRequest
	161, // 264: unifiedfleet.api.v1.rpc.Fleet.CreateCachingService:input_type -> unifiedfleet.api.v1.rpc.CreateCachingServiceRequest
	162, // 265: unifiedfleet.api.v1.rpc.Fleet.UpdateCachingService:input_type -> unifiedfleet.api.v1.rpc.UpdateCachingServiceRequest
	163, // 266: unifiedfleet.api.v1.rpc.Fleet.GetCachingService:input_type -> unifiedfleet.api.v1.rpc.GetCachingServiceRequest
	164, // 267: unifiedfleet.api.v1.rpc.Fleet.ListCachingServices:input_type -> unifiedfleet.api.v1.rpc.ListCachingServicesRequest
	166, // 268: unifiedfleet.api.v1.rpc.Fleet.DeleteCachingService:input_type -> unifiedfleet.api.v1.rpc.DeleteCachingServiceRequest
	2,   // 269: unifiedfleet.api.v1.rpc.Fleet.UpdateMachineLSEDeployment:input_type -> unifiedfleet.api.v1.rpc.UpdateMachineLSEDeploymentRequest
	3,   // 270: unifiedfleet.api.v1.rpc.Fleet.BatchUpdateMachineLSEDeployment:input_type -> unifiedfleet.api.v1.rpc.BatchUpdateMachineLSEDeploymentRequest
	5,   // 271: unifiedfleet.api.v1.rpc.Fleet.GetMachineLSEDeployment:input_type -> unifiedfleet.api.v1.rpc.GetMachineLSEDeploymentRequest
	6,   // 272: unifiedfleet.api.v1.rpc.Fleet.BatchGetMachineLSEDeployments:input_type -> unifiedfleet.api.v1.rpc.BatchGetMachineLSEDeploymentsRequest
	8,   // 273: unifiedfleet.api.v1.rpc.Fleet.ListMachineLSEDeployments:input_type -> unifiedfleet.api.v1.rpc.ListMachineLSEDeploymentsRequest
	167, // 274: unifiedfleet.api.v1.rpc.Fleet.CreateSchedulingUnit:input_type -> unifiedfleet.api.v1.rpc.CreateSchedulingUnitRequest
	168, // 275: unifiedfleet.api.v1.rpc.Fleet.UpdateSchedulingUnit:input_type -> unifiedfleet.api.v1.rpc.UpdateSchedulingUnitRequest
	169, // 276: unifiedfleet.api.v1.rpc.Fleet.GetSchedulingUnit:input_type -> unifiedfleet.api.v1.rpc.GetSchedulingUnitRequest
	170, // 277: unifiedfleet.api.v1.rpc.Fleet.ListSchedulingUnits:input_type -> unifiedfleet.api.v1.rpc.ListSchedulingUnitsRequest
	172, // 278: unifiedfleet.api.v1.rpc.Fleet.DeleteSchedulingUnit:input_type -> unifiedfleet.api.v1.rpc.DeleteSchedulingUnitRequest
	173, // 279: unifiedfleet.api.v1.rpc.Fleet.UpdateConfigBundle:input_type -> unifiedfleet.api.v1.rpc.UpdateConfigBundleRequest
	175, // 280: unifiedfleet.api.v1.rpc.Fleet.GetDeviceData:input_type -> unifiedfleet.api.v1.rpc.GetDeviceDataRequest
	179, // 281: unifiedfleet.api.v1.rpc.Fleet.CheckFleetTestsPolicy:input_type -> unifiedfleet.api.v1.rpc.CheckFleetTestsPolicyRequest
	190, // 282: unifiedfleet.api.v1.rpc.Fleet.CreateChromePlatform:output_type -> unifiedfleet.api.v1.models.ChromePlatform
	190, // 283: unifiedfleet.api.v1.rpc.Fleet.UpdateChromePlatform:output_type -> unifiedfleet.api.v1.models.ChromePlatform
	190, // 284: unifiedfleet.api.v1.rpc.Fleet.GetChromePlatform:output_type -> unifiedfleet.api.v1.models.ChromePlatform
	21,  // 285: unifiedfleet.api.v1.rpc.Fleet.ListChromePlatforms:output_type -> unifiedfleet.api.v1.rpc.ListChromePlatformsResponse
	216, // 286: unifiedfleet.api.v1.rpc.Fleet.DeleteChromePlatform:output_type -> google.protobuf.Empty
	217, // 287: unifiedfleet.api.v1.rpc.Fleet.ImportChromePlatforms:output_type -> google.rpc.Status
	28,  // 288: unifiedfleet.api.v1.rpc.Fleet.ListOSVersions:output_type -> unifiedfleet.api.v1.rpc.ListOSVersionsResponse
	217, // 289: unifiedfleet.api.v1.rpc.Fleet.ImportOSVersions:output_type -> google.rpc.Status
	192, // 290: unifiedfleet.api.v1.rpc.Fleet.CreateMachineLSEPrototype:output_type -> unifiedfleet.api.v1.models.MachineLSEPrototype
	192, // 291: unifiedfleet.api.v1.rpc.Fleet.UpdateMachineLSEPrototype:output_type -> unifiedfleet.api.v1.models.MachineLSEPrototype
	192, // 292: unifiedfleet.api.v1.rpc.Fleet.GetMachineLSEPrototype:output_type -> unifiedfleet.api.v1.models.MachineLSEPrototype
	33,  // 293: unifiedfleet.api.v1.rpc.Fleet.ListMachineLSEPrototypes:output_type -> unifiedfleet.api.v1.rpc.ListMachineLSEPrototypesResponse
	216, // 294: unifiedfleet.api.v1.rpc.Fleet.DeleteMachineLSEPrototype:output_type -> google.protobuf.Empty
	193, // 295: unifiedfleet.api.v1.rpc.Fleet.CreateRackLSEPrototype:output_type -> unifiedfleet.api.v1.models.RackLSEPrototype
	193, // 296: unifiedfleet.api.v1.rpc.Fleet.UpdateRackLSEPrototype:output_type -> unifiedfleet.api.v1.models.RackLSEPrototype
	193, // 297: unifiedfleet.api.v1.rpc.Fleet.GetRackLSEPrototype:output_type -> unifiedfleet.api.v1.models.RackLSEPrototype
	39,  // 298: unifiedfleet.api.v1.rpc.Fleet.ListRackLSEPrototypes:output_type -> unifiedfleet.api.v1.rpc.ListRackLSEPrototypesResponse
	216, // 299: unifiedfleet.api.v1.rpc.Fleet.DeleteRackLSEPrototype:output_type -> google.protobuf.Empty
	194, // 300: unifiedfleet.api.v1.rpc.Fleet.MachineRegistration:output_type -> unifiedfleet.api.v1.models.Machine
	194, // 301: unifiedfleet.api.v1.rpc.Fleet.UpdateMachine:output_type -> unifiedfleet.api.v1.models.Machine
	194, // 302: unifiedfleet.api.v1.rpc.Fleet.GetMachine:output_type -> unifiedfleet.api.v1.models.Machine
	45,  // 303: unifiedfleet.api.v1.rpc.Fleet.ListMachines:output_type -> unifiedfleet.api.v1.rpc.ListMachinesResponse
	216, // 304: unifiedfleet.api.v1.rpc.Fleet.DeleteMachine:output_type -> google.protobuf.Empty
	217, // 305: unifiedfleet.api.v1.rpc.Fleet.ImportMachines:output_type -> google.rpc.Status
	194, // 306: unifiedfleet.api.v1.rpc.Fleet.RenameMachine:output_type -> unifiedfleet.api.v1.models.Machine
	195, // 307: unifiedfleet.api.v1.rpc.Fleet.RackRegistration:output_type -> unifiedfleet.api.v1.models.Rack
	195, // 308: unifiedfleet.api.v1.rpc.Fleet.UpdateRack:output_type -> unifiedfleet.api.v1.models.Rack
	195, // 309: unifiedfleet.api.v1.rpc.Fleet.GetRack:output_type -> unifiedfleet.api.v1.models.Rack
	55,  // 310: unifiedfleet.api.v1.rpc.Fleet.ListRacks:output_type -> unifiedfleet.api.v1.rpc.ListRacksResponse
	216, // 311: unifiedfleet.api.v1.rpc.Fleet.DeleteRack:output_type -> google.protobuf.Empty
	196, // 312: unifiedfleet.api.v1.rpc.Fleet.CreateMachineLSE:output_type -> unifiedfleet.api.v1.models.MachineLSE
	196, // 313: unifiedfleet.api.v1.rpc.Fleet.UpdateMachineLSE:output_type -> unifiedfleet.api.v1.models.MachineLSE
	196, // 314: unifiedfleet.api.v1.rpc.Fleet.GetMachineLSE:output_type -> unifiedfleet.api.v1.models.MachineLSE
	61,  // 315: unifiedfleet.api.v1.rpc.Fleet.ListMachineLSEs:output_type -> unifiedfleet.api.v1.rpc.ListMachineLSEsResponse
	216, // 316: unifiedfleet.api.v1.rpc.Fleet.DeleteMachineLSE:output_type -> google.protobuf.Empty
	196, // 317: unifiedfleet.api.v1.rpc.Fleet.RenameMachineLSE:output_type -> unifiedfleet.api.v1.models.MachineLSE
	217, // 318: unifiedfleet.api.v1.rpc.Fleet.ImportMachineLSEs:output_type -> google.rpc.Status
	217, // 319: unifiedfleet.api.v1.rpc.Fleet.ImportOSMachineLSEs:output_type -> google.rpc.Status
	197, // 320: unifiedfleet.api.v1.rpc.Fleet.CreateRackLSE:output_type -> unifiedfleet.api.v1.models.RackLSE
	197, // 321: unifiedfleet.api.v1.rpc.Fleet.UpdateRackLSE:output_type -> unifiedfleet.api.v1.models.RackLSE
	197, // 322: unifiedfleet.api.v1.rpc.Fleet.GetRackLSE:output_type -> unifiedfleet.api.v1.models.RackLSE
	70,  // 323: unifiedfleet.api.v1.rpc.Fleet.ListRackLSEs:output_type -> unifiedfleet.api.v1.rpc.ListRackLSEsResponse
	216, // 324: unifiedfleet.api.v1.rpc.Fleet.DeleteRackLSE:output_type -> google.protobuf.Empty
	198, // 325: unifiedfleet.api.v1.rpc.Fleet.CreateNic:output_type -> unifiedfleet.api.v1.models.Nic
	198, // 326: unifiedfleet.api.v1.rpc.Fleet.UpdateNic:output_type -> unifiedfleet.api.v1.models.Nic
	198, // 327: unifiedfleet.api.v1.rpc.Fleet.GetNic:output_type -> unifiedfleet.api.v1.models.Nic
	76,  // 328: unifiedfleet.api.v1.rpc.Fleet.ListNics:output_type -> unifiedfleet.api.v1.rpc.ListNicsResponse
	216, // 329: unifiedfleet.api.v1.rpc.Fleet.DeleteNic:output_type -> google.protobuf.Empty
	217, // 330: unifiedfleet.api.v1.rpc.Fleet.ImportNics:output_type -> google.rpc.Status
	198, // 331: unifiedfleet.api.v1.rpc.Fleet.RenameNic:output_type -> unifiedfleet.api.v1.models.Nic
	217, // 332: unifiedfleet.api.v1.rpc.Fleet.ImportDatacenters:output_type -> google.rpc.Status
	199, // 333: unifiedfleet.api.v1.rpc.Fleet.CreateKVM:output_type -> unifiedfleet.api.v1.models.KVM
	199, // 334: unifiedfleet.api.v1.rpc.Fleet.UpdateKVM:output_type -> unifiedfleet.api.v1.models.KVM
	199, // 335: unifiedfleet.api.v1.rpc.Fleet.GetKVM:output_type -> unifiedfleet.api.v1.models.KVM
	86,  // 336: unifiedfleet.api.v1.rpc.Fleet.ListKVMs:output_type -> unifiedfleet.api.v1.rpc.ListKVMsResponse
	216, // 337: unifiedfleet.api.v1.rpc.Fleet.DeleteKVM:output_type -> google.protobuf.Empty
	200, // 338: unifiedfleet.api.v1.rpc.Fleet.CreateRPM:output_type -> unifiedfleet.api.v1.models.RPM
	200, // 339: unifiedfleet.api.v1.rpc.Fleet.UpdateRPM:output_type -> unifiedfleet.api.v1.models.RPM
	200, // 340: unifiedfleet.api.v1.rpc.Fleet.GetRPM:output_type -> unifiedfleet.api.v1.models.RPM
	92,  // 341: unifiedfleet.api.v1.rpc.Fleet.ListRPMs:output_type -> unifiedfleet.api.v1.rpc.ListRPMsResponse
	216, // 342: unifiedfleet.api.v1.rpc.Fleet.DeleteRPM:output_type -> google.protobuf.Empty
	201, // 343: unifiedfleet.api.v1.rpc.Fleet.CreateDrac:output_type -> unifiedfleet.api.v1.models.Drac
	201, // 344: unifiedfleet.api.v1.rpc.Fleet.UpdateDrac:output_type -> unifiedfleet.api.v1.models.Drac
	201, // 345: unifiedfleet.api.v1.rpc.Fleet.GetDrac:output_type -> unifiedfleet.api.v1.models.Drac
	98,  // 346: unifiedfleet.api.v1.rpc.Fleet.ListDracs:output_type -> unifiedfleet.api.v1.rpc.ListDracsResponse
	216, // 347: unifiedfleet.api.v1.rpc.Fleet.DeleteDrac:output_type -> google.protobuf.Empty
	202, // 348: unifiedfleet.api.v1.rpc.Fleet.CreateSwitch:output_type -> unifiedfleet.api.v1.models.Switch
	202, // 349: unifiedfleet.api.v1.rpc.Fleet.UpdateSwitch:output_type -> unifiedfleet.api.v1.models.Switch
	202, // 350: unifiedfleet.api.v1.rpc.Fleet.GetSwitch:output_type -> unifiedfleet.api.v1.models.Switch
	104, // 351: unifiedfleet.api.v1.rpc.Fleet.ListSwitches:output_type -> unifiedfleet.api.v1.rpc.ListSwitchesResponse
	216, // 352: unifiedfleet.api.v1.rpc.Fleet.DeleteSwitch:output_type -> google.protobuf.Empty
	202, // 353: unifiedfleet.api.v1.rpc.Fleet.RenameSwitch:output_type -> unifiedfleet.api.v1.models.Switch
	203, // 354: unifiedfleet.api.v1.rpc.Fleet.CreateVlan:output_type -> unifiedfleet.api.v1.models.Vlan
	203, // 355: unifiedfleet.api.v1.rpc.Fleet.UpdateVlan:output_type -> unifiedfleet.api.v1.models.Vlan
	203, // 356: unifiedfleet.api.v1.rpc.Fleet.GetVlan:output_type -> unifiedfleet.api.v1.models.Vlan
	110, // 357: unifiedfleet.api.v1.rpc.Fleet.ListVlans:output_type -> unifiedfleet.api.v1.rpc.ListVlansResponse
	216, // 358: unifiedfleet.api.v1.rpc.Fleet.DeleteVlan:output_type -> google.protobuf.Empty
	217, // 359: unifiedfleet.api.v1.rpc.Fleet.ImportVlans:output_type -> google.rpc.Status
	217, // 360: unifiedfleet.api.v1.rpc.Fleet.ImportOSVlans:output_type -> google.rpc.Status
	217, // 361: unifiedfleet.api.v1.rpc.Fleet.ImportStates:output_type -> google.rpc.Status
	205, // 362: unifiedfleet.api.v1.rpc.Fleet.UpdateState:output_type -> unifiedfleet.api.v1.models.StateRecord
	205, // 363: unifiedfleet.api.v1.rpc.Fleet.GetState:output_type -> unifiedfleet.api.v1.models.StateRecord
	204, // 364: unifiedfleet.api.v1.rpc.Fleet.GetDutState:output_type -> unifiedfleet.api.v1.models.chromeos.lab.DutState
	118, // 365: unifiedfleet.api.v1.rpc.Fleet.ListDutStates:output_type -> unifiedfleet.api.v1.rpc.ListDutStatesResponse
	204, // 366: unifiedfleet.api.v1.rpc.Fleet.UpdateDutState:output_type -> unifiedfleet.api.v1.models.chromeos.lab.DutState
	122, // 367: unifiedfleet.api.v1.rpc.Fleet.UpdateDeviceRecoveryData:output_type -> unifiedfleet.api.v1.rpc.UpdateDeviceRecoveryDataResponse
	210, // 368: unifiedfleet.api.v1.rpc.Fleet.GetDHCPConfig:output_type -> unifiedfleet.api.v1.models.DHCPConfig
	189, // 369: unifiedfleet.api.v1.rpc.Fleet.CreateVM:output_type -> unifiedfleet.api.v1.models.VM
	189, // 370: unifiedfleet.api.v1.rpc.Fleet.UpdateVM:output_type -> unifiedfleet.api.v1.models.VM
	216, // 371: unifiedfleet.api.v1.rpc.Fleet.DeleteVM:output_type -> google.protobuf.Empty
	189, // 372: unifiedfleet.api.v1.rpc.Fleet.GetVM:output_type -> unifiedfleet.api.v1.models.VM
	15,  // 373: unifiedfleet.api.v1.rpc.Fleet.ListVMs:output_type -> unifiedfleet.api.v1.rpc.ListVMsResponse
	209, // 374: unifiedfleet.api.v1.rpc.Fleet.CreateAsset:output_type -> unifiedfleet.api.v1.models.asset
	209, // 375: unifiedfleet.api.v1.rpc.Fleet.UpdateAsset:output_type -> unifiedfleet.api.v1.models.asset
	209, // 376: unifiedfleet.api.v1.rpc.Fleet.GetAsset:output_type -> unifiedfleet.api.v1.models.asset
	129, // 377: unifiedfleet.api.v1.rpc.Fleet.ListAssets:output_type -> unifiedfleet.api.v1.rpc.ListAssetsResponse
	216, // 378: unifiedfleet.api.v1.rpc.Fleet.DeleteAsset:output_type -> google.protobuf.Empty
	209, // 379: unifiedfleet.api.v1.rpc.Fleet.RenameAsset:output_type -> unifiedfleet.api.v1.models.asset
	133, // 380: unifiedfleet.api.v1.rpc.Fleet.BatchGetKVMs:output_type -> unifiedfleet.api.v1.rpc.BatchGetKVMsResponse
	135, // 381: unifiedfleet.api.v1.rpc.Fleet.BatchGetDHCPConfigs:output_type -> unifiedfleet.api.v1.rpc.BatchGetDHCPConfigsResponse
	137, // 382: unifiedfleet.api.v1.rpc.Fleet.BatchGetMachineLSEs:output_type -> unifiedfleet.api.v1.rpc.BatchGetMachineLSEsResponse
	139, // 383: unifiedfleet.api.v1.rpc.Fleet.BatchGetMachines:output_type -> unifiedfleet.api.v1.rpc.BatchGetMachinesResponse
	141, // 384: unifiedfleet.api.v1.rpc.Fleet.BatchGetSwitches:output_type -> unifiedfleet.api.v1.rpc.BatchGetSwitchesResponse
	143, // 385: unifiedfleet.api.v1.rpc.Fleet.BatchGetRPMs:output_type -> unifiedfleet.api.v1.rpc.BatchGetRPMsResponse
	145, // 386: unifiedfleet.api.v1.rpc.Fleet.BatchGetDracs:output_type -> unifiedfleet.api.v1.rpc.BatchGetDracsResponse
	147, // 387: unifiedfleet.api.v1.rpc.Fleet.BatchGetNics:output_type -> unifiedfleet.api.v1.rpc.BatchGetNicsResponse
	149, // 388: unifiedfleet.api.v1.rpc.Fleet.BatchGetVMs:output_type -> unifiedfleet.api.v1.rpc.BatchGetVMsResponse
	151, // 389: unifiedfleet.api.v1.rpc.Fleet.BatchGetVlans:output_type -> unifiedfleet.api.v1.rpc.BatchGetVlansResponse
	153, // 390: unifiedfleet.api.v1.rpc.Fleet.BatchGetRacks:output_type -> unifiedfleet.api.v1.rpc.BatchGetRacksResponse
	155, // 391: unifiedfleet.api.v1.rpc.Fleet.BatchGetChromePlatforms:output_type -> unifiedfleet.api.v1.rpc.BatchGetChromePlatformsResponse
	157, // 392: unifiedfleet.api.v1.rpc.Fleet.BatchGetMachineLSEPrototypes:output_type -> unifiedfleet.api.v1.rpc.BatchGetMachineLSEPrototypesResponse
	159, // 393: unifiedfleet.api.v1.rpc.Fleet.BatchGetRackLSEPrototypes:output_type -> unifiedfleet.api.v1.rpc.BatchGetRackLSEPrototypesResponse
	213, // 394: unifiedfleet.api.v1.rpc.Fleet.GetChromeOSDeviceData:output_type -> unifiedfleet.api.v1.models.ChromeOSDeviceData
	211, // 395: unifiedfleet.api.v1.rpc.Fleet.CreateCachingService:output_type -> unifiedfleet.api.v1.models.CachingService
	211, // 396: unifiedfleet.api.v1.rpc.Fleet.UpdateCachingService:output_type -> unifiedfleet.api.v1.models.CachingService
	211, // 397: unifiedfleet.api.v1.rpc.Fleet.GetCachingService:output_type -> unifiedfleet.api.v1.models.CachingService
	165, // 398: unifiedfleet.api.v1.rpc.Fleet.ListCachingServices:output_type -> unifiedfleet.api.v1.rpc.ListCachingServicesResponse
	216, // 399: unifiedfleet.api.v1.rpc.Fleet.DeleteCachingService:output_type -> google.protobuf.Empty
	187, // 400: unifiedfleet.api.v1.rpc.Fleet.UpdateMachineLSEDeployment:output_type -> unifiedfleet.api.v1.models.MachineLSEDeployment
	4,   // 401: unifiedfleet.api.v1.rpc.Fleet.BatchUpdateMachineLSEDeployment:output_type -> unifiedfleet.api.v1.rpc.BatchUpdateMachineLSEDeploymentResponse
	187, // 402: unifiedfleet.api.v1.rpc.Fleet.GetMachineLSEDeployment:output_type -> unifiedfleet.api.v1.models.MachineLSEDeployment
	7,   // 403: unifiedfleet.api.v1.rpc.Fleet.BatchGetMachineLSEDeployments:output_type -> unifiedfleet.api.v1.rpc.BatchGetMachineLSEDeploymentsResponse
	9,   // 404: unifiedfleet.api.v1.rpc.Fleet.ListMachineLSEDeployments:output_type -> unifiedfleet.api.v1.rpc.ListMachineLSEDeploymentsResponse
	212, // 405: unifiedfleet.api.v1.rpc.Fleet.CreateSchedulingUnit:output_type -> unifiedfleet.api.v1.models.SchedulingUnit
	212, // 406: unifiedfleet.api.v1.rpc.Fleet.UpdateSchedulingUnit:output_type -> unifiedfleet.api.v1.models.SchedulingUnit
	212, // 407: unifiedfleet.api.v1.rpc.Fleet.GetSchedulingUnit:output_type -> unifiedfleet.api.v1.models.SchedulingUnit
	171, // 408: unifiedfleet.api.v1.rpc.Fleet.ListSchedulingUnits:output_type -> unifiedfleet.api.v1.rpc.ListSchedulingUnitsResponse
	216, // 409: unifiedfleet.api.v1.rpc.Fleet.DeleteSchedulingUnit:output_type -> google.protobuf.Empty
	174, // 410: unifiedfleet.api.v1.rpc.Fleet.UpdateConfigBundle:output_type -> unifiedfleet.api.v1.rpc.UpdateConfigBundleResponse
	176, // 411: unifiedfleet.api.v1.rpc.Fleet.GetDeviceData:output_type -> unifiedfleet.api.v1.rpc.GetDeviceDataResponse
	181, // 412: unifiedfleet.api.v1.rpc.Fleet.CheckFleetTestsPolicy:output_type -> unifiedfleet.api.v1.rpc.CheckFleetTestsPolicyResponse
	282, // [282:413] is the sub-list for method output_type
	151, // [151:282] is the sub-list for method input_type
	151, // [151:151] is the sub-list for extension type_name
	151, // [151:151] is the sub-list for extension extendee
	0,   // [0:151] is the sub-list for field type_name
}

func init() { file_infra_unifiedfleet_api_v1_rpc_fleet_proto_init() }
func file_infra_unifiedfleet_api_v1_rpc_fleet_proto_init() {
	if File_infra_unifiedfleet_api_v1_rpc_fleet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMachineLSEDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateMachineLSEDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateMachineLSEDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachineLSEDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetMachineLSEDeploymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetMachineLSEDeploymentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachineLSEDeploymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachineLSEDeploymentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVMsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVMsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDHCPConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChromePlatformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChromePlatformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChromePlatformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChromePlatformsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChromePlatformsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChromePlatformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportChromePlatformsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportChromePlatformsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromePlatformResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportOSVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOSVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOSVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMachineLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMachineLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachineLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachineLSEPrototypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachineLSEPrototypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMachineLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRackLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRackLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRackLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRackLSEPrototypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRackLSEPrototypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRackLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMachineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMachineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportMachinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameMachineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineDBSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRacksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRacksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMachineLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMachineLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachineLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachineLSEsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachineLSEsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMachineLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameMachineLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportMachineLSEsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportOSMachineLSEsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRackLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRackLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRackLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRackLSEsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRackLSEsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRackLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNicsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNicsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportNicsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameNicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameSwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDatacentersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateKVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKVMsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKVMsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRPMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRPMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRPMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRPMsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRPMsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRPMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDracRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDracRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDracRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDracsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDracsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDracRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSwitchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSwitchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportVlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportOSVlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDutStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDutStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDutStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDutStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRecoveryDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRecoveryDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetKVMsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetKVMsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDHCPConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDHCPConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetMachineLSEsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetMachineLSEsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetMachinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetMachinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetSwitchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetSwitchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetRPMsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetRPMsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDracsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDracsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetNicsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetNicsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetVMsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetVMsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetVlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetVlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetRacksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetRacksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetChromePlatformsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetChromePlatformsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetMachineLSEPrototypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetMachineLSEPrototypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetRackLSEPrototypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetRackLSEPrototypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChromeOSDeviceDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCachingServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCachingServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCachingServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCachingServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCachingServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCachingServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSchedulingUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSchedulingUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulingUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSchedulingUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSchedulingUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSchedulingUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachedDeviceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserDeviceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckFleetTestsPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckFleetTestsPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRecoveryDataRequest_DutData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRecoveryDataRequest_WifiRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRecoveryDataRequest_BluetoothPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRecoveryDataRequest_LabData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*ImportChromePlatformsRequest_MachineDbSource)(nil),
		(*ImportChromePlatformsRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*ImportOSVersionsRequest_MachineDbSource)(nil),
		(*ImportOSVersionsRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*ImportMachinesRequest_MachineDbSource)(nil),
		(*ImportMachinesRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*ImportMachineLSEsRequest_MachineDbSource)(nil),
		(*ImportMachineLSEsRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[63].OneofWrappers = []interface{}{
		(*ImportOSMachineLSEsRequest_MachineDbSource)(nil),
		(*ImportOSMachineLSEsRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[76].OneofWrappers = []interface{}{
		(*ImportNicsRequest_MachineDbSource)(nil),
		(*ImportNicsRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[79].OneofWrappers = []interface{}{
		(*ImportDatacentersRequest_MachineDbSource)(nil),
		(*ImportDatacentersRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[110].OneofWrappers = []interface{}{
		(*ImportVlansRequest_MachineDbSource)(nil),
		(*ImportVlansRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[111].OneofWrappers = []interface{}{
		(*ImportOSVlansRequest_MachineDbSource)(nil),
		(*ImportOSVlansRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[112].OneofWrappers = []interface{}{
		(*ImportStatesRequest_MachineDbSource)(nil),
		(*ImportStatesRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[174].OneofWrappers = []interface{}{
		(*GetDeviceDataResponse_SchedulingUnit)(nil),
		(*GetDeviceDataResponse_ChromeOsDeviceData)(nil),
		(*GetDeviceDataResponse_AttachedDeviceData)(nil),
		(*GetDeviceDataResponse_BrowserDeviceData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   185,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infra_unifiedfleet_api_v1_rpc_fleet_proto_goTypes,
		DependencyIndexes: file_infra_unifiedfleet_api_v1_rpc_fleet_proto_depIdxs,
		EnumInfos:         file_infra_unifiedfleet_api_v1_rpc_fleet_proto_enumTypes,
		MessageInfos:      file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes,
	}.Build()
	File_infra_unifiedfleet_api_v1_rpc_fleet_proto = out.File
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDesc = nil
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_goTypes = nil
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FleetClient is the client API for Fleet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FleetClient interface {
	// CreateChromePlatform creates a new chromePlatform.
	CreateChromePlatform(ctx context.Context, in *CreateChromePlatformRequest, opts ...grpc.CallOption) (*models.ChromePlatform, error)
	// Update updates the chromePlatform
	UpdateChromePlatform(ctx context.Context, in *UpdateChromePlatformRequest, opts ...grpc.CallOption) (*models.ChromePlatform, error)
	// Get retrieves the details of the chromePlatform
	GetChromePlatform(ctx context.Context, in *GetChromePlatformRequest, opts ...grpc.CallOption) (*models.ChromePlatform, error)
	// List gets all the chromePlatforms
	ListChromePlatforms(ctx context.Context, in *ListChromePlatformsRequest, opts ...grpc.CallOption) (*ListChromePlatformsResponse, error)
	// Delete delete the chromePlatform
	DeleteChromePlatform(ctx context.Context, in *DeleteChromePlatformRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ImportChromePlatforms imports chrome platforms.
	ImportChromePlatforms(ctx context.Context, in *ImportChromePlatformsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// List all the chrome osversions.
	ListOSVersions(ctx context.Context, in *ListOSVersionsRequest, opts ...grpc.CallOption) (*ListOSVersionsResponse, error)
	// ImportOSVersions imports the OS versions.
	ImportOSVersions(ctx context.Context, in *ImportOSVersionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// CreateMachineLSEPrototype creates a new MachineLSEPrototype.
	CreateMachineLSEPrototype(ctx context.Context, in *CreateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*models.MachineLSEPrototype, error)
	// Update updates the MachineLSEPrototype
	UpdateMachineLSEPrototype(ctx context.Context, in *UpdateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*models.MachineLSEPrototype, error)
	// Get retrieves the details of the MachineLSEPrototype
	GetMachineLSEPrototype(ctx context.Context, in *GetMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*models.MachineLSEPrototype, error)
	// List gets all the MachineLSEPrototypes
	ListMachineLSEPrototypes(ctx context.Context, in *ListMachineLSEPrototypesRequest, opts ...grpc.CallOption) (*ListMachineLSEPrototypesResponse, error)
	// Delete delete the MachineLSEPrototype
	DeleteMachineLSEPrototype(ctx context.Context, in *DeleteMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateRackLSEPrototype creates a new RackLSEPrototype.
	CreateRackLSEPrototype(ctx context.Context, in *CreateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*models.RackLSEPrototype, error)
	// Update updates the RackLSEPrototype
	UpdateRackLSEPrototype(ctx context.Context, in *UpdateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*models.RackLSEPrototype, error)
	// Get retrieves the details of the RackLSEPrototype
	GetRackLSEPrototype(ctx context.Context, in *GetRackLSEPrototypeRequest, opts ...grpc.CallOption) (*models.RackLSEPrototype, error)
	// List gets all the RackLSEPrototypes
	ListRackLSEPrototypes(ctx context.Context, in *ListRackLSEPrototypesRequest, opts ...grpc.CallOption) (*ListRackLSEPrototypesResponse, error)
	// Delete delete the RackLSEPrototype
	DeleteRackLSEPrototype(ctx context.Context, in *DeleteRackLSEPrototypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// MachineRegistration creates a new machine/nics/drac.
	MachineRegistration(ctx context.Context, in *MachineRegistrationRequest, opts ...grpc.CallOption) (*models.Machine, error)
	// Update updates the machine
	UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*models.Machine, error)
	// Get retrieves the details of the machine
	GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*models.Machine, error)
	// List gets all the machines
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
	// Delete delete the machine
	DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Import machines from sources
	//
	// This doesn't return google.longrunning.Operation as the corresponding
	// package is not imported into chops go package.
	ImportMachines(ctx context.Context, in *ImportMachinesRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Rename rename the machine
	RenameMachine(ctx context.Context, in *RenameMachineRequest, opts ...grpc.CallOption) (*models.Machine, error)
	// RackRegistration creates a new rack/kvms/rpms/switches
	RackRegistration(ctx context.Context, in *RackRegistrationRequest, opts ...grpc.CallOption) (*models.Rack, error)
	// Update updates the rack
	UpdateRack(ctx context.Context, in *UpdateRackRequest, opts ...grpc.CallOption) (*models.Rack, error)
	// Get retrieves the details of the rack
	GetRack(ctx context.Context, in *GetRackRequest, opts ...grpc.CallOption) (*models.Rack, error)
	// List gets all the racks
	ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error)
	// Delete delete the rack
	DeleteRack(ctx context.Context, in *DeleteRackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateMachineLSE creates a new machineLSE
	CreateMachineLSE(ctx context.Context, in *CreateMachineLSERequest, opts ...grpc.CallOption) (*models.MachineLSE, error)
	// Update updates the machineLSE
	UpdateMachineLSE(ctx context.Context, in *UpdateMachineLSERequest, opts ...grpc.CallOption) (*models.MachineLSE, error)
	// Get retrieves the details of the machineLSE
	GetMachineLSE(ctx context.Context, in *GetMachineLSERequest, opts ...grpc.CallOption) (*models.MachineLSE, error)
	// List gets all the machineLSEs
	ListMachineLSEs(ctx context.Context, in *ListMachineLSEsRequest, opts ...grpc.CallOption) (*ListMachineLSEsResponse, error)
	// Delete delete the machineLSE
	DeleteMachineLSE(ctx context.Context, in *DeleteMachineLSERequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Rename the machine lse
	RenameMachineLSE(ctx context.Context, in *RenameMachineLSERequest, opts ...grpc.CallOption) (*models.MachineLSE, error)
	// ImportMachineLSEs imports machine LSEs & all related infos.
	ImportMachineLSEs(ctx context.Context, in *ImportMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// ImportOSMachineLSEs imports ChromeOS machine LSEs & all related infos if needed.
	ImportOSMachineLSEs(ctx context.Context, in *ImportOSMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// CreateRackLSE creates a new rackLSE
	CreateRackLSE(ctx context.Context, in *CreateRackLSERequest, opts ...grpc.CallOption) (*models.RackLSE, error)
	// Update updates the rackLSE
	UpdateRackLSE(ctx context.Context, in *UpdateRackLSERequest, opts ...grpc.CallOption) (*models.RackLSE, error)
	// Get retrieves the details of the rackLSE
	GetRackLSE(ctx context.Context, in *GetRackLSERequest, opts ...grpc.CallOption) (*models.RackLSE, error)
	// List gets all the rackLSEs
	ListRackLSEs(ctx context.Context, in *ListRackLSEsRequest, opts ...grpc.CallOption) (*ListRackLSEsResponse, error)
	// Delete delete the rackLSE
	DeleteRackLSE(ctx context.Context, in *DeleteRackLSERequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateNic creates a new nic
	CreateNic(ctx context.Context, in *CreateNicRequest, opts ...grpc.CallOption) (*models.Nic, error)
	// Update updates the nic
	UpdateNic(ctx context.Context, in *UpdateNicRequest, opts ...grpc.CallOption) (*models.Nic, error)
	// Get retrieves the details of the nic
	GetNic(ctx context.Context, in *GetNicRequest, opts ...grpc.CallOption) (*models.Nic, error)
	// List gets all the nics
	ListNics(ctx context.Context, in *ListNicsRequest, opts ...grpc.CallOption) (*ListNicsResponse, error)
	// Delete delete the nic
	DeleteNic(ctx context.Context, in *DeleteNicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ImportNics imports nics info.
	ImportNics(ctx context.Context, in *ImportNicsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Rename rename the nic
	RenameNic(ctx context.Context, in *RenameNicRequest, opts ...grpc.CallOption) (*models.Nic, error)
	// ImportDatacenters imports datacenter & its related info, including kvm & switch.
	ImportDatacenters(ctx context.Context, in *ImportDatacentersRequest, opts ...grpc.CallOption) (*status.Status, error)
	// CreateKVM creates a new KVM
	CreateKVM(ctx context.Context, in *CreateKVMRequest, opts ...grpc.CallOption) (*models.KVM, error)
	// Update updates the KVM
	UpdateKVM(ctx context.Context, in *UpdateKVMRequest, opts ...grpc.CallOption) (*models.KVM, error)
	// Get retrieves the details of the KVM
	GetKVM(ctx context.Context, in *GetKVMRequest, opts ...grpc.CallOption) (*models.KVM, error)
	// List gets all the KVMs
	ListKVMs(ctx context.Context, in *ListKVMsRequest, opts ...grpc.CallOption) (*ListKVMsResponse, error)
	// Delete delete the KVM
	DeleteKVM(ctx context.Context, in *DeleteKVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateRPM creates a new RPM
	CreateRPM(ctx context.Context, in *CreateRPMRequest, opts ...grpc.CallOption) (*models.RPM, error)
	// Update updates the RPM
	UpdateRPM(ctx context.Context, in *UpdateRPMRequest, opts ...grpc.CallOption) (*models.RPM, error)
	// Get retrieves the details of the RPM
	GetRPM(ctx context.Context, in *GetRPMRequest, opts ...grpc.CallOption) (*models.RPM, error)
	// List gets all the RPMs
	ListRPMs(ctx context.Context, in *ListRPMsRequest, opts ...grpc.CallOption) (*ListRPMsResponse, error)
	// Delete delete the RPM
	DeleteRPM(ctx context.Context, in *DeleteRPMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateDrac creates a new drac
	CreateDrac(ctx context.Context, in *CreateDracRequest, opts ...grpc.CallOption) (*models.Drac, error)
	// Update updates the drac
	UpdateDrac(ctx context.Context, in *UpdateDracRequest, opts ...grpc.CallOption) (*models.Drac, error)
	// Get retrieves the details of the drac
	GetDrac(ctx context.Context, in *GetDracRequest, opts ...grpc.CallOption) (*models.Drac, error)
	// List gets all the dracs
	ListDracs(ctx context.Context, in *ListDracsRequest, opts ...grpc.CallOption) (*ListDracsResponse, error)
	// Delete delete the drac
	DeleteDrac(ctx context.Context, in *DeleteDracRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateSwitch creates a new switch
	CreateSwitch(ctx context.Context, in *CreateSwitchRequest, opts ...grpc.CallOption) (*models.Switch, error)
	// Update updates the switch
	UpdateSwitch(ctx context.Context, in *UpdateSwitchRequest, opts ...grpc.CallOption) (*models.Switch, error)
	// Get retrieves the details of the switch
	GetSwitch(ctx context.Context, in *GetSwitchRequest, opts ...grpc.CallOption) (*models.Switch, error)
	// List gets all the switches
	ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error)
	// Delete delete the switch
	DeleteSwitch(ctx context.Context, in *DeleteSwitchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Rename rename the switch
	RenameSwitch(ctx context.Context, in *RenameSwitchRequest, opts ...grpc.CallOption) (*models.Switch, error)
	// CreateVlan creates a new vlan
	CreateVlan(ctx context.Context, in *CreateVlanRequest, opts ...grpc.CallOption) (*models.Vlan, error)
	// Update updates the vlan
	UpdateVlan(ctx context.Context, in *UpdateVlanRequest, opts ...grpc.CallOption) (*models.Vlan, error)
	// Get retrieves the details of the vlan
	GetVlan(ctx context.Context, in *GetVlanRequest, opts ...grpc.CallOption) (*models.Vlan, error)
	// List gets all the vlans
	ListVlans(ctx context.Context, in *ListVlansRequest, opts ...grpc.CallOption) (*ListVlansResponse, error)
	// Delete delete the vlan
	DeleteVlan(ctx context.Context, in *DeleteVlanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ImportVlans imports vlans & all IP-related infos.
	ImportVlans(ctx context.Context, in *ImportVlansRequest, opts ...grpc.CallOption) (*status.Status, error)
	// ImportOSVlans imports the ChromeOS vlans, ips, and dhcp configs.
	ImportOSVlans(ctx context.Context, in *ImportOSVlansRequest, opts ...grpc.CallOption) (*status.Status, error)
	// ImportStates imports states of all objects.
	ImportStates(ctx context.Context, in *ImportStatesRequest, opts ...grpc.CallOption) (*status.Status, error)
	// UpdateState updates the state for a resource.
	// If the state doesn't exist before, it will create the state record for the resource.
	UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...grpc.CallOption) (*models.StateRecord, error)
	// GetState retrieves the state of a resource.
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*models.StateRecord, error)
	// GetDutState retrieves requested Chrome OS device DutState from UFS.
	GetDutState(ctx context.Context, in *GetDutStateRequest, opts ...grpc.CallOption) (*lab.DutState, error)
	// ListDutStates gets all the DutStates
	ListDutStates(ctx context.Context, in *ListDutStatesRequest, opts ...grpc.CallOption) (*ListDutStatesResponse, error)
	// UpdateDutState updates the state config for a DUT
	// If the dut state doesn't exist before, it will create the dut state record.
	UpdateDutState(ctx context.Context, in *UpdateDutStateRequest, opts ...grpc.CallOption) (*lab.DutState, error)
	// UpdateDeviceRecoveryData updates the device configs for a DUT
	UpdateDeviceRecoveryData(ctx context.Context, in *UpdateDeviceRecoveryDataRequest, opts ...grpc.CallOption) (*UpdateDeviceRecoveryDataResponse, error)
	// GetDHCPConfig retrieves a dhcp record.
	GetDHCPConfig(ctx context.Context, in *GetDHCPConfigRequest, opts ...grpc.CallOption) (*models.DHCPConfig, error)
	// CreateVM creates a new VM
	CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*models.VM, error)
	// UpdateVM updates a VM
	UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*models.VM, error)
	// DeleteVM delete a VM
	DeleteVM(ctx context.Context, in *DeleteVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetVM retrieves the details of the VM
	GetVM(ctx context.Context, in *GetVMRequest, opts ...grpc.CallOption) (*models.VM, error)
	// ListVMs gets all the Vms
	ListVMs(ctx context.Context, in *ListVMsRequest, opts ...grpc.CallOption) (*ListVMsResponse, error)
	// CreateAsset creates a new asset
	CreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*models.Asset, error)
	// Update updates the asset
	UpdateAsset(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*models.Asset, error)
	// Get retrieves the details of the asset
	GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*models.Asset, error)
	// List gets all the assets
	ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error)
	// Delete delete the asset
	DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Rename the asset
	RenameAsset(ctx context.Context, in *RenameAssetRequest, opts ...grpc.CallOption) (*models.Asset, error)
	// BatchGetKVMs retrieves a batch of kvms
	BatchGetKVMs(ctx context.Context, in *BatchGetKVMsRequest, opts ...grpc.CallOption) (*BatchGetKVMsResponse, error)
	// BatchGetDHCPConfigs retrieves a batch of dhcp records.
	BatchGetDHCPConfigs(ctx context.Context, in *BatchGetDHCPConfigsRequest, opts ...grpc.CallOption) (*BatchGetDHCPConfigsResponse, error)
	// BatchGetMachineLSEs retrieves a batch of machineLSEs
	BatchGetMachineLSEs(ctx context.Context, in *BatchGetMachineLSEsRequest, opts ...grpc.CallOption) (*BatchGetMachineLSEsResponse, error)
	// BatchGetMachines retrieves a batch of machines
	BatchGetMachines(ctx context.Context, in *BatchGetMachinesRequest, opts ...grpc.CallOption) (*BatchGetMachinesResponse, error)
	// BatchGetSwitches retrieves a batch of switches
	BatchGetSwitches(ctx context.Context, in *BatchGetSwitchesRequest, opts ...grpc.CallOption) (*BatchGetSwitchesResponse, error)
	// BatchGetRPMs retrieves a batch of rpms
	BatchGetRPMs(ctx context.Context, in *BatchGetRPMsRequest, opts ...grpc.CallOption) (*BatchGetRPMsResponse, error)
	// BatchGetDracs retrieves a batch of dracs
	BatchGetDracs(ctx context.Context, in *BatchGetDracsRequest, opts ...grpc.CallOption) (*BatchGetDracsResponse, error)
	// BatchGetNics retrieves a batch of nics
	BatchGetNics(ctx context.Context, in *BatchGetNicsRequest, opts ...grpc.CallOption) (*BatchGetNicsResponse, error)
	// BatchGetVMs retrieves a batch of vms
	BatchGetVMs(ctx context.Context, in *BatchGetVMsRequest, opts ...grpc.CallOption) (*BatchGetVMsResponse, error)
	// BatchGetVlans retrieves a batch of vlans
	BatchGetVlans(ctx context.Context, in *BatchGetVlansRequest, opts ...grpc.CallOption) (*BatchGetVlansResponse, error)
	// BatchGetRacks retrieves a batch of racks
	BatchGetRacks(ctx context.Context, in *BatchGetRacksRequest, opts ...grpc.CallOption) (*BatchGetRacksResponse, error)
	// BatchGetChromePlatforms retrieves a batch of chrome platforms
	BatchGetChromePlatforms(ctx context.Context, in *BatchGetChromePlatformsRequest, opts ...grpc.CallOption) (*BatchGetChromePlatformsResponse, error)
	// BatchGetMachineLSEPrototypes retrieves a batch of machine lse prototypes
	BatchGetMachineLSEPrototypes(ctx context.Context, in *BatchGetMachineLSEPrototypesRequest, opts ...grpc.CallOption) (*BatchGetMachineLSEPrototypesResponse, error)
	// BatchGetRackLSEPrototypes retrieves a batch of rack lse prototypes
	BatchGetRackLSEPrototypes(ctx context.Context, in *BatchGetRackLSEPrototypesRequest, opts ...grpc.CallOption) (*BatchGetRackLSEPrototypesResponse, error)
	// GetChromeOSDeviceData retrieves requested Chrome OS device data from the UFS and inventoryV2.
	GetChromeOSDeviceData(ctx context.Context, in *GetChromeOSDeviceDataRequest, opts ...grpc.CallOption) (*models.ChromeOSDeviceData, error)
	// CreateCachingService creates a new CachingService.
	CreateCachingService(ctx context.Context, in *CreateCachingServiceRequest, opts ...grpc.CallOption) (*models.CachingService, error)
	// Update updates the CachingService.
	UpdateCachingService(ctx context.Context, in *UpdateCachingServiceRequest, opts ...grpc.CallOption) (*models.CachingService, error)
	// Get retrieves the details of the CachingService.
	GetCachingService(ctx context.Context, in *GetCachingServiceRequest, opts ...grpc.CallOption) (*models.CachingService, error)
	// List gets all the CachingServices.
	ListCachingServices(ctx context.Context, in *ListCachingServicesRequest, opts ...grpc.CallOption) (*ListCachingServicesResponse, error)
	// Delete delete the CachingService.
	DeleteCachingService(ctx context.Context, in *DeleteCachingServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateMachineLSEDeployment updates a deployment record for a host.
	UpdateMachineLSEDeployment(ctx context.Context, in *UpdateMachineLSEDeploymentRequest, opts ...grpc.CallOption) (*models.MachineLSEDeployment, error)
	// BatchUpdateMachineLSEDeployment updates the deployment records for a batch of hosts.
	BatchUpdateMachineLSEDeployment(ctx context.Context, in *BatchUpdateMachineLSEDeploymentRequest, opts ...grpc.CallOption) (*BatchUpdateMachineLSEDeploymentResponse, error)
	// GetMachineLSEDeployment retrieves a deployment record for a given host identifier, e.g. serial number.
	GetMachineLSEDeployment(ctx context.Context, in *GetMachineLSEDeploymentRequest, opts ...grpc.CallOption) (*models.MachineLSEDeployment, error)
	// BatchGetMachineLSEDeployments retrieves a batch of deployment records.
	BatchGetMachineLSEDeployments(ctx context.Context, in *BatchGetMachineLSEDeploymentsRequest, opts ...grpc.CallOption) (*BatchGetMachineLSEDeploymentsResponse, error)
	// ListMachineLSEDeployments lists all deployment records which fulfill the requirements
	ListMachineLSEDeployments(ctx context.Context, in *ListMachineLSEDeploymentsRequest, opts ...grpc.CallOption) (*ListMachineLSEDeploymentsResponse, error)
	// CreateSchedulingUnit creates a new SchedulingUnit.
	CreateSchedulingUnit(ctx context.Context, in *CreateSchedulingUnitRequest, opts ...grpc.CallOption) (*models.SchedulingUnit, error)
	// Update updates the SchedulingUnit.
	UpdateSchedulingUnit(ctx context.Context, in *UpdateSchedulingUnitRequest, opts ...grpc.CallOption) (*models.SchedulingUnit, error)
	// Get retrieves the details of the SchedulingUnit.
	GetSchedulingUnit(ctx context.Context, in *GetSchedulingUnitRequest, opts ...grpc.CallOption) (*models.SchedulingUnit, error)
	// List gets all the SchedulingUnits.
	ListSchedulingUnits(ctx context.Context, in *ListSchedulingUnitsRequest, opts ...grpc.CallOption) (*ListSchedulingUnitsResponse, error)
	// Delete delete the SchedulingUnit.
	DeleteSchedulingUnit(ctx context.Context, in *DeleteSchedulingUnitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateConfigBundle updates the ConfigBundle
	UpdateConfigBundle(ctx context.Context, in *UpdateConfigBundleRequest, opts ...grpc.CallOption) (*UpdateConfigBundleResponse, error)
	// GetDeviceData retrieves requested device data from UFS.
	GetDeviceData(ctx context.Context, in *GetDeviceDataRequest, opts ...grpc.CallOption) (*GetDeviceDataResponse, error)
	// CheckFleetPolicyForTest checks whether a given test parameters indicate a valid test
	CheckFleetTestsPolicy(ctx context.Context, in *CheckFleetTestsPolicyRequest, opts ...grpc.CallOption) (*CheckFleetTestsPolicyResponse, error)
}
type fleetPRPCClient struct {
	client *prpc.Client
}

func NewFleetPRPCClient(client *prpc.Client) FleetClient {
	return &fleetPRPCClient{client}
}

func (c *fleetPRPCClient) CreateChromePlatform(ctx context.Context, in *CreateChromePlatformRequest, opts ...grpc.CallOption) (*models.ChromePlatform, error) {
	out := new(models.ChromePlatform)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateChromePlatform(ctx context.Context, in *UpdateChromePlatformRequest, opts ...grpc.CallOption) (*models.ChromePlatform, error) {
	out := new(models.ChromePlatform)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetChromePlatform(ctx context.Context, in *GetChromePlatformRequest, opts ...grpc.CallOption) (*models.ChromePlatform, error) {
	out := new(models.ChromePlatform)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListChromePlatforms(ctx context.Context, in *ListChromePlatformsRequest, opts ...grpc.CallOption) (*ListChromePlatformsResponse, error) {
	out := new(ListChromePlatformsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteChromePlatform(ctx context.Context, in *DeleteChromePlatformRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportChromePlatforms(ctx context.Context, in *ImportChromePlatformsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListOSVersions(ctx context.Context, in *ListOSVersionsRequest, opts ...grpc.CallOption) (*ListOSVersionsResponse, error) {
	out := new(ListOSVersionsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListOSVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportOSVersions(ctx context.Context, in *ImportOSVersionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportOSVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateMachineLSEPrototype(ctx context.Context, in *CreateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*models.MachineLSEPrototype, error) {
	out := new(models.MachineLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateMachineLSEPrototype(ctx context.Context, in *UpdateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*models.MachineLSEPrototype, error) {
	out := new(models.MachineLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetMachineLSEPrototype(ctx context.Context, in *GetMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*models.MachineLSEPrototype, error) {
	out := new(models.MachineLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListMachineLSEPrototypes(ctx context.Context, in *ListMachineLSEPrototypesRequest, opts ...grpc.CallOption) (*ListMachineLSEPrototypesResponse, error) {
	out := new(ListMachineLSEPrototypesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListMachineLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteMachineLSEPrototype(ctx context.Context, in *DeleteMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateRackLSEPrototype(ctx context.Context, in *CreateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*models.RackLSEPrototype, error) {
	out := new(models.RackLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateRackLSEPrototype(ctx context.Context, in *UpdateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*models.RackLSEPrototype, error) {
	out := new(models.RackLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetRackLSEPrototype(ctx context.Context, in *GetRackLSEPrototypeRequest, opts ...grpc.CallOption) (*models.RackLSEPrototype, error) {
	out := new(models.RackLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListRackLSEPrototypes(ctx context.Context, in *ListRackLSEPrototypesRequest, opts ...grpc.CallOption) (*ListRackLSEPrototypesResponse, error) {
	out := new(ListRackLSEPrototypesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListRackLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteRackLSEPrototype(ctx context.Context, in *DeleteRackLSEPrototypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) MachineRegistration(ctx context.Context, in *MachineRegistrationRequest, opts ...grpc.CallOption) (*models.Machine, error) {
	out := new(models.Machine)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "MachineRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*models.Machine, error) {
	out := new(models.Machine)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*models.Machine, error) {
	out := new(models.Machine)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportMachines(ctx context.Context, in *ImportMachinesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) RenameMachine(ctx context.Context, in *RenameMachineRequest, opts ...grpc.CallOption) (*models.Machine, error) {
	out := new(models.Machine)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "RenameMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) RackRegistration(ctx context.Context, in *RackRegistrationRequest, opts ...grpc.CallOption) (*models.Rack, error) {
	out := new(models.Rack)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "RackRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateRack(ctx context.Context, in *UpdateRackRequest, opts ...grpc.CallOption) (*models.Rack, error) {
	out := new(models.Rack)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetRack(ctx context.Context, in *GetRackRequest, opts ...grpc.CallOption) (*models.Rack, error) {
	out := new(models.Rack)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error) {
	out := new(ListRacksResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListRacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteRack(ctx context.Context, in *DeleteRackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateMachineLSE(ctx context.Context, in *CreateMachineLSERequest, opts ...grpc.CallOption) (*models.MachineLSE, error) {
	out := new(models.MachineLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateMachineLSE(ctx context.Context, in *UpdateMachineLSERequest, opts ...grpc.CallOption) (*models.MachineLSE, error) {
	out := new(models.MachineLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetMachineLSE(ctx context.Context, in *GetMachineLSERequest, opts ...grpc.CallOption) (*models.MachineLSE, error) {
	out := new(models.MachineLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListMachineLSEs(ctx context.Context, in *ListMachineLSEsRequest, opts ...grpc.CallOption) (*ListMachineLSEsResponse, error) {
	out := new(ListMachineLSEsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteMachineLSE(ctx context.Context, in *DeleteMachineLSERequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) RenameMachineLSE(ctx context.Context, in *RenameMachineLSERequest, opts ...grpc.CallOption) (*models.MachineLSE, error) {
	out := new(models.MachineLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "RenameMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportMachineLSEs(ctx context.Context, in *ImportMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportOSMachineLSEs(ctx context.Context, in *ImportOSMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportOSMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateRackLSE(ctx context.Context, in *CreateRackLSERequest, opts ...grpc.CallOption) (*models.RackLSE, error) {
	out := new(models.RackLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateRackLSE(ctx context.Context, in *UpdateRackLSERequest, opts ...grpc.CallOption) (*models.RackLSE, error) {
	out := new(models.RackLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetRackLSE(ctx context.Context, in *GetRackLSERequest, opts ...grpc.CallOption) (*models.RackLSE, error) {
	out := new(models.RackLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListRackLSEs(ctx context.Context, in *ListRackLSEsRequest, opts ...grpc.CallOption) (*ListRackLSEsResponse, error) {
	out := new(ListRackLSEsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListRackLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteRackLSE(ctx context.Context, in *DeleteRackLSERequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateNic(ctx context.Context, in *CreateNicRequest, opts ...grpc.CallOption) (*models.Nic, error) {
	out := new(models.Nic)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateNic(ctx context.Context, in *UpdateNicRequest, opts ...grpc.CallOption) (*models.Nic, error) {
	out := new(models.Nic)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetNic(ctx context.Context, in *GetNicRequest, opts ...grpc.CallOption) (*models.Nic, error) {
	out := new(models.Nic)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListNics(ctx context.Context, in *ListNicsRequest, opts ...grpc.CallOption) (*ListNicsResponse, error) {
	out := new(ListNicsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteNic(ctx context.Context, in *DeleteNicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportNics(ctx context.Context, in *ImportNicsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) RenameNic(ctx context.Context, in *RenameNicRequest, opts ...grpc.CallOption) (*models.Nic, error) {
	out := new(models.Nic)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "RenameNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportDatacenters(ctx context.Context, in *ImportDatacentersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportDatacenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateKVM(ctx context.Context, in *CreateKVMRequest, opts ...grpc.CallOption) (*models.KVM, error) {
	out := new(models.KVM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateKVM(ctx context.Context, in *UpdateKVMRequest, opts ...grpc.CallOption) (*models.KVM, error) {
	out := new(models.KVM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetKVM(ctx context.Context, in *GetKVMRequest, opts ...grpc.CallOption) (*models.KVM, error) {
	out := new(models.KVM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListKVMs(ctx context.Context, in *ListKVMsRequest, opts ...grpc.CallOption) (*ListKVMsResponse, error) {
	out := new(ListKVMsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListKVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteKVM(ctx context.Context, in *DeleteKVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateRPM(ctx context.Context, in *CreateRPMRequest, opts ...grpc.CallOption) (*models.RPM, error) {
	out := new(models.RPM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateRPM(ctx context.Context, in *UpdateRPMRequest, opts ...grpc.CallOption) (*models.RPM, error) {
	out := new(models.RPM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetRPM(ctx context.Context, in *GetRPMRequest, opts ...grpc.CallOption) (*models.RPM, error) {
	out := new(models.RPM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListRPMs(ctx context.Context, in *ListRPMsRequest, opts ...grpc.CallOption) (*ListRPMsResponse, error) {
	out := new(ListRPMsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListRPMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteRPM(ctx context.Context, in *DeleteRPMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateDrac(ctx context.Context, in *CreateDracRequest, opts ...grpc.CallOption) (*models.Drac, error) {
	out := new(models.Drac)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateDrac(ctx context.Context, in *UpdateDracRequest, opts ...grpc.CallOption) (*models.Drac, error) {
	out := new(models.Drac)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetDrac(ctx context.Context, in *GetDracRequest, opts ...grpc.CallOption) (*models.Drac, error) {
	out := new(models.Drac)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListDracs(ctx context.Context, in *ListDracsRequest, opts ...grpc.CallOption) (*ListDracsResponse, error) {
	out := new(ListDracsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListDracs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteDrac(ctx context.Context, in *DeleteDracRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateSwitch(ctx context.Context, in *CreateSwitchRequest, opts ...grpc.CallOption) (*models.Switch, error) {
	out := new(models.Switch)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateSwitch(ctx context.Context, in *UpdateSwitchRequest, opts ...grpc.CallOption) (*models.Switch, error) {
	out := new(models.Switch)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetSwitch(ctx context.Context, in *GetSwitchRequest, opts ...grpc.CallOption) (*models.Switch, error) {
	out := new(models.Switch)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error) {
	out := new(ListSwitchesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteSwitch(ctx context.Context, in *DeleteSwitchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) RenameSwitch(ctx context.Context, in *RenameSwitchRequest, opts ...grpc.CallOption) (*models.Switch, error) {
	out := new(models.Switch)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "RenameSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateVlan(ctx context.Context, in *CreateVlanRequest, opts ...grpc.CallOption) (*models.Vlan, error) {
	out := new(models.Vlan)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateVlan(ctx context.Context, in *UpdateVlanRequest, opts ...grpc.CallOption) (*models.Vlan, error) {
	out := new(models.Vlan)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetVlan(ctx context.Context, in *GetVlanRequest, opts ...grpc.CallOption) (*models.Vlan, error) {
	out := new(models.Vlan)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListVlans(ctx context.Context, in *ListVlansRequest, opts ...grpc.CallOption) (*ListVlansResponse, error) {
	out := new(ListVlansResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteVlan(ctx context.Context, in *DeleteVlanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportVlans(ctx context.Context, in *ImportVlansRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportOSVlans(ctx context.Context, in *ImportOSVlansRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportOSVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportStates(ctx context.Context, in *ImportStatesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...grpc.CallOption) (*models.StateRecord, error) {
	out := new(models.StateRecord)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*models.StateRecord, error) {
	out := new(models.StateRecord)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetDutState(ctx context.Context, in *GetDutStateRequest, opts ...grpc.CallOption) (*lab.DutState, error) {
	out := new(lab.DutState)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetDutState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListDutStates(ctx context.Context, in *ListDutStatesRequest, opts ...grpc.CallOption) (*ListDutStatesResponse, error) {
	out := new(ListDutStatesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListDutStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateDutState(ctx context.Context, in *UpdateDutStateRequest, opts ...grpc.CallOption) (*lab.DutState, error) {
	out := new(lab.DutState)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateDutState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateDeviceRecoveryData(ctx context.Context, in *UpdateDeviceRecoveryDataRequest, opts ...grpc.CallOption) (*UpdateDeviceRecoveryDataResponse, error) {
	out := new(UpdateDeviceRecoveryDataResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateDeviceRecoveryData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetDHCPConfig(ctx context.Context, in *GetDHCPConfigRequest, opts ...grpc.CallOption) (*models.DHCPConfig, error) {
	out := new(models.DHCPConfig)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetDHCPConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*models.VM, error) {
	out := new(models.VM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*models.VM, error) {
	out := new(models.VM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteVM(ctx context.Context, in *DeleteVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetVM(ctx context.Context, in *GetVMRequest, opts ...grpc.CallOption) (*models.VM, error) {
	out := new(models.VM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListVMs(ctx context.Context, in *ListVMsRequest, opts ...grpc.CallOption) (*ListVMsResponse, error) {
	out := new(ListVMsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*models.Asset, error) {
	out := new(models.Asset)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateAsset(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*models.Asset, error) {
	out := new(models.Asset)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*models.Asset, error) {
	out := new(models.Asset)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error) {
	out := new(ListAssetsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) RenameAsset(ctx context.Context, in *RenameAssetRequest, opts ...grpc.CallOption) (*models.Asset, error) {
	out := new(models.Asset)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "RenameAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchGetKVMs(ctx context.Context, in *BatchGetKVMsRequest, opts ...grpc.CallOption) (*BatchGetKVMsResponse, error) {
	out := new(BatchGetKVMsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchGetKVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchGetDHCPConfigs(ctx context.Context, in *BatchGetDHCPConfigsRequest, opts ...grpc.CallOption) (*BatchGetDHCPConfigsResponse, error) {
	out := new(BatchGetDHCPConfigsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchGetDHCPConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchGetMachineLSEs(ctx context.Context, in *BatchGetMachineLSEsRequest, opts ...grpc.CallOption) (*BatchGetMachineLSEsResponse, error) {
	out := new(BatchGetMachineLSEsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchGetMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchGetMachines(ctx context.Context, in *BatchGetMachinesRequest, opts ...grpc.CallOption) (*BatchGetMachinesResponse, error) {
	out := new(BatchGetMachinesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchGetMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchGetSwitches(ctx context.Context, in *BatchGetSwitchesRequest, opts ...grpc.CallOption) (*BatchGetSwitchesResponse, error) {
	out := new(BatchGetSwitchesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchGetSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchGetRPMs(ctx context.Context, in *BatchGetRPMsRequest, opts ...grpc.CallOption) (*BatchGetRPMsResponse, error) {
	out := new(BatchGetRPMsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchGetRPMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchGetDracs(ctx context.Context, in *BatchGetDracsRequest, opts ...grpc.CallOption) (*BatchGetDracsResponse, error) {
	out := new(BatchGetDracsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchGetDracs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchGetNics(ctx context.Context, in *BatchGetNicsRequest, opts ...grpc.CallOption) (*BatchGetNicsResponse, error) {
	out := new(BatchGetNicsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchGetNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchGetVMs(ctx context.Context, in *BatchGetVMsRequest, opts ...grpc.CallOption) (*BatchGetVMsResponse, error) {
	out := new(BatchGetVMsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchGetVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchGetVlans(ctx context.Context, in *BatchGetVlansRequest, opts ...grpc.CallOption) (*BatchGetVlansResponse, error) {
	out := new(BatchGetVlansResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchGetVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchGetRacks(ctx context.Context, in *BatchGetRacksRequest, opts ...grpc.CallOption) (*BatchGetRacksResponse, error) {
	out := new(BatchGetRacksResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchGetRacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchGetChromePlatforms(ctx context.Context, in *BatchGetChromePlatformsRequest, opts ...grpc.CallOption) (*BatchGetChromePlatformsResponse, error) {
	out := new(BatchGetChromePlatformsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchGetChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchGetMachineLSEPrototypes(ctx context.Context, in *BatchGetMachineLSEPrototypesRequest, opts ...grpc.CallOption) (*BatchGetMachineLSEPrototypesResponse, error) {
	out := new(BatchGetMachineLSEPrototypesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchGetMachineLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchGetRackLSEPrototypes(ctx context.Context, in *BatchGetRackLSEPrototypesRequest, opts ...grpc.CallOption) (*BatchGetRackLSEPrototypesResponse, error) {
	out := new(BatchGetRackLSEPrototypesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchGetRackLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetChromeOSDeviceData(ctx context.Context, in *GetChromeOSDeviceDataRequest, opts ...grpc.CallOption) (*models.ChromeOSDeviceData, error) {
	out := new(models.ChromeOSDeviceData)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetChromeOSDeviceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateCachingService(ctx context.Context, in *CreateCachingServiceRequest, opts ...grpc.CallOption) (*models.CachingService, error) {
	out := new(models.CachingService)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateCachingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateCachingService(ctx context.Context, in *UpdateCachingServiceRequest, opts ...grpc.CallOption) (*models.CachingService, error) {
	out := new(models.CachingService)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateCachingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetCachingService(ctx context.Context, in *GetCachingServiceRequest, opts ...grpc.CallOption) (*models.CachingService, error) {
	out := new(models.CachingService)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetCachingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListCachingServices(ctx context.Context, in *ListCachingServicesRequest, opts ...grpc.CallOption) (*ListCachingServicesResponse, error) {
	out := new(ListCachingServicesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListCachingServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteCachingService(ctx context.Context, in *DeleteCachingServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteCachingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateMachineLSEDeployment(ctx context.Context, in *UpdateMachineLSEDeploymentRequest, opts ...grpc.CallOption) (*models.MachineLSEDeployment, error) {
	out := new(models.MachineLSEDeployment)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateMachineLSEDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchUpdateMachineLSEDeployment(ctx context.Context, in *BatchUpdateMachineLSEDeploymentRequest, opts ...grpc.CallOption) (*BatchUpdateMachineLSEDeploymentResponse, error) {
	out := new(BatchUpdateMachineLSEDeploymentResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchUpdateMachineLSEDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetMachineLSEDeployment(ctx context.Context, in *GetMachineLSEDeploymentRequest, opts ...grpc.CallOption) (*models.MachineLSEDeployment, error) {
	out := new(models.MachineLSEDeployment)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetMachineLSEDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) BatchGetMachineLSEDeployments(ctx context.Context, in *BatchGetMachineLSEDeploymentsRequest, opts ...grpc.CallOption) (*BatchGetMachineLSEDeploymentsResponse, error) {
	out := new(BatchGetMachineLSEDeploymentsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "BatchGetMachineLSEDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListMachineLSEDeployments(ctx context.Context, in *ListMachineLSEDeploymentsRequest, opts ...grpc.CallOption) (*ListMachineLSEDeploymentsResponse, error) {
	out := new(ListMachineLSEDeploymentsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListMachineLSEDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateSchedulingUnit(ctx context.Context, in *CreateSchedulingUnitRequest, opts ...grpc.CallOption) (*models.SchedulingUnit, error) {
	out := new(models.SchedulingUnit)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateSchedulingUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateSchedulingUnit(ctx context.Context, in *UpdateSchedulingUnitRequest, opts ...grpc.CallOption) (*models.SchedulingUnit, error) {
	out := new(models.SchedulingUnit)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateSchedulingUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetSchedulingUnit(ctx context.Context, in *GetSchedulingUnitRequest, opts ...grpc.CallOption) (*models.SchedulingUnit, error) {
	out := new(models.SchedulingUnit)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetSchedulingUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListSchedulingUnits(ctx context.Context, in *ListSchedulingUnitsRequest, opts ...grpc.CallOption) (*ListSchedulingUnitsResponse, error) {
	out := new(ListSchedulingUnitsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListSchedulingUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteSchedulingUnit(ctx context.Context, in *DeleteSchedulingUnitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteSchedulingUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateConfigBundle(ctx context.Context, in *UpdateConfigBundleRequest, opts ...grpc.CallOption) (*UpdateConfigBundleResponse, error) {
	out := new(UpdateConfigBundleResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateConfigBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetDeviceData(ctx context.Context, in *GetDeviceDataRequest, opts ...grpc.CallOption) (*GetDeviceDataResponse, error) {
	out := new(GetDeviceDataResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetDeviceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CheckFleetTestsPolicy(ctx context.Context, in *CheckFleetTestsPolicyRequest, opts ...grpc.CallOption) (*CheckFleetTestsPolicyResponse, error) {
	out := new(CheckFleetTestsPolicyResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CheckFleetTestsPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type fleetClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetClient(cc grpc.ClientConnInterface) FleetClient {
	return &fleetClient{cc}
}

func (c *fleetClient) CreateChromePlatform(ctx context.Context, in *CreateChromePlatformRequest, opts ...grpc.CallOption) (*models.ChromePlatform, error) {
	out := new(models.ChromePlatform)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateChromePlatform(ctx context.Context, in *UpdateChromePlatformRequest, opts ...grpc.CallOption) (*models.ChromePlatform, error) {
	out := new(models.ChromePlatform)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetChromePlatform(ctx context.Context, in *GetChromePlatformRequest, opts ...grpc.CallOption) (*models.ChromePlatform, error) {
	out := new(models.ChromePlatform)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListChromePlatforms(ctx context.Context, in *ListChromePlatformsRequest, opts ...grpc.CallOption) (*ListChromePlatformsResponse, error) {
	out := new(ListChromePlatformsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteChromePlatform(ctx context.Context, in *DeleteChromePlatformRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportChromePlatforms(ctx context.Context, in *ImportChromePlatformsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListOSVersions(ctx context.Context, in *ListOSVersionsRequest, opts ...grpc.CallOption) (*ListOSVersionsResponse, error) {
	out := new(ListOSVersionsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListOSVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportOSVersions(ctx context.Context, in *ImportOSVersionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportOSVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateMachineLSEPrototype(ctx context.Context, in *CreateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*models.MachineLSEPrototype, error) {
	out := new(models.MachineLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateMachineLSEPrototype(ctx context.Context, in *UpdateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*models.MachineLSEPrototype, error) {
	out := new(models.MachineLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetMachineLSEPrototype(ctx context.Context, in *GetMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*models.MachineLSEPrototype, error) {
	out := new(models.MachineLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListMachineLSEPrototypes(ctx context.Context, in *ListMachineLSEPrototypesRequest, opts ...grpc.CallOption) (*ListMachineLSEPrototypesResponse, error) {
	out := new(ListMachineLSEPrototypesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteMachineLSEPrototype(ctx context.Context, in *DeleteMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateRackLSEPrototype(ctx context.Context, in *CreateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*models.RackLSEPrototype, error) {
	out := new(models.RackLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateRackLSEPrototype(ctx context.Context, in *UpdateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*models.RackLSEPrototype, error) {
	out := new(models.RackLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetRackLSEPrototype(ctx context.Context, in *GetRackLSEPrototypeRequest, opts ...grpc.CallOption) (*models.RackLSEPrototype, error) {
	out := new(models.RackLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListRackLSEPrototypes(ctx context.Context, in *ListRackLSEPrototypesRequest, opts ...grpc.CallOption) (*ListRackLSEPrototypesResponse, error) {
	out := new(ListRackLSEPrototypesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListRackLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteRackLSEPrototype(ctx context.Context, in *DeleteRackLSEPrototypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) MachineRegistration(ctx context.Context, in *MachineRegistrationRequest, opts ...grpc.CallOption) (*models.Machine, error) {
	out := new(models.Machine)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/MachineRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*models.Machine, error) {
	out := new(models.Machine)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*models.Machine, error) {
	out := new(models.Machine)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportMachines(ctx context.Context, in *ImportMachinesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) RenameMachine(ctx context.Context, in *RenameMachineRequest, opts ...grpc.CallOption) (*models.Machine, error) {
	out := new(models.Machine)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/RenameMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) RackRegistration(ctx context.Context, in *RackRegistrationRequest, opts ...grpc.CallOption) (*models.Rack, error) {
	out := new(models.Rack)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/RackRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateRack(ctx context.Context, in *UpdateRackRequest, opts ...grpc.CallOption) (*models.Rack, error) {
	out := new(models.Rack)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetRack(ctx context.Context, in *GetRackRequest, opts ...grpc.CallOption) (*models.Rack, error) {
	out := new(models.Rack)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error) {
	out := new(ListRacksResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListRacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteRack(ctx context.Context, in *DeleteRackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateMachineLSE(ctx context.Context, in *CreateMachineLSERequest, opts ...grpc.CallOption) (*models.MachineLSE, error) {
	out := new(models.MachineLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateMachineLSE(ctx context.Context, in *UpdateMachineLSERequest, opts ...grpc.CallOption) (*models.MachineLSE, error) {
	out := new(models.MachineLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetMachineLSE(ctx context.Context, in *GetMachineLSERequest, opts ...grpc.CallOption) (*models.MachineLSE, error) {
	out := new(models.MachineLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListMachineLSEs(ctx context.Context, in *ListMachineLSEsRequest, opts ...grpc.CallOption) (*ListMachineLSEsResponse, error) {
	out := new(ListMachineLSEsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteMachineLSE(ctx context.Context, in *DeleteMachineLSERequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) RenameMachineLSE(ctx context.Context, in *RenameMachineLSERequest, opts ...grpc.CallOption) (*models.MachineLSE, error) {
	out := new(models.MachineLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/RenameMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportMachineLSEs(ctx context.Context, in *ImportMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportOSMachineLSEs(ctx context.Context, in *ImportOSMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportOSMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateRackLSE(ctx context.Context, in *CreateRackLSERequest, opts ...grpc.CallOption) (*models.RackLSE, error) {
	out := new(models.RackLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateRackLSE(ctx context.Context, in *UpdateRackLSERequest, opts ...grpc.CallOption) (*models.RackLSE, error) {
	out := new(models.RackLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetRackLSE(ctx context.Context, in *GetRackLSERequest, opts ...grpc.CallOption) (*models.RackLSE, error) {
	out := new(models.RackLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListRackLSEs(ctx context.Context, in *ListRackLSEsRequest, opts ...grpc.CallOption) (*ListRackLSEsResponse, error) {
	out := new(ListRackLSEsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListRackLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteRackLSE(ctx context.Context, in *DeleteRackLSERequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateNic(ctx context.Context, in *CreateNicRequest, opts ...grpc.CallOption) (*models.Nic, error) {
	out := new(models.Nic)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateNic(ctx context.Context, in *UpdateNicRequest, opts ...grpc.CallOption) (*models.Nic, error) {
	out := new(models.Nic)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetNic(ctx context.Context, in *GetNicRequest, opts ...grpc.CallOption) (*models.Nic, error) {
	out := new(models.Nic)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListNics(ctx context.Context, in *ListNicsRequest, opts ...grpc.CallOption) (*ListNicsResponse, error) {
	out := new(ListNicsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteNic(ctx context.Context, in *DeleteNicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportNics(ctx context.Context, in *ImportNicsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) RenameNic(ctx context.Context, in *RenameNicRequest, opts ...grpc.CallOption) (*models.Nic, error) {
	out := new(models.Nic)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/RenameNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportDatacenters(ctx context.Context, in *ImportDatacentersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportDatacenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateKVM(ctx context.Context, in *CreateKVMRequest, opts ...grpc.CallOption) (*models.KVM, error) {
	out := new(models.KVM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateKVM(ctx context.Context, in *UpdateKVMRequest, opts ...grpc.CallOption) (*models.KVM, error) {
	out := new(models.KVM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetKVM(ctx context.Context, in *GetKVMRequest, opts ...grpc.CallOption) (*models.KVM, error) {
	out := new(models.KVM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListKVMs(ctx context.Context, in *ListKVMsRequest, opts ...grpc.CallOption) (*ListKVMsResponse, error) {
	out := new(ListKVMsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListKVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteKVM(ctx context.Context, in *DeleteKVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateRPM(ctx context.Context, in *CreateRPMRequest, opts ...grpc.CallOption) (*models.RPM, error) {
	out := new(models.RPM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateRPM(ctx context.Context, in *UpdateRPMRequest, opts ...grpc.CallOption) (*models.RPM, error) {
	out := new(models.RPM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetRPM(ctx context.Context, in *GetRPMRequest, opts ...grpc.CallOption) (*models.RPM, error) {
	out := new(models.RPM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListRPMs(ctx context.Context, in *ListRPMsRequest, opts ...grpc.CallOption) (*ListRPMsResponse, error) {
	out := new(ListRPMsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListRPMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteRPM(ctx context.Context, in *DeleteRPMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateDrac(ctx context.Context, in *CreateDracRequest, opts ...grpc.CallOption) (*models.Drac, error) {
	out := new(models.Drac)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateDrac(ctx context.Context, in *UpdateDracRequest, opts ...grpc.CallOption) (*models.Drac, error) {
	out := new(models.Drac)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetDrac(ctx context.Context, in *GetDracRequest, opts ...grpc.CallOption) (*models.Drac, error) {
	out := new(models.Drac)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListDracs(ctx context.Context, in *ListDracsRequest, opts ...grpc.CallOption) (*ListDracsResponse, error) {
	out := new(ListDracsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListDracs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteDrac(ctx context.Context, in *DeleteDracRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateSwitch(ctx context.Context, in *CreateSwitchRequest, opts ...grpc.CallOption) (*models.Switch, error) {
	out := new(models.Switch)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateSwitch(ctx context.Context, in *UpdateSwitchRequest, opts ...grpc.CallOption) (*models.Switch, error) {
	out := new(models.Switch)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetSwitch(ctx context.Context, in *GetSwitchRequest, opts ...grpc.CallOption) (*models.Switch, error) {
	out := new(models.Switch)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error) {
	out := new(ListSwitchesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteSwitch(ctx context.Context, in *DeleteSwitchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) RenameSwitch(ctx context.Context, in *RenameSwitchRequest, opts ...grpc.CallOption) (*models.Switch, error) {
	out := new(models.Switch)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/RenameSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateVlan(ctx context.Context, in *CreateVlanRequest, opts ...grpc.CallOption) (*models.Vlan, error) {
	out := new(models.Vlan)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateVlan(ctx context.Context, in *UpdateVlanRequest, opts ...grpc.CallOption) (*models.Vlan, error) {
	out := new(models.Vlan)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetVlan(ctx context.Context, in *GetVlanRequest, opts ...grpc.CallOption) (*models.Vlan, error) {
	out := new(models.Vlan)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListVlans(ctx context.Context, in *ListVlansRequest, opts ...grpc.CallOption) (*ListVlansResponse, error) {
	out := new(ListVlansResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteVlan(ctx context.Context, in *DeleteVlanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportVlans(ctx context.Context, in *ImportVlansRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportOSVlans(ctx context.Context, in *ImportOSVlansRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportOSVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportStates(ctx context.Context, in *ImportStatesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...grpc.CallOption) (*models.StateRecord, error) {
	out := new(models.StateRecord)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*models.StateRecord, error) {
	out := new(models.StateRecord)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetDutState(ctx context.Context, in *GetDutStateRequest, opts ...grpc.CallOption) (*lab.DutState, error) {
	out := new(lab.DutState)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetDutState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListDutStates(ctx context.Context, in *ListDutStatesRequest, opts ...grpc.CallOption) (*ListDutStatesResponse, error) {
	out := new(ListDutStatesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListDutStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateDutState(ctx context.Context, in *UpdateDutStateRequest, opts ...grpc.CallOption) (*lab.DutState, error) {
	out := new(lab.DutState)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateDutState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateDeviceRecoveryData(ctx context.Context, in *UpdateDeviceRecoveryDataRequest, opts ...grpc.CallOption) (*UpdateDeviceRecoveryDataResponse, error) {
	out := new(UpdateDeviceRecoveryDataResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateDeviceRecoveryData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetDHCPConfig(ctx context.Context, in *GetDHCPConfigRequest, opts ...grpc.CallOption) (*models.DHCPConfig, error) {
	out := new(models.DHCPConfig)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetDHCPConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*models.VM, error) {
	out := new(models.VM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*models.VM, error) {
	out := new(models.VM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteVM(ctx context.Context, in *DeleteVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetVM(ctx context.Context, in *GetVMRequest, opts ...grpc.CallOption) (*models.VM, error) {
	out := new(models.VM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListVMs(ctx context.Context, in *ListVMsRequest, opts ...grpc.CallOption) (*ListVMsResponse, error) {
	out := new(ListVMsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*models.Asset, error) {
	out := new(models.Asset)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateAsset(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*models.Asset, error) {
	out := new(models.Asset)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*models.Asset, error) {
	out := new(models.Asset)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error) {
	out := new(ListAssetsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) RenameAsset(ctx context.Context, in *RenameAssetRequest, opts ...grpc.CallOption) (*models.Asset, error) {
	out := new(models.Asset)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/RenameAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchGetKVMs(ctx context.Context, in *BatchGetKVMsRequest, opts ...grpc.CallOption) (*BatchGetKVMsResponse, error) {
	out := new(BatchGetKVMsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchGetKVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchGetDHCPConfigs(ctx context.Context, in *BatchGetDHCPConfigsRequest, opts ...grpc.CallOption) (*BatchGetDHCPConfigsResponse, error) {
	out := new(BatchGetDHCPConfigsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchGetDHCPConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchGetMachineLSEs(ctx context.Context, in *BatchGetMachineLSEsRequest, opts ...grpc.CallOption) (*BatchGetMachineLSEsResponse, error) {
	out := new(BatchGetMachineLSEsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchGetMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchGetMachines(ctx context.Context, in *BatchGetMachinesRequest, opts ...grpc.CallOption) (*BatchGetMachinesResponse, error) {
	out := new(BatchGetMachinesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchGetMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchGetSwitches(ctx context.Context, in *BatchGetSwitchesRequest, opts ...grpc.CallOption) (*BatchGetSwitchesResponse, error) {
	out := new(BatchGetSwitchesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchGetSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchGetRPMs(ctx context.Context, in *BatchGetRPMsRequest, opts ...grpc.CallOption) (*BatchGetRPMsResponse, error) {
	out := new(BatchGetRPMsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchGetRPMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchGetDracs(ctx context.Context, in *BatchGetDracsRequest, opts ...grpc.CallOption) (*BatchGetDracsResponse, error) {
	out := new(BatchGetDracsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchGetDracs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchGetNics(ctx context.Context, in *BatchGetNicsRequest, opts ...grpc.CallOption) (*BatchGetNicsResponse, error) {
	out := new(BatchGetNicsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchGetNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchGetVMs(ctx context.Context, in *BatchGetVMsRequest, opts ...grpc.CallOption) (*BatchGetVMsResponse, error) {
	out := new(BatchGetVMsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchGetVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchGetVlans(ctx context.Context, in *BatchGetVlansRequest, opts ...grpc.CallOption) (*BatchGetVlansResponse, error) {
	out := new(BatchGetVlansResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchGetVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchGetRacks(ctx context.Context, in *BatchGetRacksRequest, opts ...grpc.CallOption) (*BatchGetRacksResponse, error) {
	out := new(BatchGetRacksResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchGetRacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchGetChromePlatforms(ctx context.Context, in *BatchGetChromePlatformsRequest, opts ...grpc.CallOption) (*BatchGetChromePlatformsResponse, error) {
	out := new(BatchGetChromePlatformsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchGetChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchGetMachineLSEPrototypes(ctx context.Context, in *BatchGetMachineLSEPrototypesRequest, opts ...grpc.CallOption) (*BatchGetMachineLSEPrototypesResponse, error) {
	out := new(BatchGetMachineLSEPrototypesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchGetMachineLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchGetRackLSEPrototypes(ctx context.Context, in *BatchGetRackLSEPrototypesRequest, opts ...grpc.CallOption) (*BatchGetRackLSEPrototypesResponse, error) {
	out := new(BatchGetRackLSEPrototypesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchGetRackLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetChromeOSDeviceData(ctx context.Context, in *GetChromeOSDeviceDataRequest, opts ...grpc.CallOption) (*models.ChromeOSDeviceData, error) {
	out := new(models.ChromeOSDeviceData)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetChromeOSDeviceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateCachingService(ctx context.Context, in *CreateCachingServiceRequest, opts ...grpc.CallOption) (*models.CachingService, error) {
	out := new(models.CachingService)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateCachingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateCachingService(ctx context.Context, in *UpdateCachingServiceRequest, opts ...grpc.CallOption) (*models.CachingService, error) {
	out := new(models.CachingService)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateCachingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetCachingService(ctx context.Context, in *GetCachingServiceRequest, opts ...grpc.CallOption) (*models.CachingService, error) {
	out := new(models.CachingService)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetCachingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListCachingServices(ctx context.Context, in *ListCachingServicesRequest, opts ...grpc.CallOption) (*ListCachingServicesResponse, error) {
	out := new(ListCachingServicesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListCachingServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteCachingService(ctx context.Context, in *DeleteCachingServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteCachingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateMachineLSEDeployment(ctx context.Context, in *UpdateMachineLSEDeploymentRequest, opts ...grpc.CallOption) (*models.MachineLSEDeployment, error) {
	out := new(models.MachineLSEDeployment)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSEDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchUpdateMachineLSEDeployment(ctx context.Context, in *BatchUpdateMachineLSEDeploymentRequest, opts ...grpc.CallOption) (*BatchUpdateMachineLSEDeploymentResponse, error) {
	out := new(BatchUpdateMachineLSEDeploymentResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchUpdateMachineLSEDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetMachineLSEDeployment(ctx context.Context, in *GetMachineLSEDeploymentRequest, opts ...grpc.CallOption) (*models.MachineLSEDeployment, error) {
	out := new(models.MachineLSEDeployment)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSEDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) BatchGetMachineLSEDeployments(ctx context.Context, in *BatchGetMachineLSEDeploymentsRequest, opts ...grpc.CallOption) (*BatchGetMachineLSEDeploymentsResponse, error) {
	out := new(BatchGetMachineLSEDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/BatchGetMachineLSEDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListMachineLSEDeployments(ctx context.Context, in *ListMachineLSEDeploymentsRequest, opts ...grpc.CallOption) (*ListMachineLSEDeploymentsResponse, error) {
	out := new(ListMachineLSEDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateSchedulingUnit(ctx context.Context, in *CreateSchedulingUnitRequest, opts ...grpc.CallOption) (*models.SchedulingUnit, error) {
	out := new(models.SchedulingUnit)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateSchedulingUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateSchedulingUnit(ctx context.Context, in *UpdateSchedulingUnitRequest, opts ...grpc.CallOption) (*models.SchedulingUnit, error) {
	out := new(models.SchedulingUnit)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateSchedulingUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetSchedulingUnit(ctx context.Context, in *GetSchedulingUnitRequest, opts ...grpc.CallOption) (*models.SchedulingUnit, error) {
	out := new(models.SchedulingUnit)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetSchedulingUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListSchedulingUnits(ctx context.Context, in *ListSchedulingUnitsRequest, opts ...grpc.CallOption) (*ListSchedulingUnitsResponse, error) {
	out := new(ListSchedulingUnitsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListSchedulingUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteSchedulingUnit(ctx context.Context, in *DeleteSchedulingUnitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteSchedulingUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateConfigBundle(ctx context.Context, in *UpdateConfigBundleRequest, opts ...grpc.CallOption) (*UpdateConfigBundleResponse, error) {
	out := new(UpdateConfigBundleResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateConfigBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetDeviceData(ctx context.Context, in *GetDeviceDataRequest, opts ...grpc.CallOption) (*GetDeviceDataResponse, error) {
	out := new(GetDeviceDataResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetDeviceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CheckFleetTestsPolicy(ctx context.Context, in *CheckFleetTestsPolicyRequest, opts ...grpc.CallOption) (*CheckFleetTestsPolicyResponse, error) {
	out := new(CheckFleetTestsPolicyResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CheckFleetTestsPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetServer is the server API for Fleet service.
type FleetServer interface {
	// CreateChromePlatform creates a new chromePlatform.
	CreateChromePlatform(context.Context, *CreateChromePlatformRequest) (*models.ChromePlatform, error)
	// Update updates the chromePlatform
	UpdateChromePlatform(context.Context, *UpdateChromePlatformRequest) (*models.ChromePlatform, error)
	// Get retrieves the details of the chromePlatform
	GetChromePlatform(context.Context, *GetChromePlatformRequest) (*models.ChromePlatform, error)
	// List gets all the chromePlatforms
	ListChromePlatforms(context.Context, *ListChromePlatformsRequest) (*ListChromePlatformsResponse, error)
	// Delete delete the chromePlatform
	DeleteChromePlatform(context.Context, *DeleteChromePlatformRequest) (*emptypb.Empty, error)
	// ImportChromePlatforms imports chrome platforms.
	ImportChromePlatforms(context.Context, *ImportChromePlatformsRequest) (*status.Status, error)
	// List all the chrome osversions.
	ListOSVersions(context.Context, *ListOSVersionsRequest) (*ListOSVersionsResponse, error)
	// ImportOSVersions imports the OS versions.
	ImportOSVersions(context.Context, *ImportOSVersionsRequest) (*status.Status, error)
	// CreateMachineLSEPrototype creates a new MachineLSEPrototype.
	CreateMachineLSEPrototype(context.Context, *CreateMachineLSEPrototypeRequest) (*models.MachineLSEPrototype, error)
	// Update updates the MachineLSEPrototype
	UpdateMachineLSEPrototype(context.Context, *UpdateMachineLSEPrototypeRequest) (*models.MachineLSEPrototype, error)
	// Get retrieves the details of the MachineLSEPrototype
	GetMachineLSEPrototype(context.Context, *GetMachineLSEPrototypeRequest) (*models.MachineLSEPrototype, error)
	// List gets all the MachineLSEPrototypes
	ListMachineLSEPrototypes(context.Context, *ListMachineLSEPrototypesRequest) (*ListMachineLSEPrototypesResponse, error)
	// Delete delete the MachineLSEPrototype
	DeleteMachineLSEPrototype(context.Context, *DeleteMachineLSEPrototypeRequest) (*emptypb.Empty, error)
	// CreateRackLSEPrototype creates a new RackLSEPrototype.
	CreateRackLSEPrototype(context.Context, *CreateRackLSEPrototypeRequest) (*models.RackLSEPrototype, error)
	// Update updates the RackLSEPrototype
	UpdateRackLSEPrototype(context.Context, *UpdateRackLSEPrototypeRequest) (*models.RackLSEPrototype, error)
	// Get retrieves the details of the RackLSEPrototype
	GetRackLSEPrototype(context.Context, *GetRackLSEPrototypeRequest) (*models.RackLSEPrototype, error)
	// List gets all the RackLSEPrototypes
	ListRackLSEPrototypes(context.Context, *ListRackLSEPrototypesRequest) (*ListRackLSEPrototypesResponse, error)
	// Delete delete the RackLSEPrototype
	DeleteRackLSEPrototype(context.Context, *DeleteRackLSEPrototypeRequest) (*emptypb.Empty, error)
	// MachineRegistration creates a new machine/nics/drac.
	MachineRegistration(context.Context, *MachineRegistrationRequest) (*models.Machine, error)
	// Update updates the machine
	UpdateMachine(context.Context, *UpdateMachineRequest) (*models.Machine, error)
	// Get retrieves the details of the machine
	GetMachine(context.Context, *GetMachineRequest) (*models.Machine, error)
	// List gets all the machines
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
	// Delete delete the machine
	DeleteMachine(context.Context, *DeleteMachineRequest) (*emptypb.Empty, error)
	// Import machines from sources
	//
	// This doesn't return google.longrunning.Operation as the corresponding
	// package is not imported into chops go package.
	ImportMachines(context.Context, *ImportMachinesRequest) (*status.Status, error)
	// Rename rename the machine
	RenameMachine(context.Context, *RenameMachineRequest) (*models.Machine, error)
	// RackRegistration creates a new rack/kvms/rpms/switches
	RackRegistration(context.Context, *RackRegistrationRequest) (*models.Rack, error)
	// Update updates the rack
	UpdateRack(context.Context, *UpdateRackRequest) (*models.Rack, error)
	// Get retrieves the details of the rack
	GetRack(context.Context, *GetRackRequest) (*models.Rack, error)
	// List gets all the racks
	ListRacks(context.Context, *ListRacksRequest) (*ListRacksResponse, error)
	// Delete delete the rack
	DeleteRack(context.Context, *DeleteRackRequest) (*emptypb.Empty, error)
	// CreateMachineLSE creates a new machineLSE
	CreateMachineLSE(context.Context, *CreateMachineLSERequest) (*models.MachineLSE, error)
	// Update updates the machineLSE
	UpdateMachineLSE(context.Context, *UpdateMachineLSERequest) (*models.MachineLSE, error)
	// Get retrieves the details of the machineLSE
	GetMachineLSE(context.Context, *GetMachineLSERequest) (*models.MachineLSE, error)
	// List gets all the machineLSEs
	ListMachineLSEs(context.Context, *ListMachineLSEsRequest) (*ListMachineLSEsResponse, error)
	// Delete delete the machineLSE
	DeleteMachineLSE(context.Context, *DeleteMachineLSERequest) (*emptypb.Empty, error)
	// Rename the machine lse
	RenameMachineLSE(context.Context, *RenameMachineLSERequest) (*models.MachineLSE, error)
	// ImportMachineLSEs imports machine LSEs & all related infos.
	ImportMachineLSEs(context.Context, *ImportMachineLSEsRequest) (*status.Status, error)
	// ImportOSMachineLSEs imports ChromeOS machine LSEs & all related infos if needed.
	ImportOSMachineLSEs(context.Context, *ImportOSMachineLSEsRequest) (*status.Status, error)
	// CreateRackLSE creates a new rackLSE
	CreateRackLSE(context.Context, *CreateRackLSERequest) (*models.RackLSE, error)
	// Update updates the rackLSE
	UpdateRackLSE(context.Context, *UpdateRackLSERequest) (*models.RackLSE, error)
	// Get retrieves the details of the rackLSE
	GetRackLSE(context.Context, *GetRackLSERequest) (*models.RackLSE, error)
	// List gets all the rackLSEs
	ListRackLSEs(context.Context, *ListRackLSEsRequest) (*ListRackLSEsResponse, error)
	// Delete delete the rackLSE
	DeleteRackLSE(context.Context, *DeleteRackLSERequest) (*emptypb.Empty, error)
	// CreateNic creates a new nic
	CreateNic(context.Context, *CreateNicRequest) (*models.Nic, error)
	// Update updates the nic
	UpdateNic(context.Context, *UpdateNicRequest) (*models.Nic, error)
	// Get retrieves the details of the nic
	GetNic(context.Context, *GetNicRequest) (*models.Nic, error)
	// List gets all the nics
	ListNics(context.Context, *ListNicsRequest) (*ListNicsResponse, error)
	// Delete delete the nic
	DeleteNic(context.Context, *DeleteNicRequest) (*emptypb.Empty, error)
	// ImportNics imports nics info.
	ImportNics(context.Context, *ImportNicsRequest) (*status.Status, error)
	// Rename rename the nic
	RenameNic(context.Context, *RenameNicRequest) (*models.Nic, error)
	// ImportDatacenters imports datacenter & its related info, including kvm & switch.
	ImportDatacenters(context.Context, *ImportDatacentersRequest) (*status.Status, error)
	// CreateKVM creates a new KVM
	CreateKVM(context.Context, *CreateKVMRequest) (*models.KVM, error)
	// Update updates the KVM
	UpdateKVM(context.Context, *UpdateKVMRequest) (*models.KVM, error)
	// Get retrieves the details of the KVM
	GetKVM(context.Context, *GetKVMRequest) (*models.KVM, error)
	// List gets all the KVMs
	ListKVMs(context.Context, *ListKVMsRequest) (*ListKVMsResponse, error)
	// Delete delete the KVM
	DeleteKVM(context.Context, *DeleteKVMRequest) (*emptypb.Empty, error)
	// CreateRPM creates a new RPM
	CreateRPM(context.Context, *CreateRPMRequest) (*models.RPM, error)
	// Update updates the RPM
	UpdateRPM(context.Context, *UpdateRPMRequest) (*models.RPM, error)
	// Get retrieves the details of the RPM
	GetRPM(context.Context, *GetRPMRequest) (*models.RPM, error)
	// List gets all the RPMs
	ListRPMs(context.Context, *ListRPMsRequest) (*ListRPMsResponse, error)
	// Delete delete the RPM
	DeleteRPM(context.Context, *DeleteRPMRequest) (*emptypb.Empty, error)
	// CreateDrac creates a new drac
	CreateDrac(context.Context, *CreateDracRequest) (*models.Drac, error)
	// Update updates the drac
	UpdateDrac(context.Context, *UpdateDracRequest) (*models.Drac, error)
	// Get retrieves the details of the drac
	GetDrac(context.Context, *GetDracRequest) (*models.Drac, error)
	// List gets all the dracs
	ListDracs(context.Context, *ListDracsRequest) (*ListDracsResponse, error)
	// Delete delete the drac
	DeleteDrac(context.Context, *DeleteDracRequest) (*emptypb.Empty, error)
	// CreateSwitch creates a new switch
	CreateSwitch(context.Context, *CreateSwitchRequest) (*models.Switch, error)
	// Update updates the switch
	UpdateSwitch(context.Context, *UpdateSwitchRequest) (*models.Switch, error)
	// Get retrieves the details of the switch
	GetSwitch(context.Context, *GetSwitchRequest) (*models.Switch, error)
	// List gets all the switches
	ListSwitches(context.Context, *ListSwitchesRequest) (*ListSwitchesResponse, error)
	// Delete delete the switch
	DeleteSwitch(context.Context, *DeleteSwitchRequest) (*emptypb.Empty, error)
	// Rename rename the switch
	RenameSwitch(context.Context, *RenameSwitchRequest) (*models.Switch, error)
	// CreateVlan creates a new vlan
	CreateVlan(context.Context, *CreateVlanRequest) (*models.Vlan, error)
	// Update updates the vlan
	UpdateVlan(context.Context, *UpdateVlanRequest) (*models.Vlan, error)
	// Get retrieves the details of the vlan
	GetVlan(context.Context, *GetVlanRequest) (*models.Vlan, error)
	// List gets all the vlans
	ListVlans(context.Context, *ListVlansRequest) (*ListVlansResponse, error)
	// Delete delete the vlan
	DeleteVlan(context.Context, *DeleteVlanRequest) (*emptypb.Empty, error)
	// ImportVlans imports vlans & all IP-related infos.
	ImportVlans(context.Context, *ImportVlansRequest) (*status.Status, error)
	// ImportOSVlans imports the ChromeOS vlans, ips, and dhcp configs.
	ImportOSVlans(context.Context, *ImportOSVlansRequest) (*status.Status, error)
	// ImportStates imports states of all objects.
	ImportStates(context.Context, *ImportStatesRequest) (*status.Status, error)
	// UpdateState updates the state for a resource.
	// If the state doesn't exist before, it will create the state record for the resource.
	UpdateState(context.Context, *UpdateStateRequest) (*models.StateRecord, error)
	// GetState retrieves the state of a resource.
	GetState(context.Context, *GetStateRequest) (*models.StateRecord, error)
	// GetDutState retrieves requested Chrome OS device DutState from UFS.
	GetDutState(context.Context, *GetDutStateRequest) (*lab.DutState, error)
	// ListDutStates gets all the DutStates
	ListDutStates(context.Context, *ListDutStatesRequest) (*ListDutStatesResponse, error)
	// UpdateDutState updates the state config for a DUT
	// If the dut state doesn't exist before, it will create the dut state record.
	UpdateDutState(context.Context, *UpdateDutStateRequest) (*lab.DutState, error)
	// UpdateDeviceRecoveryData updates the device configs for a DUT
	UpdateDeviceRecoveryData(context.Context, *UpdateDeviceRecoveryDataRequest) (*UpdateDeviceRecoveryDataResponse, error)
	// GetDHCPConfig retrieves a dhcp record.
	GetDHCPConfig(context.Context, *GetDHCPConfigRequest) (*models.DHCPConfig, error)
	// CreateVM creates a new VM
	CreateVM(context.Context, *CreateVMRequest) (*models.VM, error)
	// UpdateVM updates a VM
	UpdateVM(context.Context, *UpdateVMRequest) (*models.VM, error)
	// DeleteVM delete a VM
	DeleteVM(context.Context, *DeleteVMRequest) (*emptypb.Empty, error)
	// GetVM retrieves the details of the VM
	GetVM(context.Context, *GetVMRequest) (*models.VM, error)
	// ListVMs gets all the Vms
	ListVMs(context.Context, *ListVMsRequest) (*ListVMsResponse, error)
	// CreateAsset creates a new asset
	CreateAsset(context.Context, *CreateAssetRequest) (*models.Asset, error)
	// Update updates the asset
	UpdateAsset(context.Context, *UpdateAssetRequest) (*models.Asset, error)
	// Get retrieves the details of the asset
	GetAsset(context.Context, *GetAssetRequest) (*models.Asset, error)
	// List gets all the assets
	ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error)
	// Delete delete the asset
	DeleteAsset(context.Context, *DeleteAssetRequest) (*emptypb.Empty, error)
	// Rename the asset
	RenameAsset(context.Context, *RenameAssetRequest) (*models.Asset, error)
	// BatchGetKVMs retrieves a batch of kvms
	BatchGetKVMs(context.Context, *BatchGetKVMsRequest) (*BatchGetKVMsResponse, error)
	// BatchGetDHCPConfigs retrieves a batch of dhcp records.
	BatchGetDHCPConfigs(context.Context, *BatchGetDHCPConfigsRequest) (*BatchGetDHCPConfigsResponse, error)
	// BatchGetMachineLSEs retrieves a batch of machineLSEs
	BatchGetMachineLSEs(context.Context, *BatchGetMachineLSEsRequest) (*BatchGetMachineLSEsResponse, error)
	// BatchGetMachines retrieves a batch of machines
	BatchGetMachines(context.Context, *BatchGetMachinesRequest) (*BatchGetMachinesResponse, error)
	// BatchGetSwitches retrieves a batch of switches
	BatchGetSwitches(context.Context, *BatchGetSwitchesRequest) (*BatchGetSwitchesResponse, error)
	// BatchGetRPMs retrieves a batch of rpms
	BatchGetRPMs(context.Context, *BatchGetRPMsRequest) (*BatchGetRPMsResponse, error)
	// BatchGetDracs retrieves a batch of dracs
	BatchGetDracs(context.Context, *BatchGetDracsRequest) (*BatchGetDracsResponse, error)
	// BatchGetNics retrieves a batch of nics
	BatchGetNics(context.Context, *BatchGetNicsRequest) (*BatchGetNicsResponse, error)
	// BatchGetVMs retrieves a batch of vms
	BatchGetVMs(context.Context, *BatchGetVMsRequest) (*BatchGetVMsResponse, error)
	// BatchGetVlans retrieves a batch of vlans
	BatchGetVlans(context.Context, *BatchGetVlansRequest) (*BatchGetVlansResponse, error)
	// BatchGetRacks retrieves a batch of racks
	BatchGetRacks(context.Context, *BatchGetRacksRequest) (*BatchGetRacksResponse, error)
	// BatchGetChromePlatforms retrieves a batch of chrome platforms
	BatchGetChromePlatforms(context.Context, *BatchGetChromePlatformsRequest) (*BatchGetChromePlatformsResponse, error)
	// BatchGetMachineLSEPrototypes retrieves a batch of machine lse prototypes
	BatchGetMachineLSEPrototypes(context.Context, *BatchGetMachineLSEPrototypesRequest) (*BatchGetMachineLSEPrototypesResponse, error)
	// BatchGetRackLSEPrototypes retrieves a batch of rack lse prototypes
	BatchGetRackLSEPrototypes(context.Context, *BatchGetRackLSEPrototypesRequest) (*BatchGetRackLSEPrototypesResponse, error)
	// GetChromeOSDeviceData retrieves requested Chrome OS device data from the UFS and inventoryV2.
	GetChromeOSDeviceData(context.Context, *GetChromeOSDeviceDataRequest) (*models.ChromeOSDeviceData, error)
	// CreateCachingService creates a new CachingService.
	CreateCachingService(context.Context, *CreateCachingServiceRequest) (*models.CachingService, error)
	// Update updates the CachingService.
	UpdateCachingService(context.Context, *UpdateCachingServiceRequest) (*models.CachingService, error)
	// Get retrieves the details of the CachingService.
	GetCachingService(context.Context, *GetCachingServiceRequest) (*models.CachingService, error)
	// List gets all the CachingServices.
	ListCachingServices(context.Context, *ListCachingServicesRequest) (*ListCachingServicesResponse, error)
	// Delete delete the CachingService.
	DeleteCachingService(context.Context, *DeleteCachingServiceRequest) (*emptypb.Empty, error)
	// UpdateMachineLSEDeployment updates a deployment record for a host.
	UpdateMachineLSEDeployment(context.Context, *UpdateMachineLSEDeploymentRequest) (*models.MachineLSEDeployment, error)
	// BatchUpdateMachineLSEDeployment updates the deployment records for a batch of hosts.
	BatchUpdateMachineLSEDeployment(context.Context, *BatchUpdateMachineLSEDeploymentRequest) (*BatchUpdateMachineLSEDeploymentResponse, error)
	// GetMachineLSEDeployment retrieves a deployment record for a given host identifier, e.g. serial number.
	GetMachineLSEDeployment(context.Context, *GetMachineLSEDeploymentRequest) (*models.MachineLSEDeployment, error)
	// BatchGetMachineLSEDeployments retrieves a batch of deployment records.
	BatchGetMachineLSEDeployments(context.Context, *BatchGetMachineLSEDeploymentsRequest) (*BatchGetMachineLSEDeploymentsResponse, error)
	// ListMachineLSEDeployments lists all deployment records which fulfill the requirements
	ListMachineLSEDeployments(context.Context, *ListMachineLSEDeploymentsRequest) (*ListMachineLSEDeploymentsResponse, error)
	// CreateSchedulingUnit creates a new SchedulingUnit.
	CreateSchedulingUnit(context.Context, *CreateSchedulingUnitRequest) (*models.SchedulingUnit, error)
	// Update updates the SchedulingUnit.
	UpdateSchedulingUnit(context.Context, *UpdateSchedulingUnitRequest) (*models.SchedulingUnit, error)
	// Get retrieves the details of the SchedulingUnit.
	GetSchedulingUnit(context.Context, *GetSchedulingUnitRequest) (*models.SchedulingUnit, error)
	// List gets all the SchedulingUnits.
	ListSchedulingUnits(context.Context, *ListSchedulingUnitsRequest) (*ListSchedulingUnitsResponse, error)
	// Delete delete the SchedulingUnit.
	DeleteSchedulingUnit(context.Context, *DeleteSchedulingUnitRequest) (*emptypb.Empty, error)
	// UpdateConfigBundle updates the ConfigBundle
	UpdateConfigBundle(context.Context, *UpdateConfigBundleRequest) (*UpdateConfigBundleResponse, error)
	// GetDeviceData retrieves requested device data from UFS.
	GetDeviceData(context.Context, *GetDeviceDataRequest) (*GetDeviceDataResponse, error)
	// CheckFleetPolicyForTest checks whether a given test parameters indicate a valid test
	CheckFleetTestsPolicy(context.Context, *CheckFleetTestsPolicyRequest) (*CheckFleetTestsPolicyResponse, error)
}

// UnimplementedFleetServer can be embedded to have forward compatible implementations.
type UnimplementedFleetServer struct {
}

func (*UnimplementedFleetServer) CreateChromePlatform(context.Context, *CreateChromePlatformRequest) (*models.ChromePlatform, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateChromePlatform not implemented")
}
func (*UnimplementedFleetServer) UpdateChromePlatform(context.Context, *UpdateChromePlatformRequest) (*models.ChromePlatform, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateChromePlatform not implemented")
}
func (*UnimplementedFleetServer) GetChromePlatform(context.Context, *GetChromePlatformRequest) (*models.ChromePlatform, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetChromePlatform not implemented")
}
func (*UnimplementedFleetServer) ListChromePlatforms(context.Context, *ListChromePlatformsRequest) (*ListChromePlatformsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListChromePlatforms not implemented")
}
func (*UnimplementedFleetServer) DeleteChromePlatform(context.Context, *DeleteChromePlatformRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteChromePlatform not implemented")
}
func (*UnimplementedFleetServer) ImportChromePlatforms(context.Context, *ImportChromePlatformsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportChromePlatforms not implemented")
}
func (*UnimplementedFleetServer) ListOSVersions(context.Context, *ListOSVersionsRequest) (*ListOSVersionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListOSVersions not implemented")
}
func (*UnimplementedFleetServer) ImportOSVersions(context.Context, *ImportOSVersionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportOSVersions not implemented")
}
func (*UnimplementedFleetServer) CreateMachineLSEPrototype(context.Context, *CreateMachineLSEPrototypeRequest) (*models.MachineLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateMachineLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) UpdateMachineLSEPrototype(context.Context, *UpdateMachineLSEPrototypeRequest) (*models.MachineLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateMachineLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) GetMachineLSEPrototype(context.Context, *GetMachineLSEPrototypeRequest) (*models.MachineLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetMachineLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) ListMachineLSEPrototypes(context.Context, *ListMachineLSEPrototypesRequest) (*ListMachineLSEPrototypesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMachineLSEPrototypes not implemented")
}
func (*UnimplementedFleetServer) DeleteMachineLSEPrototype(context.Context, *DeleteMachineLSEPrototypeRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteMachineLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) CreateRackLSEPrototype(context.Context, *CreateRackLSEPrototypeRequest) (*models.RackLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateRackLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) UpdateRackLSEPrototype(context.Context, *UpdateRackLSEPrototypeRequest) (*models.RackLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateRackLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) GetRackLSEPrototype(context.Context, *GetRackLSEPrototypeRequest) (*models.RackLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRackLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) ListRackLSEPrototypes(context.Context, *ListRackLSEPrototypesRequest) (*ListRackLSEPrototypesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRackLSEPrototypes not implemented")
}
func (*UnimplementedFleetServer) DeleteRackLSEPrototype(context.Context, *DeleteRackLSEPrototypeRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRackLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) MachineRegistration(context.Context, *MachineRegistrationRequest) (*models.Machine, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MachineRegistration not implemented")
}
func (*UnimplementedFleetServer) UpdateMachine(context.Context, *UpdateMachineRequest) (*models.Machine, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateMachine not implemented")
}
func (*UnimplementedFleetServer) GetMachine(context.Context, *GetMachineRequest) (*models.Machine, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetMachine not implemented")
}
func (*UnimplementedFleetServer) ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (*UnimplementedFleetServer) DeleteMachine(context.Context, *DeleteMachineRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}
func (*UnimplementedFleetServer) ImportMachines(context.Context, *ImportMachinesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportMachines not implemented")
}
func (*UnimplementedFleetServer) RenameMachine(context.Context, *RenameMachineRequest) (*models.Machine, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RenameMachine not implemented")
}
func (*UnimplementedFleetServer) RackRegistration(context.Context, *RackRegistrationRequest) (*models.Rack, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RackRegistration not implemented")
}
func (*UnimplementedFleetServer) UpdateRack(context.Context, *UpdateRackRequest) (*models.Rack, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateRack not implemented")
}
func (*UnimplementedFleetServer) GetRack(context.Context, *GetRackRequest) (*models.Rack, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRack not implemented")
}
func (*UnimplementedFleetServer) ListRacks(context.Context, *ListRacksRequest) (*ListRacksResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRacks not implemented")
}
func (*UnimplementedFleetServer) DeleteRack(context.Context, *DeleteRackRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRack not implemented")
}
func (*UnimplementedFleetServer) CreateMachineLSE(context.Context, *CreateMachineLSERequest) (*models.MachineLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateMachineLSE not implemented")
}
func (*UnimplementedFleetServer) UpdateMachineLSE(context.Context, *UpdateMachineLSERequest) (*models.MachineLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateMachineLSE not implemented")
}
func (*UnimplementedFleetServer) GetMachineLSE(context.Context, *GetMachineLSERequest) (*models.MachineLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetMachineLSE not implemented")
}
func (*UnimplementedFleetServer) ListMachineLSEs(context.Context, *ListMachineLSEsRequest) (*ListMachineLSEsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMachineLSEs not implemented")
}
func (*UnimplementedFleetServer) DeleteMachineLSE(context.Context, *DeleteMachineLSERequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteMachineLSE not implemented")
}
func (*UnimplementedFleetServer) RenameMachineLSE(context.Context, *RenameMachineLSERequest) (*models.MachineLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RenameMachineLSE not implemented")
}
func (*UnimplementedFleetServer) ImportMachineLSEs(context.Context, *ImportMachineLSEsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportMachineLSEs not implemented")
}
func (*UnimplementedFleetServer) ImportOSMachineLSEs(context.Context, *ImportOSMachineLSEsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportOSMachineLSEs not implemented")
}
func (*UnimplementedFleetServer) CreateRackLSE(context.Context, *CreateRackLSERequest) (*models.RackLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateRackLSE not implemented")
}
func (*UnimplementedFleetServer) UpdateRackLSE(context.Context, *UpdateRackLSERequest) (*models.RackLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateRackLSE not implemented")
}
func (*UnimplementedFleetServer) GetRackLSE(context.Context, *GetRackLSERequest) (*models.RackLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRackLSE not implemented")
}
func (*UnimplementedFleetServer) ListRackLSEs(context.Context, *ListRackLSEsRequest) (*ListRackLSEsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRackLSEs not implemented")
}
func (*UnimplementedFleetServer) DeleteRackLSE(context.Context, *DeleteRackLSERequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRackLSE not implemented")
}
func (*UnimplementedFleetServer) CreateNic(context.Context, *CreateNicRequest) (*models.Nic, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNic not implemented")
}
func (*UnimplementedFleetServer) UpdateNic(context.Context, *UpdateNicRequest) (*models.Nic, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateNic not implemented")
}
func (*UnimplementedFleetServer) GetNic(context.Context, *GetNicRequest) (*models.Nic, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNic not implemented")
}
func (*UnimplementedFleetServer) ListNics(context.Context, *ListNicsRequest) (*ListNicsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNics not implemented")
}
func (*UnimplementedFleetServer) DeleteNic(context.Context, *DeleteNicRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNic not implemented")
}
func (*UnimplementedFleetServer) ImportNics(context.Context, *ImportNicsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportNics not implemented")
}
func (*UnimplementedFleetServer) RenameNic(context.Context, *RenameNicRequest) (*models.Nic, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RenameNic not implemented")
}
func (*UnimplementedFleetServer) ImportDatacenters(context.Context, *ImportDatacentersRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportDatacenters not implemented")
}
func (*UnimplementedFleetServer) CreateKVM(context.Context, *CreateKVMRequest) (*models.KVM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateKVM not implemented")
}
func (*UnimplementedFleetServer) UpdateKVM(context.Context, *UpdateKVMRequest) (*models.KVM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateKVM not implemented")
}
func (*UnimplementedFleetServer) GetKVM(context.Context, *GetKVMRequest) (*models.KVM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetKVM not implemented")
}
func (*UnimplementedFleetServer) ListKVMs(context.Context, *ListKVMsRequest) (*ListKVMsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListKVMs not implemented")
}
func (*UnimplementedFleetServer) DeleteKVM(context.Context, *DeleteKVMRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteKVM not implemented")
}
func (*UnimplementedFleetServer) CreateRPM(context.Context, *CreateRPMRequest) (*models.RPM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateRPM not implemented")
}
func (*UnimplementedFleetServer) UpdateRPM(context.Context, *UpdateRPMRequest) (*models.RPM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateRPM not implemented")
}
func (*UnimplementedFleetServer) GetRPM(context.Context, *GetRPMRequest) (*models.RPM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRPM not implemented")
}
func (*UnimplementedFleetServer) ListRPMs(context.Context, *ListRPMsRequest) (*ListRPMsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRPMs not implemented")
}
func (*UnimplementedFleetServer) DeleteRPM(context.Context, *DeleteRPMRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRPM not implemented")
}
func (*UnimplementedFleetServer) CreateDrac(context.Context, *CreateDracRequest) (*models.Drac, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateDrac not implemented")
}
func (*UnimplementedFleetServer) UpdateDrac(context.Context, *UpdateDracRequest) (*models.Drac, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateDrac not implemented")
}
func (*UnimplementedFleetServer) GetDrac(context.Context, *GetDracRequest) (*models.Drac, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDrac not implemented")
}
func (*UnimplementedFleetServer) ListDracs(context.Context, *ListDracsRequest) (*ListDracsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDracs not implemented")
}
func (*UnimplementedFleetServer) DeleteDrac(context.Context, *DeleteDracRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteDrac not implemented")
}
func (*UnimplementedFleetServer) CreateSwitch(context.Context, *CreateSwitchRequest) (*models.Switch, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateSwitch not implemented")
}
func (*UnimplementedFleetServer) UpdateSwitch(context.Context, *UpdateSwitchRequest) (*models.Switch, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateSwitch not implemented")
}
func (*UnimplementedFleetServer) GetSwitch(context.Context, *GetSwitchRequest) (*models.Switch, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetSwitch not implemented")
}
func (*UnimplementedFleetServer) ListSwitches(context.Context, *ListSwitchesRequest) (*ListSwitchesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSwitches not implemented")
}
func (*UnimplementedFleetServer) DeleteSwitch(context.Context, *DeleteSwitchRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteSwitch not implemented")
}
func (*UnimplementedFleetServer) RenameSwitch(context.Context, *RenameSwitchRequest) (*models.Switch, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RenameSwitch not implemented")
}
func (*UnimplementedFleetServer) CreateVlan(context.Context, *CreateVlanRequest) (*models.Vlan, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateVlan not implemented")
}
func (*UnimplementedFleetServer) UpdateVlan(context.Context, *UpdateVlanRequest) (*models.Vlan, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateVlan not implemented")
}
func (*UnimplementedFleetServer) GetVlan(context.Context, *GetVlanRequest) (*models.Vlan, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetVlan not implemented")
}
func (*UnimplementedFleetServer) ListVlans(context.Context, *ListVlansRequest) (*ListVlansResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListVlans not implemented")
}
func (*UnimplementedFleetServer) DeleteVlan(context.Context, *DeleteVlanRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteVlan not implemented")
}
func (*UnimplementedFleetServer) ImportVlans(context.Context, *ImportVlansRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportVlans not implemented")
}
func (*UnimplementedFleetServer) ImportOSVlans(context.Context, *ImportOSVlansRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportOSVlans not implemented")
}
func (*UnimplementedFleetServer) ImportStates(context.Context, *ImportStatesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportStates not implemented")
}
func (*UnimplementedFleetServer) UpdateState(context.Context, *UpdateStateRequest) (*models.StateRecord, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (*UnimplementedFleetServer) GetState(context.Context, *GetStateRequest) (*models.StateRecord, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedFleetServer) GetDutState(context.Context, *GetDutStateRequest) (*lab.DutState, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDutState not implemented")
}
func (*UnimplementedFleetServer) ListDutStates(context.Context, *ListDutStatesRequest) (*ListDutStatesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDutStates not implemented")
}
func (*UnimplementedFleetServer) UpdateDutState(context.Context, *UpdateDutStateRequest) (*lab.DutState, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateDutState not implemented")
}
func (*UnimplementedFleetServer) UpdateDeviceRecoveryData(context.Context, *UpdateDeviceRecoveryDataRequest) (*UpdateDeviceRecoveryDataResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateDeviceRecoveryData not implemented")
}
func (*UnimplementedFleetServer) GetDHCPConfig(context.Context, *GetDHCPConfigRequest) (*models.DHCPConfig, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDHCPConfig not implemented")
}
func (*UnimplementedFleetServer) CreateVM(context.Context, *CreateVMRequest) (*models.VM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateVM not implemented")
}
func (*UnimplementedFleetServer) UpdateVM(context.Context, *UpdateVMRequest) (*models.VM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateVM not implemented")
}
func (*UnimplementedFleetServer) DeleteVM(context.Context, *DeleteVMRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteVM not implemented")
}
func (*UnimplementedFleetServer) GetVM(context.Context, *GetVMRequest) (*models.VM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetVM not implemented")
}
func (*UnimplementedFleetServer) ListVMs(context.Context, *ListVMsRequest) (*ListVMsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListVMs not implemented")
}
func (*UnimplementedFleetServer) CreateAsset(context.Context, *CreateAssetRequest) (*models.Asset, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateAsset not implemented")
}
func (*UnimplementedFleetServer) UpdateAsset(context.Context, *UpdateAssetRequest) (*models.Asset, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateAsset not implemented")
}
func (*UnimplementedFleetServer) GetAsset(context.Context, *GetAssetRequest) (*models.Asset, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (*UnimplementedFleetServer) ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (*UnimplementedFleetServer) DeleteAsset(context.Context, *DeleteAssetRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAsset not implemented")
}
func (*UnimplementedFleetServer) RenameAsset(context.Context, *RenameAssetRequest) (*models.Asset, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RenameAsset not implemented")
}
func (*UnimplementedFleetServer) BatchGetKVMs(context.Context, *BatchGetKVMsRequest) (*BatchGetKVMsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchGetKVMs not implemented")
}
func (*UnimplementedFleetServer) BatchGetDHCPConfigs(context.Context, *BatchGetDHCPConfigsRequest) (*BatchGetDHCPConfigsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchGetDHCPConfigs not implemented")
}
func (*UnimplementedFleetServer) BatchGetMachineLSEs(context.Context, *BatchGetMachineLSEsRequest) (*BatchGetMachineLSEsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchGetMachineLSEs not implemented")
}
func (*UnimplementedFleetServer) BatchGetMachines(context.Context, *BatchGetMachinesRequest) (*BatchGetMachinesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchGetMachines not implemented")
}
func (*UnimplementedFleetServer) BatchGetSwitches(context.Context, *BatchGetSwitchesRequest) (*BatchGetSwitchesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchGetSwitches not implemented")
}
func (*UnimplementedFleetServer) BatchGetRPMs(context.Context, *BatchGetRPMsRequest) (*BatchGetRPMsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchGetRPMs not implemented")
}
func (*UnimplementedFleetServer) BatchGetDracs(context.Context, *BatchGetDracsRequest) (*BatchGetDracsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchGetDracs not implemented")
}
func (*UnimplementedFleetServer) BatchGetNics(context.Context, *BatchGetNicsRequest) (*BatchGetNicsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchGetNics not implemented")
}
func (*UnimplementedFleetServer) BatchGetVMs(context.Context, *BatchGetVMsRequest) (*BatchGetVMsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchGetVMs not implemented")
}
func (*UnimplementedFleetServer) BatchGetVlans(context.Context, *BatchGetVlansRequest) (*BatchGetVlansResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchGetVlans not implemented")
}
func (*UnimplementedFleetServer) BatchGetRacks(context.Context, *BatchGetRacksRequest) (*BatchGetRacksResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchGetRacks not implemented")
}
func (*UnimplementedFleetServer) BatchGetChromePlatforms(context.Context, *BatchGetChromePlatformsRequest) (*BatchGetChromePlatformsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchGetChromePlatforms not implemented")
}
func (*UnimplementedFleetServer) BatchGetMachineLSEPrototypes(context.Context, *BatchGetMachineLSEPrototypesRequest) (*BatchGetMachineLSEPrototypesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchGetMachineLSEPrototypes not implemented")
}
func (*UnimplementedFleetServer) BatchGetRackLSEPrototypes(context.Context, *BatchGetRackLSEPrototypesRequest) (*BatchGetRackLSEPrototypesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchGetRackLSEPrototypes not implemented")
}
func (*UnimplementedFleetServer) GetChromeOSDeviceData(context.Context, *GetChromeOSDeviceDataRequest) (*models.ChromeOSDeviceData, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetChromeOSDeviceData not implemented")
}
func (*UnimplementedFleetServer) CreateCachingService(context.Context, *CreateCachingServiceRequest) (*models.CachingService, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateCachingService not implemented")
}
func (*UnimplementedFleetServer) UpdateCachingService(context.Context, *UpdateCachingServiceRequest) (*models.CachingService, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateCachingService not implemented")
}
func (*UnimplementedFleetServer) GetCachingService(context.Context, *GetCachingServiceRequest) (*models.CachingService, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetCachingService not implemented")
}
func (*UnimplementedFleetServer) ListCachingServices(context.Context, *ListCachingServicesRequest) (*ListCachingServicesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCachingServices not implemented")
}
func (*UnimplementedFleetServer) DeleteCachingService(context.Context, *DeleteCachingServiceRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCachingService not implemented")
}
func (*UnimplementedFleetServer) UpdateMachineLSEDeployment(context.Context, *UpdateMachineLSEDeploymentRequest) (*models.MachineLSEDeployment, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateMachineLSEDeployment not implemented")
}
func (*UnimplementedFleetServer) BatchUpdateMachineLSEDeployment(context.Context, *BatchUpdateMachineLSEDeploymentRequest) (*BatchUpdateMachineLSEDeploymentResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchUpdateMachineLSEDeployment not implemented")
}
func (*UnimplementedFleetServer) GetMachineLSEDeployment(context.Context, *GetMachineLSEDeploymentRequest) (*models.MachineLSEDeployment, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetMachineLSEDeployment not implemented")
}
func (*UnimplementedFleetServer) BatchGetMachineLSEDeployments(context.Context, *BatchGetMachineLSEDeploymentsRequest) (*BatchGetMachineLSEDeploymentsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchGetMachineLSEDeployments not implemented")
}
func (*UnimplementedFleetServer) ListMachineLSEDeployments(context.Context, *ListMachineLSEDeploymentsRequest) (*ListMachineLSEDeploymentsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMachineLSEDeployments not implemented")
}
func (*UnimplementedFleetServer) CreateSchedulingUnit(context.Context, *CreateSchedulingUnitRequest) (*models.SchedulingUnit, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateSchedulingUnit not implemented")
}
func (*UnimplementedFleetServer) UpdateSchedulingUnit(context.Context, *UpdateSchedulingUnitRequest) (*models.SchedulingUnit, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateSchedulingUnit not implemented")
}
func (*UnimplementedFleetServer) GetSchedulingUnit(context.Context, *GetSchedulingUnitRequest) (*models.SchedulingUnit, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetSchedulingUnit not implemented")
}
func (*UnimplementedFleetServer) ListSchedulingUnits(context.Context, *ListSchedulingUnitsRequest) (*ListSchedulingUnitsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSchedulingUnits not implemented")
}
func (*UnimplementedFleetServer) DeleteSchedulingUnit(context.Context, *DeleteSchedulingUnitRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteSchedulingUnit not implemented")
}
func (*UnimplementedFleetServer) UpdateConfigBundle(context.Context, *UpdateConfigBundleRequest) (*UpdateConfigBundleResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateConfigBundle not implemented")
}
func (*UnimplementedFleetServer) GetDeviceData(context.Context, *GetDeviceDataRequest) (*GetDeviceDataResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDeviceData not implemented")
}
func (*UnimplementedFleetServer) CheckFleetTestsPolicy(context.Context, *CheckFleetTestsPolicyRequest) (*CheckFleetTestsPolicyResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CheckFleetTestsPolicy not implemented")
}

func RegisterFleetServer(s prpc.Registrar, srv FleetServer) {
	s.RegisterService(&_Fleet_serviceDesc, srv)
}

func _Fleet_CreateChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateChromePlatform(ctx, req.(*CreateChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateChromePlatform(ctx, req.(*UpdateChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetChromePlatform(ctx, req.(*GetChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListChromePlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChromePlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListChromePlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListChromePlatforms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListChromePlatforms(ctx, req.(*ListChromePlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteChromePlatform(ctx, req.(*DeleteChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportChromePlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportChromePlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportChromePlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportChromePlatforms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportChromePlatforms(ctx, req.(*ImportChromePlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListOSVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOSVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListOSVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListOSVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListOSVersions(ctx, req.(*ListOSVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportOSVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportOSVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportOSVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportOSVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportOSVersions(ctx, req.(*ImportOSVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateMachineLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateMachineLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateMachineLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateMachineLSEPrototype(ctx, req.(*CreateMachineLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateMachineLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateMachineLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateMachineLSEPrototype(ctx, req.(*UpdateMachineLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetMachineLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetMachineLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetMachineLSEPrototype(ctx, req.(*GetMachineLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListMachineLSEPrototypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineLSEPrototypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListMachineLSEPrototypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEPrototypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListMachineLSEPrototypes(ctx, req.(*ListMachineLSEPrototypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteMachineLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteMachineLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachineLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteMachineLSEPrototype(ctx, req.(*DeleteMachineLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateRackLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRackLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateRackLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateRackLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateRackLSEPrototype(ctx, req.(*CreateRackLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateRackLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRackLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateRackLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateRackLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateRackLSEPrototype(ctx, req.(*UpdateRackLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetRackLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRackLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetRackLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetRackLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetRackLSEPrototype(ctx, req.(*GetRackLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListRackLSEPrototypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRackLSEPrototypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListRackLSEPrototypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListRackLSEPrototypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListRackLSEPrototypes(ctx, req.(*ListRackLSEPrototypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteRackLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRackLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteRackLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteRackLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteRackLSEPrototype(ctx, req.(*DeleteRackLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_MachineRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).MachineRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/MachineRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).MachineRegistration(ctx, req.(*MachineRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateMachine(ctx, req.(*UpdateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetMachine(ctx, req.(*GetMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteMachine(ctx, req.(*DeleteMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportMachines(ctx, req.(*ImportMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_RenameMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).RenameMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/RenameMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).RenameMachine(ctx, req.(*RenameMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_RackRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RackRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).RackRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/RackRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).RackRegistration(ctx, req.(*RackRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateRack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateRack(ctx, req.(*UpdateRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetRack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetRack(ctx, req.(*GetRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListRacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListRacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListRacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListRacks(ctx, req.(*ListRacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteRack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteRack(ctx, req.(*DeleteRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateMachineLSE(ctx, req.(*CreateMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateMachineLSE(ctx, req.(*UpdateMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetMachineLSE(ctx, req.(*GetMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListMachineLSEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineLSEsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListMachineLSEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListMachineLSEs(ctx, req.(*ListMachineLSEsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteMachineLSE(ctx, req.(*DeleteMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_RenameMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).RenameMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/RenameMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).RenameMachineLSE(ctx, req.(*RenameMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportMachineLSEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportMachineLSEsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportMachineLSEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportMachineLSEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportMachineLSEs(ctx, req.(*ImportMachineLSEsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportOSMachineLSEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportOSMachineLSEsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportOSMachineLSEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportOSMachineLSEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportOSMachineLSEs(ctx, req.(*ImportOSMachineLSEsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateRackLSE(ctx, req.(*CreateRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateRackLSE(ctx, req.(*UpdateRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetRackLSE(ctx, req.(*GetRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListRackLSEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRackLSEsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListRackLSEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListRackLSEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListRackLSEs(ctx, req.(*ListRackLSEsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteRackLSE(ctx, req.(*DeleteRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateNic(ctx, req.(*CreateNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateNic(ctx, req.(*UpdateNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetNic(ctx, req.(*GetNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListNics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListNics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListNics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListNics(ctx, req.(*ListNicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteNic(ctx, req.(*DeleteNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportNics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportNicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportNics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportNics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportNics(ctx, req.(*ImportNicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_RenameNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).RenameNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/RenameNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).RenameNic(ctx, req.(*RenameNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportDatacenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDatacentersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportDatacenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportDatacenters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportDatacenters(ctx, req.(*ImportDatacentersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateKVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateKVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateKVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateKVM(ctx, req.(*CreateKVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateKVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateKVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateKVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateKVM(ctx, req.(*UpdateKVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetKVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetKVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetKVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetKVM(ctx, req.(*GetKVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListKVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListKVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListKVMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListKVMs(ctx, req.(*ListKVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteKVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteKVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteKVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteKVM(ctx, req.(*DeleteKVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateRPM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRPMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateRPM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateRPM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateRPM(ctx, req.(*CreateRPMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateRPM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRPMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateRPM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateRPM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateRPM(ctx, req.(*UpdateRPMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetRPM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRPMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetRPM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetRPM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetRPM(ctx, req.(*GetRPMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListRPMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRPMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListRPMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListRPMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListRPMs(ctx, req.(*ListRPMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteRPM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRPMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteRPM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteRPM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteRPM(ctx, req.(*DeleteRPMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateDrac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDracRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateDrac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateDrac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateDrac(ctx, req.(*CreateDracRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateDrac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDracRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateDrac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateDrac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateDrac(ctx, req.(*UpdateDracRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetDrac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDracRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetDrac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetDrac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetDrac(ctx, req.(*GetDracRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListDracs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDracsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListDracs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListDracs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListDracs(ctx, req.(*ListDracsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteDrac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDracRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteDrac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteDrac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteDrac(ctx, req.(*DeleteDracRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateSwitch(ctx, req.(*CreateSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateSwitch(ctx, req.(*UpdateSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetSwitch(ctx, req.(*GetSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListSwitches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSwitchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListSwitches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListSwitches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListSwitches(ctx, req.(*ListSwitchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteSwitch(ctx, req.(*DeleteSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_RenameSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).RenameSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/RenameSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).RenameSwitch(ctx, req.(*RenameSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateVlan(ctx, req.(*CreateVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateVlan(ctx, req.(*UpdateVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetVlan(ctx, req.(*GetVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListVlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListVlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListVlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListVlans(ctx, req.(*ListVlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteVlan(ctx, req.(*DeleteVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportVlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportVlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportVlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportVlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportVlans(ctx, req.(*ImportVlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportOSVlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportOSVlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportOSVlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportOSVlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportOSVlans(ctx, req.(*ImportOSVlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportStates(ctx, req.(*ImportStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateState(ctx, req.(*UpdateStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetDutState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDutStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetDutState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetDutState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetDutState(ctx, req.(*GetDutStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListDutStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDutStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListDutStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListDutStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListDutStates(ctx, req.(*ListDutStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateDutState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDutStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateDutState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateDutState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateDutState(ctx, req.(*UpdateDutStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateDeviceRecoveryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRecoveryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateDeviceRecoveryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateDeviceRecoveryData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateDeviceRecoveryData(ctx, req.(*UpdateDeviceRecoveryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetDHCPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDHCPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetDHCPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetDHCPConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetDHCPConfig(ctx, req.(*GetDHCPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateVM(ctx, req.(*CreateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateVM(ctx, req.(*UpdateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteVM(ctx, req.(*DeleteVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetVM(ctx, req.(*GetVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListVMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListVMs(ctx, req.(*ListVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateAsset(ctx, req.(*CreateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateAsset(ctx, req.(*UpdateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetAsset(ctx, req.(*GetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListAssets(ctx, req.(*ListAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteAsset(ctx, req.(*DeleteAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_RenameAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).RenameAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/RenameAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).RenameAsset(ctx, req.(*RenameAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchGetKVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetKVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchGetKVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchGetKVMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchGetKVMs(ctx, req.(*BatchGetKVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchGetDHCPConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetDHCPConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchGetDHCPConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchGetDHCPConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchGetDHCPConfigs(ctx, req.(*BatchGetDHCPConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchGetMachineLSEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetMachineLSEsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchGetMachineLSEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchGetMachineLSEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchGetMachineLSEs(ctx, req.(*BatchGetMachineLSEsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchGetMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchGetMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchGetMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchGetMachines(ctx, req.(*BatchGetMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchGetSwitches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetSwitchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchGetSwitches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchGetSwitches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchGetSwitches(ctx, req.(*BatchGetSwitchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchGetRPMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetRPMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchGetRPMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchGetRPMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchGetRPMs(ctx, req.(*BatchGetRPMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchGetDracs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetDracsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchGetDracs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchGetDracs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchGetDracs(ctx, req.(*BatchGetDracsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchGetNics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetNicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchGetNics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchGetNics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchGetNics(ctx, req.(*BatchGetNicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchGetVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchGetVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchGetVMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchGetVMs(ctx, req.(*BatchGetVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchGetVlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetVlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchGetVlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchGetVlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchGetVlans(ctx, req.(*BatchGetVlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchGetRacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetRacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchGetRacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchGetRacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchGetRacks(ctx, req.(*BatchGetRacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchGetChromePlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetChromePlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchGetChromePlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchGetChromePlatforms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchGetChromePlatforms(ctx, req.(*BatchGetChromePlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchGetMachineLSEPrototypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetMachineLSEPrototypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchGetMachineLSEPrototypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchGetMachineLSEPrototypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchGetMachineLSEPrototypes(ctx, req.(*BatchGetMachineLSEPrototypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchGetRackLSEPrototypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetRackLSEPrototypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchGetRackLSEPrototypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchGetRackLSEPrototypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchGetRackLSEPrototypes(ctx, req.(*BatchGetRackLSEPrototypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetChromeOSDeviceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChromeOSDeviceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetChromeOSDeviceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetChromeOSDeviceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetChromeOSDeviceData(ctx, req.(*GetChromeOSDeviceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateCachingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCachingServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateCachingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateCachingService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateCachingService(ctx, req.(*CreateCachingServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateCachingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCachingServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateCachingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateCachingService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateCachingService(ctx, req.(*UpdateCachingServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetCachingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCachingServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetCachingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetCachingService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetCachingService(ctx, req.(*GetCachingServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListCachingServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCachingServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListCachingServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListCachingServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListCachingServices(ctx, req.(*ListCachingServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteCachingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCachingServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteCachingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteCachingService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteCachingService(ctx, req.(*DeleteCachingServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateMachineLSEDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineLSEDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateMachineLSEDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSEDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateMachineLSEDeployment(ctx, req.(*UpdateMachineLSEDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchUpdateMachineLSEDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateMachineLSEDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchUpdateMachineLSEDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchUpdateMachineLSEDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchUpdateMachineLSEDeployment(ctx, req.(*BatchUpdateMachineLSEDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetMachineLSEDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineLSEDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetMachineLSEDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSEDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetMachineLSEDeployment(ctx, req.(*GetMachineLSEDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_BatchGetMachineLSEDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetMachineLSEDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).BatchGetMachineLSEDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/BatchGetMachineLSEDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).BatchGetMachineLSEDeployments(ctx, req.(*BatchGetMachineLSEDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListMachineLSEDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineLSEDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListMachineLSEDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListMachineLSEDeployments(ctx, req.(*ListMachineLSEDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateSchedulingUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchedulingUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateSchedulingUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateSchedulingUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateSchedulingUnit(ctx, req.(*CreateSchedulingUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateSchedulingUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchedulingUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateSchedulingUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateSchedulingUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateSchedulingUnit(ctx, req.(*UpdateSchedulingUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetSchedulingUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulingUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetSchedulingUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetSchedulingUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetSchedulingUnit(ctx, req.(*GetSchedulingUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListSchedulingUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSchedulingUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListSchedulingUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListSchedulingUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListSchedulingUnits(ctx, req.(*ListSchedulingUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteSchedulingUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchedulingUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteSchedulingUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteSchedulingUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteSchedulingUnit(ctx, req.(*DeleteSchedulingUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateConfigBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateConfigBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateConfigBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateConfigBundle(ctx, req.(*UpdateConfigBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetDeviceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetDeviceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetDeviceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetDeviceData(ctx, req.(*GetDeviceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CheckFleetTestsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFleetTestsPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CheckFleetTestsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CheckFleetTestsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CheckFleetTestsPolicy(ctx, req.(*CheckFleetTestsPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fleet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "unifiedfleet.api.v1.rpc.Fleet",
	HandlerType: (*FleetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChromePlatform",
			Handler:    _Fleet_CreateChromePlatform_Handler,
		},
		{
			MethodName: "UpdateChromePlatform",
			Handler:    _Fleet_UpdateChromePlatform_Handler,
		},
		{
			MethodName: "GetChromePlatform",
			Handler:    _Fleet_GetChromePlatform_Handler,
		},
		{
			MethodName: "ListChromePlatforms",
			Handler:    _Fleet_ListChromePlatforms_Handler,
		},
		{
			MethodName: "DeleteChromePlatform",
			Handler:    _Fleet_DeleteChromePlatform_Handler,
		},
		{
			MethodName: "ImportChromePlatforms",
			Handler:    _Fleet_ImportChromePlatforms_Handler,
		},
		{
			MethodName: "ListOSVersions",
			Handler:    _Fleet_ListOSVersions_Handler,
		},
		{
			MethodName: "ImportOSVersions",
			Handler:    _Fleet_ImportOSVersions_Handler,
		},
		{
			MethodName: "CreateMachineLSEPrototype",
			Handler:    _Fleet_CreateMachineLSEPrototype_Handler,
		},
		{
			MethodName: "UpdateMachineLSEPrototype",
			Handler:    _Fleet_UpdateMachineLSEPrototype_Handler,
		},
		{
			MethodName: "GetMachineLSEPrototype",
			Handler:    _Fleet_GetMachineLSEPrototype_Handler,
		},
		{
			MethodName: "ListMachineLSEPrototypes",
			Handler:    _Fleet_ListMachineLSEPrototypes_Handler,
		},
		{
			MethodName: "DeleteMachineLSEPrototype",
			Handler:    _Fleet_DeleteMachineLSEPrototype_Handler,
		},
		{
			MethodName: "CreateRackLSEPrototype",
			Handler:    _Fleet_CreateRackLSEPrototype_Handler,
		},
		{
			MethodName: "UpdateRackLSEPrototype",
			Handler:    _Fleet_UpdateRackLSEPrototype_Handler,
		},
		{
			MethodName: "GetRackLSEPrototype",
			Handler:    _Fleet_GetRackLSEPrototype_Handler,
		},
		{
			MethodName: "ListRackLSEPrototypes",
			Handler:    _Fleet_ListRackLSEPrototypes_Handler,
		},
		{
			MethodName: "DeleteRackLSEPrototype",
			Handler:    _Fleet_DeleteRackLSEPrototype_Handler,
		},
		{
			MethodName: "MachineRegistration",
			Handler:    _Fleet_MachineRegistration_Handler,
		},
		{
			MethodName: "UpdateMachine",
			Handler:    _Fleet_UpdateMachine_Handler,
		},
		{
			MethodName: "GetMachine",
			Handler:    _Fleet_GetMachine_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _Fleet_ListMachines_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _Fleet_DeleteMachine_Handler,
		},
		{
			MethodName: "ImportMachines",
			Handler:    _Fleet_ImportMachines_Handler,
		},
		{
			MethodName: "RenameMachine",
			Handler:    _Fleet_RenameMachine_Handler,
		},
		{
			MethodName: "RackRegistration",
			Handler:    _Fleet_RackRegistration_Handler,
		},
		{
			MethodName: "UpdateRack",
			Handler:    _Fleet_UpdateRack_Handler,
		},
		{
			MethodName: "GetRack",
			Handler:    _Fleet_GetRack_Handler,
		},
		{
			MethodName: "ListRacks",
			Handler:    _Fleet_ListRacks_Handler,
		},
		{
			MethodName: "DeleteRack",
			Handler:    _Fleet_DeleteRack_Handler,
		},
		{
			MethodName: "CreateMachineLSE",
			Handler:    _Fleet_CreateMachineLSE_Handler,
		},
		{
			MethodName: "UpdateMachineLSE",
			Handler:    _Fleet_UpdateMachineLSE_Handler,
		},
		{
			MethodName: "GetMachineLSE",
			Handler:    _Fleet_GetMachineLSE_Handler,
		},
		{
			MethodName: "ListMachineLSEs",
			Handler:    _Fleet_ListMachineLSEs_Handler,
		},
		{
			MethodName: "DeleteMachineLSE",
			Handler:    _Fleet_DeleteMachineLSE_Handler,
		},
		{
			MethodName: "RenameMachineLSE",
			Handler:    _Fleet_RenameMachineLSE_Handler,
		},
		{
			MethodName: "ImportMachineLSEs",
			Handler:    _Fleet_ImportMachineLSEs_Handler,
		},
		{
			MethodName: "ImportOSMachineLSEs",
			Handler:    _Fleet_ImportOSMachineLSEs_Handler,
		},
		{
			MethodName: "CreateRackLSE",
			Handler:    _Fleet_CreateRackLSE_Handler,
		},
		{
			MethodName: "UpdateRackLSE",
			Handler:    _Fleet_UpdateRackLSE_Handler,
		},
		{
			MethodName: "GetRackLSE",
			Handler:    _Fleet_GetRackLSE_Handler,
		},
		{
			MethodName: "ListRackLSEs",
			Handler:    _Fleet_ListRackLSEs_Handler,
		},
		{
			MethodName: "DeleteRackLSE",
			Handler:    _Fleet_DeleteRackLSE_Handler,
		},
		{
			MethodName: "CreateNic",
			Handler:    _Fleet_CreateNic_Handler,
		},
		{
			MethodName: "UpdateNic",
			Handler:    _Fleet_UpdateNic_Handler,
		},
		{
			MethodName: "GetNic",
			Handler:    _Fleet_GetNic_Handler,
		},
		{
			MethodName: "ListNics",
			Handler:    _Fleet_ListNics_Handler,
		},
		{
			MethodName: "DeleteNic",
			Handler:    _Fleet_DeleteNic_Handler,
		},
		{
			MethodName: "ImportNics",
			Handler:    _Fleet_ImportNics_Handler,
		},
		{
			MethodName: "RenameNic",
			Handler:    _Fleet_RenameNic_Handler,
		},
		{
			MethodName: "ImportDatacenters",
			Handler:    _Fleet_ImportDatacenters_Handler,
		},
		{
			MethodName: "CreateKVM",
			Handler:    _Fleet_CreateKVM_Handler,
		},
		{
			MethodName: "UpdateKVM",
			Handler:    _Fleet_UpdateKVM_Handler,
		},
		{
			MethodName: "GetKVM",
			Handler:    _Fleet_GetKVM_Handler,
		},
		{
			MethodName: "ListKVMs",
			Handler:    _Fleet_ListKVMs_Handler,
		},
		{
			MethodName: "DeleteKVM",
			Handler:    _Fleet_DeleteKVM_Handler,
		},
		{
			MethodName: "CreateRPM",
			Handler:    _Fleet_CreateRPM_Handler,
		},
		{
			MethodName: "UpdateRPM",
			Handler:    _Fleet_UpdateRPM_Handler,
		},
		{
			MethodName: "GetRPM",
			Handler:    _Fleet_GetRPM_Handler,
		},
		{
			MethodName: "ListRPMs",
			Handler:    _Fleet_ListRPMs_Handler,
		},
		{
			MethodName: "DeleteRPM",
			Handler:    _Fleet_DeleteRPM_Handler,
		},
		{
			MethodName: "CreateDrac",
			Handler:    _Fleet_CreateDrac_Handler,
		},
		{
			MethodName: "UpdateDrac",
			Handler:    _Fleet_UpdateDrac_Handler,
		},
		{
			MethodName: "GetDrac",
			Handler:    _Fleet_GetDrac_Handler,
		},
		{
			MethodName: "ListDracs",
			Handler:    _Fleet_ListDracs_Handler,
		},
		{
			MethodName: "DeleteDrac",
			Handler:    _Fleet_DeleteDrac_Handler,
		},
		{
			MethodName: "CreateSwitch",
			Handler:    _Fleet_CreateSwitch_Handler,
		},
		{
			MethodName: "UpdateSwitch",
			Handler:    _Fleet_UpdateSwitch_Handler,
		},
		{
			MethodName: "GetSwitch",
			Handler:    _Fleet_GetSwitch_Handler,
		},
		{
			MethodName: "ListSwitches",
			Handler:    _Fleet_ListSwitches_Handler,
		},
		{
			MethodName: "DeleteSwitch",
			Handler:    _Fleet_DeleteSwitch_Handler,
		},
		{
			MethodName: "RenameSwitch",
			Handler:    _Fleet_RenameSwitch_Handler,
		},
		{
			MethodName: "CreateVlan",
			Handler:    _Fleet_CreateVlan_Handler,
		},
		{
			MethodName: "UpdateVlan",
			Handler:    _Fleet_UpdateVlan_Handler,
		},
		{
			MethodName: "GetVlan",
			Handler:    _Fleet_GetVlan_Handler,
		},
		{
			MethodName: "ListVlans",
			Handler:    _Fleet_ListVlans_Handler,
		},
		{
			MethodName: "DeleteVlan",
			Handler:    _Fleet_DeleteVlan_Handler,
		},
		{
			MethodName: "ImportVlans",
			Handler:    _Fleet_ImportVlans_Handler,
		},
		{
			MethodName: "ImportOSVlans",
			Handler:    _Fleet_ImportOSVlans_Handler,
		},
		{
			MethodName: "ImportStates",
			Handler:    _Fleet_ImportStates_Handler,
		},
		{
			MethodName: "UpdateState",
			Handler:    _Fleet_UpdateState_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _Fleet_GetState_Handler,
		},
		{
			MethodName: "GetDutState",
			Handler:    _Fleet_GetDutState_Handler,
		},
		{
			MethodName: "ListDutStates",
			Handler:    _Fleet_ListDutStates_Handler,
		},
		{
			MethodName: "UpdateDutState",
			Handler:    _Fleet_UpdateDutState_Handler,
		},
		{
			MethodName: "UpdateDeviceRecoveryData",
			Handler:    _Fleet_UpdateDeviceRecoveryData_Handler,
		},
		{
			MethodName: "GetDHCPConfig",
			Handler:    _Fleet_GetDHCPConfig_Handler,
		},
		{
			MethodName: "CreateVM",
			Handler:    _Fleet_CreateVM_Handler,
		},
		{
			MethodName: "UpdateVM",
			Handler:    _Fleet_UpdateVM_Handler,
		},
		{
			MethodName: "DeleteVM",
			Handler:    _Fleet_DeleteVM_Handler,
		},
		{
			MethodName: "GetVM",
			Handler:    _Fleet_GetVM_Handler,
		},
		{
			MethodName: "ListVMs",
			Handler:    _Fleet_ListVMs_Handler,
		},
		{
			MethodName: "CreateAsset",
			Handler:    _Fleet_CreateAsset_Handler,
		},
		{
			MethodName: "UpdateAsset",
			Handler:    _Fleet_UpdateAsset_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _Fleet_GetAsset_Handler,
		},
		{
			MethodName: "ListAssets",
			Handler:    _Fleet_ListAssets_Handler,
		},
		{
			MethodName: "DeleteAsset",
			Handler:    _Fleet_DeleteAsset_Handler,
		},
		{
			MethodName: "RenameAsset",
			Handler:    _Fleet_RenameAsset_Handler,
		},
		{
			MethodName: "BatchGetKVMs",
			Handler:    _Fleet_BatchGetKVMs_Handler,
		},
		{
			MethodName: "BatchGetDHCPConfigs",
			Handler:    _Fleet_BatchGetDHCPConfigs_Handler,
		},
		{
			MethodName: "BatchGetMachineLSEs",
			Handler:    _Fleet_BatchGetMachineLSEs_Handler,
		},
		{
			MethodName: "BatchGetMachines",
			Handler:    _Fleet_BatchGetMachines_Handler,
		},
		{
			MethodName: "BatchGetSwitches",
			Handler:    _Fleet_BatchGetSwitches_Handler,
		},
		{
			MethodName: "BatchGetRPMs",
			Handler:    _Fleet_BatchGetRPMs_Handler,
		},
		{
			MethodName: "BatchGetDracs",
			Handler:    _Fleet_BatchGetDracs_Handler,
		},
		{
			MethodName: "BatchGetNics",
			Handler:    _Fleet_BatchGetNics_Handler,
		},
		{
			MethodName: "BatchGetVMs",
			Handler:    _Fleet_BatchGetVMs_Handler,
		},
		{
			MethodName: "BatchGetVlans",
			Handler:    _Fleet_BatchGetVlans_Handler,
		},
		{
			MethodName: "BatchGetRacks",
			Handler:    _Fleet_BatchGetRacks_Handler,
		},
		{
			MethodName: "BatchGetChromePlatforms",
			Handler:    _Fleet_BatchGetChromePlatforms_Handler,
		},
		{
			MethodName: "BatchGetMachineLSEPrototypes",
			Handler:    _Fleet_BatchGetMachineLSEPrototypes_Handler,
		},
		{
			MethodName: "BatchGetRackLSEPrototypes",
			Handler:    _Fleet_BatchGetRackLSEPrototypes_Handler,
		},
		{
			MethodName: "GetChromeOSDeviceData",
			Handler:    _Fleet_GetChromeOSDeviceData_Handler,
		},
		{
			MethodName: "CreateCachingService",
			Handler:    _Fleet_CreateCachingService_Handler,
		},
		{
			MethodName: "UpdateCachingService",
			Handler:    _Fleet_UpdateCachingService_Handler,
		},
		{
			MethodName: "GetCachingService",
			Handler:    _Fleet_GetCachingService_Handler,
		},
		{
			MethodName: "ListCachingServices",
			Handler:    _Fleet_ListCachingServices_Handler,
		},
		{
			MethodName: "DeleteCachingService",
			Handler:    _Fleet_DeleteCachingService_Handler,
		},
		{
			MethodName: "UpdateMachineLSEDeployment",
			Handler:    _Fleet_UpdateMachineLSEDeployment_Handler,
		},
		{
			MethodName: "BatchUpdateMachineLSEDeployment",
			Handler:    _Fleet_BatchUpdateMachineLSEDeployment_Handler,
		},
		{
			MethodName: "GetMachineLSEDeployment",
			Handler:    _Fleet_GetMachineLSEDeployment_Handler,
		},
		{
			MethodName: "BatchGetMachineLSEDeployments",
			Handler:    _Fleet_BatchGetMachineLSEDeployments_Handler,
		},
		{
			MethodName: "ListMachineLSEDeployments",
			Handler:    _Fleet_ListMachineLSEDeployments_Handler,
		},
		{
			MethodName: "CreateSchedulingUnit",
			Handler:    _Fleet_CreateSchedulingUnit_Handler,
		},
		{
			MethodName: "UpdateSchedulingUnit",
			Handler:    _Fleet_UpdateSchedulingUnit_Handler,
		},
		{
			MethodName: "GetSchedulingUnit",
			Handler:    _Fleet_GetSchedulingUnit_Handler,
		},
		{
			MethodName: "ListSchedulingUnits",
			Handler:    _Fleet_ListSchedulingUnits_Handler,
		},
		{
			MethodName: "DeleteSchedulingUnit",
			Handler:    _Fleet_DeleteSchedulingUnit_Handler,
		},
		{
			MethodName: "UpdateConfigBundle",
			Handler:    _Fleet_UpdateConfigBundle_Handler,
		},
		{
			MethodName: "GetDeviceData",
			Handler:    _Fleet_GetDeviceData_Handler,
		},
		{
			MethodName: "CheckFleetTestsPolicy",
			Handler:    _Fleet_CheckFleetTestsPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/unifiedfleet/api/v1/rpc/fleet.proto",
}
