// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: infra/tools/dirmd/proto/bq.proto

package dirmdpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DirBQRow describes a row in BigQuery table for dir metadata.
type DirBQRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about the repository the directory was read from.
	Source *Source `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// Directory name, relative to the root.
	// Examples:
	// - If the root repo is "~/chromium/src" and it contains subrepo
	//   "~/chromium/src/v8", then dir "foo/bar" will correspond to root repo,
	//   while "v8/baz" will correspond to sub repo "v8".
	Dir string `protobuf:"bytes,2,opt,name=dir,proto3" json:"dir,omitempty"`
	// Monorail metadata. Its component field should always map to the same
	// team_email field (see below) for every directory that it is listed in.
	Monorail *Monorail `protobuf:"bytes,3,opt,name=monorail,proto3" json:"monorail,omitempty"`
	// The team responsible for the directory. Only a single email is allowed.
	// For example, “team-email@chromium.org”.
	TeamEmail string `protobuf:"bytes,4,opt,name=team_email,json=teamEmail,proto3" json:"team_email,omitempty"`
	// The code in this directory is specific to this OS.
	Os OS `protobuf:"varint,5,opt,name=os,proto3,enum=chrome.dir_metadata.OS" json:"os,omitempty"`
	// Private buganizer metadata.
	Buganizer *Buganizer `protobuf:"bytes,6,opt,name=buganizer,proto3" json:"buganizer,omitempty"`
	// Public buganizer metadata.
	BuganizerPublic *Buganizer `protobuf:"bytes,7,opt,name=buganizer_public,json=buganizerPublic,proto3" json:"buganizer_public,omitempty"`
	// Team specific metadata.
	TeamSpecificMetadata *TeamSpecific `protobuf:"bytes,8,opt,name=team_specific_metadata,json=teamSpecificMetadata,proto3" json:"team_specific_metadata,omitempty"`
	// Partition_time is used to partition the table.
	// It is the time dirmd starts the BigQuery export process.
	PartitionTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=partition_time,json=partitionTime,proto3" json:"partition_time,omitempty"`
}

func (x *DirBQRow) Reset() {
	*x = DirBQRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tools_dirmd_proto_bq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirBQRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirBQRow) ProtoMessage() {}

func (x *DirBQRow) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tools_dirmd_proto_bq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirBQRow.ProtoReflect.Descriptor instead.
func (*DirBQRow) Descriptor() ([]byte, []int) {
	return file_infra_tools_dirmd_proto_bq_proto_rawDescGZIP(), []int{0}
}

func (x *DirBQRow) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DirBQRow) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *DirBQRow) GetMonorail() *Monorail {
	if x != nil {
		return x.Monorail
	}
	return nil
}

func (x *DirBQRow) GetTeamEmail() string {
	if x != nil {
		return x.TeamEmail
	}
	return ""
}

func (x *DirBQRow) GetOs() OS {
	if x != nil {
		return x.Os
	}
	return OS_OS_UNSPECIFIED
}

func (x *DirBQRow) GetBuganizer() *Buganizer {
	if x != nil {
		return x.Buganizer
	}
	return nil
}

func (x *DirBQRow) GetBuganizerPublic() *Buganizer {
	if x != nil {
		return x.BuganizerPublic
	}
	return nil
}

func (x *DirBQRow) GetTeamSpecificMetadata() *TeamSpecific {
	if x != nil {
		return x.TeamSpecificMetadata
	}
	return nil
}

func (x *DirBQRow) GetPartitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PartitionTime
	}
	return nil
}

// Information about where the directory was read from.
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Git hostname, e.g. "chromium.googlesource.com".
	GitHost string `protobuf:"bytes,1,opt,name=git_host,json=gitHost,proto3" json:"git_host,omitempty"`
	// Root repository name on the host, e.g. "chromium/src".
	RootRepo string `protobuf:"bytes,2,opt,name=root_repo,json=rootRepo,proto3" json:"root_repo,omitempty"`
	// Sub repository name on the host, e.g. "v8".
	SubRepo string `protobuf:"bytes,3,opt,name=sub_repo,json=subRepo,proto3" json:"sub_repo,omitempty"`
	// Commit ref, e.g. "refs/heads/main".
	Ref string `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
	// Commit HEX SHA1.
	Revision string `protobuf:"bytes,5,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tools_dirmd_proto_bq_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tools_dirmd_proto_bq_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_infra_tools_dirmd_proto_bq_proto_rawDescGZIP(), []int{1}
}

func (x *Source) GetGitHost() string {
	if x != nil {
		return x.GitHost
	}
	return ""
}

func (x *Source) GetRootRepo() string {
	if x != nil {
		return x.RootRepo
	}
	return ""
}

func (x *Source) GetSubRepo() string {
	if x != nil {
		return x.SubRepo
	}
	return ""
}

func (x *Source) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *Source) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

// Team specific metadata.
type TeamSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WPT-specific metadata.
	Wpt *WPT `protobuf:"bytes,1,opt,name=wpt,proto3" json:"wpt,omitempty"`
}

func (x *TeamSpecific) Reset() {
	*x = TeamSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tools_dirmd_proto_bq_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSpecific) ProtoMessage() {}

func (x *TeamSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tools_dirmd_proto_bq_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSpecific.ProtoReflect.Descriptor instead.
func (*TeamSpecific) Descriptor() ([]byte, []int) {
	return file_infra_tools_dirmd_proto_bq_proto_rawDescGZIP(), []int{2}
}

func (x *TeamSpecific) GetWpt() *WPT {
	if x != nil {
		return x.Wpt
	}
	return nil
}

var File_infra_tools_dirmd_proto_bq_proto protoreflect.FileDescriptor

var file_infra_tools_dirmd_proto_bq_proto_rawDesc = []byte{
	0x0a, 0x20, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x64, 0x69,
	0x72, 0x6d, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2e, 0x64, 0x69, 0x72, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x64, 0x69, 0x72, 0x6d, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x64, 0x69, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x03, 0x0a, 0x08, 0x44, 0x69, 0x72, 0x42, 0x51, 0x52, 0x6f,
	0x77, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2e, 0x64, 0x69, 0x72, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x2e, 0x64, 0x69, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2e, 0x64, 0x69, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x53, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x62,
	0x75, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2e, 0x64, 0x69, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x75, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x09,
	0x62, 0x75, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x10, 0x62, 0x75, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2e, 0x64, 0x69, 0x72,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x75, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x72, 0x52, 0x0f, 0x62, 0x75, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x12, 0x57, 0x0a, 0x16, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2e, 0x64, 0x69,
	0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x89, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x69, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x69, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x0c,
	0x54, 0x65, 0x61, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x03,
	0x77, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x2e, 0x64, 0x69, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x57, 0x50, 0x54, 0x52, 0x03, 0x77, 0x70, 0x74, 0x42, 0x21, 0x5a, 0x1f, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x64, 0x69, 0x72, 0x6d, 0x64, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x3b, 0x64, 0x69, 0x72, 0x6d, 0x64, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_infra_tools_dirmd_proto_bq_proto_rawDescOnce sync.Once
	file_infra_tools_dirmd_proto_bq_proto_rawDescData = file_infra_tools_dirmd_proto_bq_proto_rawDesc
)

func file_infra_tools_dirmd_proto_bq_proto_rawDescGZIP() []byte {
	file_infra_tools_dirmd_proto_bq_proto_rawDescOnce.Do(func() {
		file_infra_tools_dirmd_proto_bq_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_tools_dirmd_proto_bq_proto_rawDescData)
	})
	return file_infra_tools_dirmd_proto_bq_proto_rawDescData
}

var file_infra_tools_dirmd_proto_bq_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_infra_tools_dirmd_proto_bq_proto_goTypes = []interface{}{
	(*DirBQRow)(nil),              // 0: chrome.dir_metadata.DirBQRow
	(*Source)(nil),                // 1: chrome.dir_metadata.Source
	(*TeamSpecific)(nil),          // 2: chrome.dir_metadata.TeamSpecific
	(*Monorail)(nil),              // 3: chrome.dir_metadata.Monorail
	(OS)(0),                       // 4: chrome.dir_metadata.OS
	(*Buganizer)(nil),             // 5: chrome.dir_metadata.Buganizer
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
	(*WPT)(nil),                   // 7: chrome.dir_metadata.WPT
}
var file_infra_tools_dirmd_proto_bq_proto_depIdxs = []int32{
	1, // 0: chrome.dir_metadata.DirBQRow.source:type_name -> chrome.dir_metadata.Source
	3, // 1: chrome.dir_metadata.DirBQRow.monorail:type_name -> chrome.dir_metadata.Monorail
	4, // 2: chrome.dir_metadata.DirBQRow.os:type_name -> chrome.dir_metadata.OS
	5, // 3: chrome.dir_metadata.DirBQRow.buganizer:type_name -> chrome.dir_metadata.Buganizer
	5, // 4: chrome.dir_metadata.DirBQRow.buganizer_public:type_name -> chrome.dir_metadata.Buganizer
	2, // 5: chrome.dir_metadata.DirBQRow.team_specific_metadata:type_name -> chrome.dir_metadata.TeamSpecific
	6, // 6: chrome.dir_metadata.DirBQRow.partition_time:type_name -> google.protobuf.Timestamp
	7, // 7: chrome.dir_metadata.TeamSpecific.wpt:type_name -> chrome.dir_metadata.WPT
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_infra_tools_dirmd_proto_bq_proto_init() }
func file_infra_tools_dirmd_proto_bq_proto_init() {
	if File_infra_tools_dirmd_proto_bq_proto != nil {
		return
	}
	file_infra_tools_dirmd_proto_dir_metadata_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_infra_tools_dirmd_proto_bq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirBQRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tools_dirmd_proto_bq_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tools_dirmd_proto_bq_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_tools_dirmd_proto_bq_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_tools_dirmd_proto_bq_proto_goTypes,
		DependencyIndexes: file_infra_tools_dirmd_proto_bq_proto_depIdxs,
		MessageInfos:      file_infra_tools_dirmd_proto_bq_proto_msgTypes,
	}.Build()
	File_infra_tools_dirmd_proto_bq_proto = out.File
	file_infra_tools_dirmd_proto_bq_proto_rawDesc = nil
	file_infra_tools_dirmd_proto_bq_proto_goTypes = nil
	file_infra_tools_dirmd_proto_bq_proto_depIdxs = nil
}
