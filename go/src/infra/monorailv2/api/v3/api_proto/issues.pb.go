// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: api/v3/api_proto/issues.proto

package api_proto

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of notification a change should trigger.
// See monorail/doc/userguide/email.md
// Next available tag: 2
type NotifyType int32

const (
	// The default value. This value is unused.
	NotifyType_NOTIFY_TYPE_UNSPECIFIED NotifyType = 0
	// An email notification should be sent.
	NotifyType_EMAIL NotifyType = 1
	// No notifcation should be triggered at all.
	NotifyType_NO_NOTIFICATION NotifyType = 2
)

// Enum value maps for NotifyType.
var (
	NotifyType_name = map[int32]string{
		0: "NOTIFY_TYPE_UNSPECIFIED",
		1: "EMAIL",
		2: "NO_NOTIFICATION",
	}
	NotifyType_value = map[string]int32{
		"NOTIFY_TYPE_UNSPECIFIED": 0,
		"EMAIL":                   1,
		"NO_NOTIFICATION":         2,
	}
)

func (x NotifyType) Enum() *NotifyType {
	p := new(NotifyType)
	*p = x
	return p
}

func (x NotifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v3_api_proto_issues_proto_enumTypes[0].Descriptor()
}

func (NotifyType) Type() protoreflect.EnumType {
	return &file_api_v3_api_proto_issues_proto_enumTypes[0]
}

func (x NotifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyType.Descriptor instead.
func (NotifyType) EnumDescriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{0}
}

// The request message for Issues.GetIssue.
// Next available tag: 2
type GetIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the issue to request.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetIssueRequest) Reset() {
	*x = GetIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssueRequest) ProtoMessage() {}

func (x *GetIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssueRequest.ProtoReflect.Descriptor instead.
func (*GetIssueRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{0}
}

func (x *GetIssueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The request message for Issues.BatchGetIssues.
// Next available tag: 3
type BatchGetIssuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The project name from which to batch get issues. If included, the parent
	// of all the issues specified in `names` must match this field.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The issues to request. Maximum of 100 can be retrieved.
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetIssuesRequest) Reset() {
	*x = BatchGetIssuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetIssuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetIssuesRequest) ProtoMessage() {}

func (x *BatchGetIssuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetIssuesRequest.ProtoReflect.Descriptor instead.
func (*BatchGetIssuesRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{1}
}

func (x *BatchGetIssuesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchGetIssuesRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// The response message for Issues.BatchGetIssues.
// Next available tag: 2
type BatchGetIssuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Issues matching the given request.
	Issues []*Issue `protobuf:"bytes,1,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *BatchGetIssuesResponse) Reset() {
	*x = BatchGetIssuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetIssuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetIssuesResponse) ProtoMessage() {}

func (x *BatchGetIssuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetIssuesResponse.ProtoReflect.Descriptor instead.
func (*BatchGetIssuesResponse) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{2}
}

func (x *BatchGetIssuesResponse) GetIssues() []*Issue {
	if x != nil {
		return x.Issues
	}
	return nil
}

// The request message for Issues.SearchIssues.
// Next available tag: 6
type SearchIssuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of Projects in which to search issues.
	Projects []string `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	// The query string can contain any number of free text and
	// field search expressions.
	// Please see https://bugs.chromium.org/p/chromium/issues/searchtips for more
	// details of how the query string works.
	//
	// Canned queries have been deprecated in v3 in favor of search scoping using
	// parentheses support.
	// For clients who previously used canned queries, we're providing the
	// mapping of legacy canned query IDs to Monorail search syntax:
	//   - Format: (can_id, description, query_string)
	//   - (1, 'All issues', '')
	//   - (2, 'Open issues', 'is:open')
	//   - (3, 'Open and owned by me', 'is:open owner:me')
	//   - (4, 'Open and reported by me', 'is:open reporter:me')
	//   - (5, 'Open and starred by me', 'is:open is:starred')
	//   - (6, 'New issues', 'status:new')
	//   - (7, 'Issues to verify', 'status=fixed,done')
	//   - (8, 'Open with comment by me', 'is:open commentby:me')
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// The maximum number of items to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 100; values above 100 will be coerced to 100.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `SearchIssues` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `SearchIssues` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The string of comma separated field names used to order the items.
	// Adding '-' before a field, reverses the sort order.
	// E.g. 'stars,-status' sorts the items by number of stars, high to low,
	// then by status, low to high.
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *SearchIssuesRequest) Reset() {
	*x = SearchIssuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchIssuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIssuesRequest) ProtoMessage() {}

func (x *SearchIssuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIssuesRequest.ProtoReflect.Descriptor instead.
func (*SearchIssuesRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{3}
}

func (x *SearchIssuesRequest) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *SearchIssuesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchIssuesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchIssuesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SearchIssuesRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// The response message for Issues.SearchIssues.
// Next available tag: 3
type SearchIssuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Issues matching the given request.
	Issues []*Issue `protobuf:"bytes,1,rep,name=issues,proto3" json:"issues,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *SearchIssuesResponse) Reset() {
	*x = SearchIssuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchIssuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIssuesResponse) ProtoMessage() {}

func (x *SearchIssuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIssuesResponse.ProtoReflect.Descriptor instead.
func (*SearchIssuesResponse) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{4}
}

func (x *SearchIssuesResponse) GetIssues() []*Issue {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *SearchIssuesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The request message for Issues.ListComments.
// Next available tag: 5
type ListCommentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the issue for which to list comments.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of items to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 100; values above 100 will be coerced to 100.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListComments` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListComments` must
	// match the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// For our initial release this filter only supports filtering to comments
	// related to a specific approval.
	// For example `approval = "projects/monorail/approvalDefs/1"`,
	// Note that no further logical or comparison operators are supported
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListCommentsRequest) Reset() {
	*x = ListCommentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentsRequest) ProtoMessage() {}

func (x *ListCommentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentsRequest.ProtoReflect.Descriptor instead.
func (*ListCommentsRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{5}
}

func (x *ListCommentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListCommentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCommentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListCommentsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// The response message for Issues.ListComments
// Next available tag: 3
type ListCommentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The comments from the specified issue.
	Comments []*Comment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListCommentsResponse) Reset() {
	*x = ListCommentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentsResponse) ProtoMessage() {}

func (x *ListCommentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentsResponse.ProtoReflect.Descriptor instead.
func (*ListCommentsResponse) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{6}
}

func (x *ListCommentsResponse) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *ListCommentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// An attachment to upload to a comment or description.
// Next available tag: 3
type AttachmentUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Content  []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *AttachmentUpload) Reset() {
	*x = AttachmentUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachmentUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachmentUpload) ProtoMessage() {}

func (x *AttachmentUpload) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachmentUpload.ProtoReflect.Descriptor instead.
func (*AttachmentUpload) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{7}
}

func (x *AttachmentUpload) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *AttachmentUpload) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

// Holds changes to one issue, used in ModifyIssuesRequest.
// Next available tag: 9
type IssueDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The issue's `name` field is used to identify the issue to be
	// updated. `issue.name` must always be filled.
	//
	// Values with rule-based Derivation within `issue` and in `field_vals_remove`
	// will be ignored.
	Issue *Issue `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	// The list of fields in `issue` to be updated.
	//
	// Repeated fields set on `issue` will be appended to.
	//
	// Non-repeated fields (e.g. `owner`) can be set with `issue.owner` set and
	// either 'owner' or 'owner.user' added to `update_mask`.
	// To unset non-repeated fields back to their default value, `issue.owner`
	// must contain the default value and `update_mask` must include 'owner.user'
	// NOT 'owner'.
	//
	// Its `field_values`, however, are a special case. Fields can be specified as
	// single-value or multi-value in their FieldDef.
	//
	// Single-value Field: if there is preexisting FieldValue with the same
	// `field` and `phase`, it will be REPLACED.
	//
	// Multi-value Field: a new value will be appended, unless the same `field`,
	// `phase`, `value` combination already exists. In that case, the FieldValue
	// will be ignored. In other words, duplicate values are ignored.
	// (With the exception of crbug.com/monorail/8137 until it is fixed).
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Cc's to remove.
	CcsRemove []string `protobuf:"bytes,3,rep,name=ccs_remove,json=ccsRemove,proto3" json:"ccs_remove,omitempty"`
	// Blocked_on issues to remove.
	BlockedOnIssuesRemove []*IssueRef `protobuf:"bytes,4,rep,name=blocked_on_issues_remove,json=blockedOnIssuesRemove,proto3" json:"blocked_on_issues_remove,omitempty"`
	// Blocking issues to remove.
	BlockingIssuesRemove []*IssueRef `protobuf:"bytes,5,rep,name=blocking_issues_remove,json=blockingIssuesRemove,proto3" json:"blocking_issues_remove,omitempty"`
	// Components to remove.
	ComponentsRemove []string `protobuf:"bytes,6,rep,name=components_remove,json=componentsRemove,proto3" json:"components_remove,omitempty"`
	// Labels to remove.
	LabelsRemove []string `protobuf:"bytes,7,rep,name=labels_remove,json=labelsRemove,proto3" json:"labels_remove,omitempty"`
	// FieldValues to remove. Any values that did not already exist will be
	// ignored e.g. if you append a FieldValue in issue and remove it here, it
	// will still be added.
	FieldValsRemove []*FieldValue `protobuf:"bytes,8,rep,name=field_vals_remove,json=fieldValsRemove,proto3" json:"field_vals_remove,omitempty"`
}

func (x *IssueDelta) Reset() {
	*x = IssueDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueDelta) ProtoMessage() {}

func (x *IssueDelta) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueDelta.ProtoReflect.Descriptor instead.
func (*IssueDelta) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{8}
}

func (x *IssueDelta) GetIssue() *Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

func (x *IssueDelta) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *IssueDelta) GetCcsRemove() []string {
	if x != nil {
		return x.CcsRemove
	}
	return nil
}

func (x *IssueDelta) GetBlockedOnIssuesRemove() []*IssueRef {
	if x != nil {
		return x.BlockedOnIssuesRemove
	}
	return nil
}

func (x *IssueDelta) GetBlockingIssuesRemove() []*IssueRef {
	if x != nil {
		return x.BlockingIssuesRemove
	}
	return nil
}

func (x *IssueDelta) GetComponentsRemove() []string {
	if x != nil {
		return x.ComponentsRemove
	}
	return nil
}

func (x *IssueDelta) GetLabelsRemove() []string {
	if x != nil {
		return x.LabelsRemove
	}
	return nil
}

func (x *IssueDelta) GetFieldValsRemove() []*FieldValue {
	if x != nil {
		return x.FieldValsRemove
	}
	return nil
}

// Changes to make to an ApprovalValue. Used to ModifyIssueApprovalValues or
// to MakeIssueFromTemplate.
//
// NOTE: The same handling of FieldValues discussed in IssueDelta applies here.
// Next available tag: 6
type ApprovalDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ApprovalValue we want to update. `approval_value.name` must always be
	// set.
	ApprovalValue *ApprovalValue `protobuf:"bytes,1,opt,name=approval_value,json=approvalValue,proto3" json:"approval_value,omitempty"`
	// Repeated fields found in `update_mask` will be appended to.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Resource names of the approvers we want to remove.
	ApproversRemove []string `protobuf:"bytes,3,rep,name=approvers_remove,json=approversRemove,proto3" json:"approvers_remove,omitempty"`
	// FieldValues that do not belong to `approval_value` will trigger error.
	FieldValsRemove []*FieldValue `protobuf:"bytes,5,rep,name=field_vals_remove,json=fieldValsRemove,proto3" json:"field_vals_remove,omitempty"` // TODO(crbug.com/monorail/8019): add Attachment uploading and removing.
}

func (x *ApprovalDelta) Reset() {
	*x = ApprovalDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalDelta) ProtoMessage() {}

func (x *ApprovalDelta) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalDelta.ProtoReflect.Descriptor instead.
func (*ApprovalDelta) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{9}
}

func (x *ApprovalDelta) GetApprovalValue() *ApprovalValue {
	if x != nil {
		return x.ApprovalValue
	}
	return nil
}

func (x *ApprovalDelta) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *ApprovalDelta) GetApproversRemove() []string {
	if x != nil {
		return x.ApproversRemove
	}
	return nil
}

func (x *ApprovalDelta) GetFieldValsRemove() []*FieldValue {
	if x != nil {
		return x.FieldValsRemove
	}
	return nil
}

// The request message for Issues.ModifyIssues.
// Next available tag: 5
type ModifyIssuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The issue changes to make. A maximum of 100 issue changes can be requested.
	// There is also a constraint of 50 additional 'impacted issues' per
	// ModifyIssuesRequest. 'Impacted issues' are issues that are adding/removing
	// `blocked_on`, `blocking`, or `merge`
	// If you encounter this error, consider significantly smaller batches.
	Deltas []*IssueDelta `protobuf:"bytes,1,rep,name=deltas,proto3" json:"deltas,omitempty"`
	// The type of notification the modifications should trigger.
	NotifyType NotifyType `protobuf:"varint,2,opt,name=notify_type,json=notifyType,proto3,enum=monorail.v3.NotifyType" json:"notify_type,omitempty"`
	// The comment text that should be added to each issue in delta.
	// Max length is 51200 characters.
	CommentContent string `protobuf:"bytes,3,opt,name=comment_content,json=commentContent,proto3" json:"comment_content,omitempty"`
	// The attachment that will be to each comment for each issue in delta.
	Uploads []*AttachmentUpload `protobuf:"bytes,4,rep,name=uploads,proto3" json:"uploads,omitempty"`
}

func (x *ModifyIssuesRequest) Reset() {
	*x = ModifyIssuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyIssuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyIssuesRequest) ProtoMessage() {}

func (x *ModifyIssuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyIssuesRequest.ProtoReflect.Descriptor instead.
func (*ModifyIssuesRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{10}
}

func (x *ModifyIssuesRequest) GetDeltas() []*IssueDelta {
	if x != nil {
		return x.Deltas
	}
	return nil
}

func (x *ModifyIssuesRequest) GetNotifyType() NotifyType {
	if x != nil {
		return x.NotifyType
	}
	return NotifyType_NOTIFY_TYPE_UNSPECIFIED
}

func (x *ModifyIssuesRequest) GetCommentContent() string {
	if x != nil {
		return x.CommentContent
	}
	return ""
}

func (x *ModifyIssuesRequest) GetUploads() []*AttachmentUpload {
	if x != nil {
		return x.Uploads
	}
	return nil
}

// The response message for Issues.ModifyIssues.
// Next available tag: 2
type ModifyIssuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated issues.
	Issues []*Issue `protobuf:"bytes,1,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *ModifyIssuesResponse) Reset() {
	*x = ModifyIssuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyIssuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyIssuesResponse) ProtoMessage() {}

func (x *ModifyIssuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyIssuesResponse.ProtoReflect.Descriptor instead.
func (*ModifyIssuesResponse) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{11}
}

func (x *ModifyIssuesResponse) GetIssues() []*Issue {
	if x != nil {
		return x.Issues
	}
	return nil
}

// The request message for Issues.ModifyIssueApprovalValues.
// Next available tag: 4
type ModifyIssueApprovalValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ApprovalValue changes to make. Maximum of 100 deltas can be requested.
	Deltas []*ApprovalDelta `protobuf:"bytes,1,rep,name=deltas,proto3" json:"deltas,omitempty"`
	// The type of notification the modifications should trigger.
	NotifyType NotifyType `protobuf:"varint,2,opt,name=notify_type,json=notifyType,proto3,enum=monorail.v3.NotifyType" json:"notify_type,omitempty"`
	// The `content` of the Comment created for each change in `deltas`.
	// Max length is 51200 characters.
	CommentContent string `protobuf:"bytes,3,opt,name=comment_content,json=commentContent,proto3" json:"comment_content,omitempty"`
}

func (x *ModifyIssueApprovalValuesRequest) Reset() {
	*x = ModifyIssueApprovalValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyIssueApprovalValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyIssueApprovalValuesRequest) ProtoMessage() {}

func (x *ModifyIssueApprovalValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyIssueApprovalValuesRequest.ProtoReflect.Descriptor instead.
func (*ModifyIssueApprovalValuesRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{12}
}

func (x *ModifyIssueApprovalValuesRequest) GetDeltas() []*ApprovalDelta {
	if x != nil {
		return x.Deltas
	}
	return nil
}

func (x *ModifyIssueApprovalValuesRequest) GetNotifyType() NotifyType {
	if x != nil {
		return x.NotifyType
	}
	return NotifyType_NOTIFY_TYPE_UNSPECIFIED
}

func (x *ModifyIssueApprovalValuesRequest) GetCommentContent() string {
	if x != nil {
		return x.CommentContent
	}
	return ""
}

// The response message for Issues.ModifyIssueApprovalValuesRequest.
// Next available tag: 2
type ModifyIssueApprovalValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated ApprovalValues.
	ApprovalValues []*ApprovalValue `protobuf:"bytes,1,rep,name=approval_values,json=approvalValues,proto3" json:"approval_values,omitempty"`
}

func (x *ModifyIssueApprovalValuesResponse) Reset() {
	*x = ModifyIssueApprovalValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyIssueApprovalValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyIssueApprovalValuesResponse) ProtoMessage() {}

func (x *ModifyIssueApprovalValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyIssueApprovalValuesResponse.ProtoReflect.Descriptor instead.
func (*ModifyIssueApprovalValuesResponse) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{13}
}

func (x *ModifyIssueApprovalValuesResponse) GetApprovalValues() []*ApprovalValue {
	if x != nil {
		return x.ApprovalValues
	}
	return nil
}

// The request message for Issue.ListApprovalValues.
// Next available tag: 2
type ListApprovalValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the issue for which to list approval values.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListApprovalValuesRequest) Reset() {
	*x = ListApprovalValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApprovalValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApprovalValuesRequest) ProtoMessage() {}

func (x *ListApprovalValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApprovalValuesRequest.ProtoReflect.Descriptor instead.
func (*ListApprovalValuesRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{14}
}

func (x *ListApprovalValuesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

// The response message for Issues.ListApprovalValues.
// Next available tag: 2
type ListApprovalValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The approval values from the specified issue.
	ApprovalValues []*ApprovalValue `protobuf:"bytes,1,rep,name=approval_values,json=approvalValues,proto3" json:"approval_values,omitempty"`
}

func (x *ListApprovalValuesResponse) Reset() {
	*x = ListApprovalValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApprovalValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApprovalValuesResponse) ProtoMessage() {}

func (x *ListApprovalValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApprovalValuesResponse.ProtoReflect.Descriptor instead.
func (*ListApprovalValuesResponse) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{15}
}

func (x *ListApprovalValuesResponse) GetApprovalValues() []*ApprovalValue {
	if x != nil {
		return x.ApprovalValues
	}
	return nil
}

// The request message for Issues.ModifyCommentState.
// Next available tag: 3
type ModifyCommentStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of the comment to modify state.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Requested state.
	State IssueContentState `protobuf:"varint,2,opt,name=state,proto3,enum=monorail.v3.IssueContentState" json:"state,omitempty"`
}

func (x *ModifyCommentStateRequest) Reset() {
	*x = ModifyCommentStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCommentStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCommentStateRequest) ProtoMessage() {}

func (x *ModifyCommentStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCommentStateRequest.ProtoReflect.Descriptor instead.
func (*ModifyCommentStateRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{16}
}

func (x *ModifyCommentStateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModifyCommentStateRequest) GetState() IssueContentState {
	if x != nil {
		return x.State
	}
	return IssueContentState_STATE_UNSPECIFIED
}

// The response message for Issues.ModifyCommentState.
// Next available tag: 2
type ModifyCommentStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated comment after modifying state.
	Comment *Comment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ModifyCommentStateResponse) Reset() {
	*x = ModifyCommentStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCommentStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCommentStateResponse) ProtoMessage() {}

func (x *ModifyCommentStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCommentStateResponse.ProtoReflect.Descriptor instead.
func (*ModifyCommentStateResponse) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{17}
}

func (x *ModifyCommentStateResponse) GetComment() *Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

// The request message for MakeIssueFromTemplate.
// Next available tag: 5
type MakeIssueFromTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of the template to use for filling in default values
	// and adding approvals and phases.
	Template string `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	// The issue differences relative to the `template.issue` default.
	TemplateIssueDelta *IssueDelta `protobuf:"bytes,2,opt,name=template_issue_delta,json=templateIssueDelta,proto3" json:"template_issue_delta,omitempty"`
	// Changes to fields belonging to approvals relative to template default.
	// While ApprovalDelta can hold additional information, this method only
	// allows adding and removing field values, all other deltas will be ignored.
	TemplateApprovalDeltas []*ApprovalDelta `protobuf:"bytes,3,rep,name=template_approval_deltas,json=templateApprovalDeltas,proto3" json:"template_approval_deltas,omitempty"`
	// The issue description, will be saved as the first comment.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *MakeIssueFromTemplateRequest) Reset() {
	*x = MakeIssueFromTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeIssueFromTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeIssueFromTemplateRequest) ProtoMessage() {}

func (x *MakeIssueFromTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeIssueFromTemplateRequest.ProtoReflect.Descriptor instead.
func (*MakeIssueFromTemplateRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{18}
}

func (x *MakeIssueFromTemplateRequest) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *MakeIssueFromTemplateRequest) GetTemplateIssueDelta() *IssueDelta {
	if x != nil {
		return x.TemplateIssueDelta
	}
	return nil
}

func (x *MakeIssueFromTemplateRequest) GetTemplateApprovalDeltas() []*ApprovalDelta {
	if x != nil {
		return x.TemplateApprovalDeltas
	}
	return nil
}

func (x *MakeIssueFromTemplateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// The request message for MakeIssue.
// Next available tag: 6
type MakeIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the project the issue should belong to.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The issue to be created.
	Issue *Issue `protobuf:"bytes,2,opt,name=issue,proto3" json:"issue,omitempty"`
	// The issue description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The type of notification the creation should trigger.
	NotifyType NotifyType `protobuf:"varint,4,opt,name=notify_type,json=notifyType,proto3,enum=monorail.v3.NotifyType" json:"notify_type,omitempty"`
	// The attachment that will be attached to each new issue.
	Uploads []*AttachmentUpload `protobuf:"bytes,5,rep,name=uploads,proto3" json:"uploads,omitempty"`
}

func (x *MakeIssueRequest) Reset() {
	*x = MakeIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v3_api_proto_issues_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeIssueRequest) ProtoMessage() {}

func (x *MakeIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v3_api_proto_issues_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeIssueRequest.ProtoReflect.Descriptor instead.
func (*MakeIssueRequest) Descriptor() ([]byte, []int) {
	return file_api_v3_api_proto_issues_proto_rawDescGZIP(), []int{19}
}

func (x *MakeIssueRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *MakeIssueRequest) GetIssue() *Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

func (x *MakeIssueRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MakeIssueRequest) GetNotifyType() NotifyType {
	if x != nil {
		return x.NotifyType
	}
	return NotifyType_NOTIFY_TYPE_UNSPECIFIED
}

func (x *MakeIssueRequest) GetUploads() []*AttachmentUpload {
	if x != nil {
		return x.Uploads
	}
	return nil
}

var File_api_v3_api_proto_issues_proto protoreflect.FileDescriptor

var file_api_v3_api_proto_issues_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0xfa, 0x41, 0x15, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75,
	0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x73, 0x73, 0x75, 0x65, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa,
	0x41, 0x17, 0x0a, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x18, 0xfa, 0x41, 0x15, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x44, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x1d, 0xfa, 0x41, 0x17, 0x0a, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75,
	0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x6a, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x41, 0x15,
	0x0a, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x49, 0x73, 0x73, 0x75, 0x65, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x70, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x04, 0x0a, 0x0a, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x63,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17,
	0xfa, 0x41, 0x14, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x63, 0x73, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x4e, 0x0a, 0x18, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x15, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x4f, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x4b, 0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12,
	0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x41, 0x1c, 0x0a,
	0x1a, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x73,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x42,
	0x0a, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x41, 0x14, 0x0a, 0x12, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x73,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x76, 0x33, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x76, 0x33, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x14,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x22, 0xb9, 0x01, 0x0a, 0x20, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x76, 0x33, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x21,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x41, 0x15, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72,
	0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x73, 0x73, 0x75, 0x65, 0xe0, 0x41, 0x02,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x19,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xfa, 0x41, 0x17, 0x0a, 0x15, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x72, 0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x4c, 0x0a, 0x1a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x9a, 0x02, 0x0a, 0x1c, 0x4d, 0x61, 0x6b, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x41, 0x18, 0x0a, 0x16, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72,
	0x62, 0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x14, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x18, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61,
	0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x52, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x02,
	0x0a, 0x10, 0x4d, 0x61, 0x6b, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0xfa, 0x41, 0x17, 0x0a, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x62,
	0x75, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x05, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x37, 0x0a, 0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2a, 0x49, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x32, 0x96, 0x07, 0x0a, 0x06, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x3e,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x22, 0x00, 0x12, 0x5b,
	0x0a, 0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x76, 0x33, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7c, 0x0a, 0x19, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2d, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x15, 0x4d, 0x61, 0x6b, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x4d, 0x61,
	0x6b, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61,
	0x69, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69,
	0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x22, 0x00, 0x42, 0x23, 0x5a, 0x21,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x76, 0x32,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v3_api_proto_issues_proto_rawDescOnce sync.Once
	file_api_v3_api_proto_issues_proto_rawDescData = file_api_v3_api_proto_issues_proto_rawDesc
)

func file_api_v3_api_proto_issues_proto_rawDescGZIP() []byte {
	file_api_v3_api_proto_issues_proto_rawDescOnce.Do(func() {
		file_api_v3_api_proto_issues_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v3_api_proto_issues_proto_rawDescData)
	})
	return file_api_v3_api_proto_issues_proto_rawDescData
}

var file_api_v3_api_proto_issues_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v3_api_proto_issues_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_api_v3_api_proto_issues_proto_goTypes = []interface{}{
	(NotifyType)(0),                           // 0: monorail.v3.NotifyType
	(*GetIssueRequest)(nil),                   // 1: monorail.v3.GetIssueRequest
	(*BatchGetIssuesRequest)(nil),             // 2: monorail.v3.BatchGetIssuesRequest
	(*BatchGetIssuesResponse)(nil),            // 3: monorail.v3.BatchGetIssuesResponse
	(*SearchIssuesRequest)(nil),               // 4: monorail.v3.SearchIssuesRequest
	(*SearchIssuesResponse)(nil),              // 5: monorail.v3.SearchIssuesResponse
	(*ListCommentsRequest)(nil),               // 6: monorail.v3.ListCommentsRequest
	(*ListCommentsResponse)(nil),              // 7: monorail.v3.ListCommentsResponse
	(*AttachmentUpload)(nil),                  // 8: monorail.v3.AttachmentUpload
	(*IssueDelta)(nil),                        // 9: monorail.v3.IssueDelta
	(*ApprovalDelta)(nil),                     // 10: monorail.v3.ApprovalDelta
	(*ModifyIssuesRequest)(nil),               // 11: monorail.v3.ModifyIssuesRequest
	(*ModifyIssuesResponse)(nil),              // 12: monorail.v3.ModifyIssuesResponse
	(*ModifyIssueApprovalValuesRequest)(nil),  // 13: monorail.v3.ModifyIssueApprovalValuesRequest
	(*ModifyIssueApprovalValuesResponse)(nil), // 14: monorail.v3.ModifyIssueApprovalValuesResponse
	(*ListApprovalValuesRequest)(nil),         // 15: monorail.v3.ListApprovalValuesRequest
	(*ListApprovalValuesResponse)(nil),        // 16: monorail.v3.ListApprovalValuesResponse
	(*ModifyCommentStateRequest)(nil),         // 17: monorail.v3.ModifyCommentStateRequest
	(*ModifyCommentStateResponse)(nil),        // 18: monorail.v3.ModifyCommentStateResponse
	(*MakeIssueFromTemplateRequest)(nil),      // 19: monorail.v3.MakeIssueFromTemplateRequest
	(*MakeIssueRequest)(nil),                  // 20: monorail.v3.MakeIssueRequest
	(*Issue)(nil),                             // 21: monorail.v3.Issue
	(*Comment)(nil),                           // 22: monorail.v3.Comment
	(*fieldmaskpb.FieldMask)(nil),             // 23: google.protobuf.FieldMask
	(*IssueRef)(nil),                          // 24: monorail.v3.IssueRef
	(*FieldValue)(nil),                        // 25: monorail.v3.FieldValue
	(*ApprovalValue)(nil),                     // 26: monorail.v3.ApprovalValue
	(IssueContentState)(0),                    // 27: monorail.v3.IssueContentState
}
var file_api_v3_api_proto_issues_proto_depIdxs = []int32{
	21, // 0: monorail.v3.BatchGetIssuesResponse.issues:type_name -> monorail.v3.Issue
	21, // 1: monorail.v3.SearchIssuesResponse.issues:type_name -> monorail.v3.Issue
	22, // 2: monorail.v3.ListCommentsResponse.comments:type_name -> monorail.v3.Comment
	21, // 3: monorail.v3.IssueDelta.issue:type_name -> monorail.v3.Issue
	23, // 4: monorail.v3.IssueDelta.update_mask:type_name -> google.protobuf.FieldMask
	24, // 5: monorail.v3.IssueDelta.blocked_on_issues_remove:type_name -> monorail.v3.IssueRef
	24, // 6: monorail.v3.IssueDelta.blocking_issues_remove:type_name -> monorail.v3.IssueRef
	25, // 7: monorail.v3.IssueDelta.field_vals_remove:type_name -> monorail.v3.FieldValue
	26, // 8: monorail.v3.ApprovalDelta.approval_value:type_name -> monorail.v3.ApprovalValue
	23, // 9: monorail.v3.ApprovalDelta.update_mask:type_name -> google.protobuf.FieldMask
	25, // 10: monorail.v3.ApprovalDelta.field_vals_remove:type_name -> monorail.v3.FieldValue
	9,  // 11: monorail.v3.ModifyIssuesRequest.deltas:type_name -> monorail.v3.IssueDelta
	0,  // 12: monorail.v3.ModifyIssuesRequest.notify_type:type_name -> monorail.v3.NotifyType
	8,  // 13: monorail.v3.ModifyIssuesRequest.uploads:type_name -> monorail.v3.AttachmentUpload
	21, // 14: monorail.v3.ModifyIssuesResponse.issues:type_name -> monorail.v3.Issue
	10, // 15: monorail.v3.ModifyIssueApprovalValuesRequest.deltas:type_name -> monorail.v3.ApprovalDelta
	0,  // 16: monorail.v3.ModifyIssueApprovalValuesRequest.notify_type:type_name -> monorail.v3.NotifyType
	26, // 17: monorail.v3.ModifyIssueApprovalValuesResponse.approval_values:type_name -> monorail.v3.ApprovalValue
	26, // 18: monorail.v3.ListApprovalValuesResponse.approval_values:type_name -> monorail.v3.ApprovalValue
	27, // 19: monorail.v3.ModifyCommentStateRequest.state:type_name -> monorail.v3.IssueContentState
	22, // 20: monorail.v3.ModifyCommentStateResponse.comment:type_name -> monorail.v3.Comment
	9,  // 21: monorail.v3.MakeIssueFromTemplateRequest.template_issue_delta:type_name -> monorail.v3.IssueDelta
	10, // 22: monorail.v3.MakeIssueFromTemplateRequest.template_approval_deltas:type_name -> monorail.v3.ApprovalDelta
	21, // 23: monorail.v3.MakeIssueRequest.issue:type_name -> monorail.v3.Issue
	0,  // 24: monorail.v3.MakeIssueRequest.notify_type:type_name -> monorail.v3.NotifyType
	8,  // 25: monorail.v3.MakeIssueRequest.uploads:type_name -> monorail.v3.AttachmentUpload
	1,  // 26: monorail.v3.Issues.GetIssue:input_type -> monorail.v3.GetIssueRequest
	2,  // 27: monorail.v3.Issues.BatchGetIssues:input_type -> monorail.v3.BatchGetIssuesRequest
	4,  // 28: monorail.v3.Issues.SearchIssues:input_type -> monorail.v3.SearchIssuesRequest
	6,  // 29: monorail.v3.Issues.ListComments:input_type -> monorail.v3.ListCommentsRequest
	11, // 30: monorail.v3.Issues.ModifyIssues:input_type -> monorail.v3.ModifyIssuesRequest
	13, // 31: monorail.v3.Issues.ModifyIssueApprovalValues:input_type -> monorail.v3.ModifyIssueApprovalValuesRequest
	15, // 32: monorail.v3.Issues.ListApprovalValues:input_type -> monorail.v3.ListApprovalValuesRequest
	17, // 33: monorail.v3.Issues.ModifyCommentState:input_type -> monorail.v3.ModifyCommentStateRequest
	19, // 34: monorail.v3.Issues.MakeIssueFromTemplate:input_type -> monorail.v3.MakeIssueFromTemplateRequest
	20, // 35: monorail.v3.Issues.MakeIssue:input_type -> monorail.v3.MakeIssueRequest
	21, // 36: monorail.v3.Issues.GetIssue:output_type -> monorail.v3.Issue
	3,  // 37: monorail.v3.Issues.BatchGetIssues:output_type -> monorail.v3.BatchGetIssuesResponse
	5,  // 38: monorail.v3.Issues.SearchIssues:output_type -> monorail.v3.SearchIssuesResponse
	7,  // 39: monorail.v3.Issues.ListComments:output_type -> monorail.v3.ListCommentsResponse
	12, // 40: monorail.v3.Issues.ModifyIssues:output_type -> monorail.v3.ModifyIssuesResponse
	14, // 41: monorail.v3.Issues.ModifyIssueApprovalValues:output_type -> monorail.v3.ModifyIssueApprovalValuesResponse
	16, // 42: monorail.v3.Issues.ListApprovalValues:output_type -> monorail.v3.ListApprovalValuesResponse
	18, // 43: monorail.v3.Issues.ModifyCommentState:output_type -> monorail.v3.ModifyCommentStateResponse
	21, // 44: monorail.v3.Issues.MakeIssueFromTemplate:output_type -> monorail.v3.Issue
	21, // 45: monorail.v3.Issues.MakeIssue:output_type -> monorail.v3.Issue
	36, // [36:46] is the sub-list for method output_type
	26, // [26:36] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_api_v3_api_proto_issues_proto_init() }
func file_api_v3_api_proto_issues_proto_init() {
	if File_api_v3_api_proto_issues_proto != nil {
		return
	}
	file_api_v3_api_proto_issue_objects_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_v3_api_proto_issues_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetIssuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetIssuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchIssuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchIssuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachmentUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyIssuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyIssuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyIssueApprovalValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyIssueApprovalValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApprovalValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApprovalValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCommentStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCommentStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeIssueFromTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v3_api_proto_issues_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v3_api_proto_issues_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v3_api_proto_issues_proto_goTypes,
		DependencyIndexes: file_api_v3_api_proto_issues_proto_depIdxs,
		EnumInfos:         file_api_v3_api_proto_issues_proto_enumTypes,
		MessageInfos:      file_api_v3_api_proto_issues_proto_msgTypes,
	}.Build()
	File_api_v3_api_proto_issues_proto = out.File
	file_api_v3_api_proto_issues_proto_rawDesc = nil
	file_api_v3_api_proto_issues_proto_goTypes = nil
	file_api_v3_api_proto_issues_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IssuesClient is the client API for Issues service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IssuesClient interface {
	// status: ALPHA
	// Returns the requested Issue.
	//
	// Raises:
	//   INVALID_ARGUMENT if `name` is formatted incorrectly.
	//   NOT_FOUND if the issue does not exist.
	//   PERMISSION_DENIED if the requester is not allowed to view the issue.
	GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error)
	// status: ALPHA
	// Returns the requested Issues.
	//
	// Raises:
	//   INVALID_ARGUMENT if `names` is formatted incorrectly. Or if a parent
	//       collection in `names` does not match the value in `parent`.
	//   NOT_FOUND if any of the given issues do not exist.
	//   PERMISSION_DENIED if the requester does not have permission to view one
	//       (or more) of the given issues.
	BatchGetIssues(ctx context.Context, in *BatchGetIssuesRequest, opts ...grpc.CallOption) (*BatchGetIssuesResponse, error)
	// status: ALPHA
	// Searches over issues within the specified projects.
	//
	// Raises:
	//   INVALID_ARGUMENT if project names or search query are invalid.
	SearchIssues(ctx context.Context, in *SearchIssuesRequest, opts ...grpc.CallOption) (*SearchIssuesResponse, error)
	// status: ALPHA
	// Lists comments for an issue.
	//
	// Raises:
	//   INVALID_ARGUMENT if `parent` is formatted incorrectly or `page_size` < 0.
	//   NOT_FOUND if `parent` does not exist.
	//   PERMISSION_DENIED if the requester is not allowed to view `parent`.
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
	// status: ALPHA
	// Modifies Issues and creates a new Comment for each.
	// Issues with NOOP changes and no comment_content will not be updated
	// and will not be included in the response.
	// We do not offer a standard UpdateIssue because every issue change
	// must result in the side-effect of creating a new Comment, and may result in
	// the side effect of sending a notification. We also want to allow for any
	// combination of issue changes to be made at once in a monolithic method.
	//
	// Raises:
	//   INVALID_ARGUMENT required fields are missing or fields are formatted
	//     incorrectly.
	//   NOT_FOUND if any specified issues are not found.
	//   PERMISSION_DENIED if the requester is not allowed to make the
	//     requested change.
	ModifyIssues(ctx context.Context, in *ModifyIssuesRequest, opts ...grpc.CallOption) (*ModifyIssuesResponse, error)
	// status: ALPHA
	// Modifies ApprovalValues and creates a new Comment for each delta.
	// We do not offer a standard UpdateApprovalValue because changes result
	// in creating Comments on the parent Issue, and may have the side effect of
	// sending notifications. We also want to allow for any combination of
	// approval changes to be made at once in a monolithic method.
	// To modify owner add 'owner' to update_mask, though 'owner.user' works too.
	//
	// Raises:
	//   INVALID_ARGUMENT required fields are missing or fields are formatted
	//     incorrectly.
	//   NOT_FOUND if any specified ApprovalValues are not found.
	//   PERMISSION_DENIED if the requester is not allowed to make any of the
	//     requested changes.
	ModifyIssueApprovalValues(ctx context.Context, in *ModifyIssueApprovalValuesRequest, opts ...grpc.CallOption) (*ModifyIssueApprovalValuesResponse, error)
	// status: ALPHA
	// Lists approval values for an issue.
	//
	// Raises:
	//   INVALID_ARGUMENT if request `parent` is formatted incorrectly.
	//   NOT_FOUND if the parent issue does not exist.
	//   PERMISSION_DENIED if the requester is not allowed to view parent issue.
	ListApprovalValues(ctx context.Context, in *ListApprovalValuesRequest, opts ...grpc.CallOption) (*ListApprovalValuesResponse, error)
	// status: NOT READY
	// Changes state for a comment. Supported state transitions:
	//   - ACTIVE -> DELETED
	//   - ACTIVE -> SPAM
	//   - DELETED -> ACTIVE
	//   - SPAM -> ACTIVE
	//
	// Raises:
	//   TODO(crbug/monorail/7867): Document errors when implemented
	ModifyCommentState(ctx context.Context, in *ModifyCommentStateRequest, opts ...grpc.CallOption) (*ModifyCommentStateResponse, error)
	// status: NOT READY
	// Makes an issue from an IssueTemplate and deltas.
	//
	// Raises:
	//   TODO(crbug/monorail/7197): Document errors when implemented
	MakeIssueFromTemplate(ctx context.Context, in *MakeIssueFromTemplateRequest, opts ...grpc.CallOption) (*Issue, error)
	// status: ALPHA
	// Makes a basic issue, does not support phases, approvals, or approval
	// fields.
	// We do not offer a standard CreateIssue because Issue descriptions are
	// required, but not included in the Issue proto.
	//
	// Raises:
	//   INVALID_ARGUMENT if any given names does not have a valid format, if any
	//     fields in the requested issue were invalid, or if proposed values
	//     violates filter rules that should error.
	//   NOT_FOUND if no project exists with the given name.
	//   PERMISSION_DENIED if user lacks sufficient permissions.
	MakeIssue(ctx context.Context, in *MakeIssueRequest, opts ...grpc.CallOption) (*Issue, error)
}
type issuesPRPCClient struct {
	client *prpc.Client
}

func NewIssuesPRPCClient(client *prpc.Client) IssuesClient {
	return &issuesPRPCClient{client}
}

func (c *issuesPRPCClient) GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.client.Call(ctx, "monorail.v3.Issues", "GetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) BatchGetIssues(ctx context.Context, in *BatchGetIssuesRequest, opts ...grpc.CallOption) (*BatchGetIssuesResponse, error) {
	out := new(BatchGetIssuesResponse)
	err := c.client.Call(ctx, "monorail.v3.Issues", "BatchGetIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) SearchIssues(ctx context.Context, in *SearchIssuesRequest, opts ...grpc.CallOption) (*SearchIssuesResponse, error) {
	out := new(SearchIssuesResponse)
	err := c.client.Call(ctx, "monorail.v3.Issues", "SearchIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.client.Call(ctx, "monorail.v3.Issues", "ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ModifyIssues(ctx context.Context, in *ModifyIssuesRequest, opts ...grpc.CallOption) (*ModifyIssuesResponse, error) {
	out := new(ModifyIssuesResponse)
	err := c.client.Call(ctx, "monorail.v3.Issues", "ModifyIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ModifyIssueApprovalValues(ctx context.Context, in *ModifyIssueApprovalValuesRequest, opts ...grpc.CallOption) (*ModifyIssueApprovalValuesResponse, error) {
	out := new(ModifyIssueApprovalValuesResponse)
	err := c.client.Call(ctx, "monorail.v3.Issues", "ModifyIssueApprovalValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ListApprovalValues(ctx context.Context, in *ListApprovalValuesRequest, opts ...grpc.CallOption) (*ListApprovalValuesResponse, error) {
	out := new(ListApprovalValuesResponse)
	err := c.client.Call(ctx, "monorail.v3.Issues", "ListApprovalValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ModifyCommentState(ctx context.Context, in *ModifyCommentStateRequest, opts ...grpc.CallOption) (*ModifyCommentStateResponse, error) {
	out := new(ModifyCommentStateResponse)
	err := c.client.Call(ctx, "monorail.v3.Issues", "ModifyCommentState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) MakeIssueFromTemplate(ctx context.Context, in *MakeIssueFromTemplateRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.client.Call(ctx, "monorail.v3.Issues", "MakeIssueFromTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) MakeIssue(ctx context.Context, in *MakeIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.client.Call(ctx, "monorail.v3.Issues", "MakeIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type issuesClient struct {
	cc grpc.ClientConnInterface
}

func NewIssuesClient(cc grpc.ClientConnInterface) IssuesClient {
	return &issuesClient{cc}
}

func (c *issuesClient) GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/monorail.v3.Issues/GetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) BatchGetIssues(ctx context.Context, in *BatchGetIssuesRequest, opts ...grpc.CallOption) (*BatchGetIssuesResponse, error) {
	out := new(BatchGetIssuesResponse)
	err := c.cc.Invoke(ctx, "/monorail.v3.Issues/BatchGetIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) SearchIssues(ctx context.Context, in *SearchIssuesRequest, opts ...grpc.CallOption) (*SearchIssuesResponse, error) {
	out := new(SearchIssuesResponse)
	err := c.cc.Invoke(ctx, "/monorail.v3.Issues/SearchIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, "/monorail.v3.Issues/ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ModifyIssues(ctx context.Context, in *ModifyIssuesRequest, opts ...grpc.CallOption) (*ModifyIssuesResponse, error) {
	out := new(ModifyIssuesResponse)
	err := c.cc.Invoke(ctx, "/monorail.v3.Issues/ModifyIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ModifyIssueApprovalValues(ctx context.Context, in *ModifyIssueApprovalValuesRequest, opts ...grpc.CallOption) (*ModifyIssueApprovalValuesResponse, error) {
	out := new(ModifyIssueApprovalValuesResponse)
	err := c.cc.Invoke(ctx, "/monorail.v3.Issues/ModifyIssueApprovalValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ListApprovalValues(ctx context.Context, in *ListApprovalValuesRequest, opts ...grpc.CallOption) (*ListApprovalValuesResponse, error) {
	out := new(ListApprovalValuesResponse)
	err := c.cc.Invoke(ctx, "/monorail.v3.Issues/ListApprovalValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ModifyCommentState(ctx context.Context, in *ModifyCommentStateRequest, opts ...grpc.CallOption) (*ModifyCommentStateResponse, error) {
	out := new(ModifyCommentStateResponse)
	err := c.cc.Invoke(ctx, "/monorail.v3.Issues/ModifyCommentState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) MakeIssueFromTemplate(ctx context.Context, in *MakeIssueFromTemplateRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/monorail.v3.Issues/MakeIssueFromTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) MakeIssue(ctx context.Context, in *MakeIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/monorail.v3.Issues/MakeIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuesServer is the server API for Issues service.
type IssuesServer interface {
	// status: ALPHA
	// Returns the requested Issue.
	//
	// Raises:
	//   INVALID_ARGUMENT if `name` is formatted incorrectly.
	//   NOT_FOUND if the issue does not exist.
	//   PERMISSION_DENIED if the requester is not allowed to view the issue.
	GetIssue(context.Context, *GetIssueRequest) (*Issue, error)
	// status: ALPHA
	// Returns the requested Issues.
	//
	// Raises:
	//   INVALID_ARGUMENT if `names` is formatted incorrectly. Or if a parent
	//       collection in `names` does not match the value in `parent`.
	//   NOT_FOUND if any of the given issues do not exist.
	//   PERMISSION_DENIED if the requester does not have permission to view one
	//       (or more) of the given issues.
	BatchGetIssues(context.Context, *BatchGetIssuesRequest) (*BatchGetIssuesResponse, error)
	// status: ALPHA
	// Searches over issues within the specified projects.
	//
	// Raises:
	//   INVALID_ARGUMENT if project names or search query are invalid.
	SearchIssues(context.Context, *SearchIssuesRequest) (*SearchIssuesResponse, error)
	// status: ALPHA
	// Lists comments for an issue.
	//
	// Raises:
	//   INVALID_ARGUMENT if `parent` is formatted incorrectly or `page_size` < 0.
	//   NOT_FOUND if `parent` does not exist.
	//   PERMISSION_DENIED if the requester is not allowed to view `parent`.
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error)
	// status: ALPHA
	// Modifies Issues and creates a new Comment for each.
	// Issues with NOOP changes and no comment_content will not be updated
	// and will not be included in the response.
	// We do not offer a standard UpdateIssue because every issue change
	// must result in the side-effect of creating a new Comment, and may result in
	// the side effect of sending a notification. We also want to allow for any
	// combination of issue changes to be made at once in a monolithic method.
	//
	// Raises:
	//   INVALID_ARGUMENT required fields are missing or fields are formatted
	//     incorrectly.
	//   NOT_FOUND if any specified issues are not found.
	//   PERMISSION_DENIED if the requester is not allowed to make the
	//     requested change.
	ModifyIssues(context.Context, *ModifyIssuesRequest) (*ModifyIssuesResponse, error)
	// status: ALPHA
	// Modifies ApprovalValues and creates a new Comment for each delta.
	// We do not offer a standard UpdateApprovalValue because changes result
	// in creating Comments on the parent Issue, and may have the side effect of
	// sending notifications. We also want to allow for any combination of
	// approval changes to be made at once in a monolithic method.
	// To modify owner add 'owner' to update_mask, though 'owner.user' works too.
	//
	// Raises:
	//   INVALID_ARGUMENT required fields are missing or fields are formatted
	//     incorrectly.
	//   NOT_FOUND if any specified ApprovalValues are not found.
	//   PERMISSION_DENIED if the requester is not allowed to make any of the
	//     requested changes.
	ModifyIssueApprovalValues(context.Context, *ModifyIssueApprovalValuesRequest) (*ModifyIssueApprovalValuesResponse, error)
	// status: ALPHA
	// Lists approval values for an issue.
	//
	// Raises:
	//   INVALID_ARGUMENT if request `parent` is formatted incorrectly.
	//   NOT_FOUND if the parent issue does not exist.
	//   PERMISSION_DENIED if the requester is not allowed to view parent issue.
	ListApprovalValues(context.Context, *ListApprovalValuesRequest) (*ListApprovalValuesResponse, error)
	// status: NOT READY
	// Changes state for a comment. Supported state transitions:
	//   - ACTIVE -> DELETED
	//   - ACTIVE -> SPAM
	//   - DELETED -> ACTIVE
	//   - SPAM -> ACTIVE
	//
	// Raises:
	//   TODO(crbug/monorail/7867): Document errors when implemented
	ModifyCommentState(context.Context, *ModifyCommentStateRequest) (*ModifyCommentStateResponse, error)
	// status: NOT READY
	// Makes an issue from an IssueTemplate and deltas.
	//
	// Raises:
	//   TODO(crbug/monorail/7197): Document errors when implemented
	MakeIssueFromTemplate(context.Context, *MakeIssueFromTemplateRequest) (*Issue, error)
	// status: ALPHA
	// Makes a basic issue, does not support phases, approvals, or approval
	// fields.
	// We do not offer a standard CreateIssue because Issue descriptions are
	// required, but not included in the Issue proto.
	//
	// Raises:
	//   INVALID_ARGUMENT if any given names does not have a valid format, if any
	//     fields in the requested issue were invalid, or if proposed values
	//     violates filter rules that should error.
	//   NOT_FOUND if no project exists with the given name.
	//   PERMISSION_DENIED if user lacks sufficient permissions.
	MakeIssue(context.Context, *MakeIssueRequest) (*Issue, error)
}

// UnimplementedIssuesServer can be embedded to have forward compatible implementations.
type UnimplementedIssuesServer struct {
}

func (*UnimplementedIssuesServer) GetIssue(context.Context, *GetIssueRequest) (*Issue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssue not implemented")
}
func (*UnimplementedIssuesServer) BatchGetIssues(context.Context, *BatchGetIssuesRequest) (*BatchGetIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetIssues not implemented")
}
func (*UnimplementedIssuesServer) SearchIssues(context.Context, *SearchIssuesRequest) (*SearchIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchIssues not implemented")
}
func (*UnimplementedIssuesServer) ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (*UnimplementedIssuesServer) ModifyIssues(context.Context, *ModifyIssuesRequest) (*ModifyIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyIssues not implemented")
}
func (*UnimplementedIssuesServer) ModifyIssueApprovalValues(context.Context, *ModifyIssueApprovalValuesRequest) (*ModifyIssueApprovalValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyIssueApprovalValues not implemented")
}
func (*UnimplementedIssuesServer) ListApprovalValues(context.Context, *ListApprovalValuesRequest) (*ListApprovalValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApprovalValues not implemented")
}
func (*UnimplementedIssuesServer) ModifyCommentState(context.Context, *ModifyCommentStateRequest) (*ModifyCommentStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyCommentState not implemented")
}
func (*UnimplementedIssuesServer) MakeIssueFromTemplate(context.Context, *MakeIssueFromTemplateRequest) (*Issue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeIssueFromTemplate not implemented")
}
func (*UnimplementedIssuesServer) MakeIssue(context.Context, *MakeIssueRequest) (*Issue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeIssue not implemented")
}

func RegisterIssuesServer(s prpc.Registrar, srv IssuesServer) {
	s.RegisterService(&_Issues_serviceDesc, srv)
}

func _Issues_GetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).GetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Issues/GetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).GetIssue(ctx, req.(*GetIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_BatchGetIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).BatchGetIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Issues/BatchGetIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).BatchGetIssues(ctx, req.(*BatchGetIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_SearchIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).SearchIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Issues/SearchIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).SearchIssues(ctx, req.(*SearchIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Issues/ListComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ModifyIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ModifyIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Issues/ModifyIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ModifyIssues(ctx, req.(*ModifyIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ModifyIssueApprovalValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyIssueApprovalValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ModifyIssueApprovalValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Issues/ModifyIssueApprovalValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ModifyIssueApprovalValues(ctx, req.(*ModifyIssueApprovalValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ListApprovalValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApprovalValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ListApprovalValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Issues/ListApprovalValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ListApprovalValues(ctx, req.(*ListApprovalValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ModifyCommentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyCommentStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ModifyCommentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Issues/ModifyCommentState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ModifyCommentState(ctx, req.(*ModifyCommentStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_MakeIssueFromTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeIssueFromTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).MakeIssueFromTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Issues/MakeIssueFromTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).MakeIssueFromTemplate(ctx, req.(*MakeIssueFromTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_MakeIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).MakeIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v3.Issues/MakeIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).MakeIssue(ctx, req.(*MakeIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Issues_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monorail.v3.Issues",
	HandlerType: (*IssuesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIssue",
			Handler:    _Issues_GetIssue_Handler,
		},
		{
			MethodName: "BatchGetIssues",
			Handler:    _Issues_BatchGetIssues_Handler,
		},
		{
			MethodName: "SearchIssues",
			Handler:    _Issues_SearchIssues_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _Issues_ListComments_Handler,
		},
		{
			MethodName: "ModifyIssues",
			Handler:    _Issues_ModifyIssues_Handler,
		},
		{
			MethodName: "ModifyIssueApprovalValues",
			Handler:    _Issues_ModifyIssueApprovalValues_Handler,
		},
		{
			MethodName: "ListApprovalValues",
			Handler:    _Issues_ListApprovalValues_Handler,
		},
		{
			MethodName: "ModifyCommentState",
			Handler:    _Issues_ModifyCommentState_Handler,
		},
		{
			MethodName: "MakeIssueFromTemplate",
			Handler:    _Issues_MakeIssueFromTemplate_Handler,
		},
		{
			MethodName: "MakeIssue",
			Handler:    _Issues_MakeIssue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v3/api_proto/issues.proto",
}
