// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package weetbix.v1;

import "google/protobuf/timestamp.proto";

import "infra/appengine/weetbix/internal/config/proto/test_variant_analysis_config.proto";


option go_package = "infra/appengine/weetbix/internal/config/proto;configpb";

// ProjectConfig is the project-specific configuration data for Weetbix.
message ProjectConfig {

  // The project metadata (eg. display name).
  ProjectMetadata project_metadata = 6;

  // The monorail configuration to use when filing bugs.
  MonorailProject monorail = 1;

  // The threshold at which to file bugs.
  // If reason cluster's impact exceeds the given threshold,
  // a bug will be filed for it.
  // Alternatively, if test name cluster's impact exceeds 134% of the given
  // threshold, a bug will also be filed for it.
  //
  // Weetbix's bias towards reason clusters reflects the fact that bugs
  // filed for reasons should be better scoped and more actionable
  // (focus on one problem).
  ImpactThreshold bug_filing_threshold = 2;

  // Per realm configurations.
  repeated RealmConfig realms = 3;

  // The last time this project configuration was updated.
  // Weetbix sets and stores this value internally. Do not set
  // in your project's configuration file, it will be ignored.
  google.protobuf.Timestamp last_updated = 4;

  // Configuration for how to cluster test results.
  Clustering clustering = 5;
}


// ProjectMetadata provides data about the project that are mostly used in ui.
message ProjectMetadata {

  // Indicates the preferred display name for the project in the UI.
  string display_name = 1;
}

// MonorailProject describes the configuration to use when filing bugs
// into a given monorail project.
message MonorailProject {
  // The monorail project being described.
  // E.g. "chromium".
  string project = 1;

  // The field values to use when creating new bugs.
  // For example, on chromium issue tracker, there is a manadatory
  // issue type field (field 10), which must be set to "Bug".
  repeated MonorailFieldValue default_field_values = 2;

  // The ID of the issue's priority field. You can find this by visiting
  // https://monorail-prod.appspot.com/p/<project>/adminLabels, scrolling
  // down to Custom fields and finding the ID of the field you wish to set.
  int64 priority_field_id = 3;

  // The possible bug priorities and their associated impact thresholds.
  // Priorities must be listed from highest (i.e. P0) to lowest (i.e. P3).
  // Higher priorities can only be reached if the thresholds for all lower
  // priorities are also met.
  // The impact thresholds for setting the lowest priority implicitly
  // identifies the bug closure threshold -- if no priority can be
  // matched, the bug is closed. Satisfying the threshold for filing bugs MUST
  // at least imply the threshold for the lowest priority, and MAY imply
  // the thresholds of higher priorities.
  repeated MonorailPriority priorities = 4;

  // Controls the amount of hysteresis used in setting bug priorities.
  // Once a bug is assigned a given priority, its priority will only be
  // increased if it exceeds the next priority's thresholds by the
  // specified percentage margin, and decreased if the current priority's
  // thresholds exceed the bug's impact by the given percentage margin.
  //
  // A value of 100 indicates impact may be double the threshold for
  // the next highest priority value, (or half the threshold of the
  // current priority value,) before a bug's priority is increased
  // (or decreased).
  //
  // Valid values are from 0 (no hystersis) to 1,000 (10x hysteresis).
  int64 priority_hysteresis_percent = 5;

  // The prefix that should appear when displaying bugs from the
  // given bug tracking system. E.g. "crbug.com" or "fxbug.dev".
  // If no prefix is specified, only the bug number will appear.
  // Otherwise, the supplifed prefix will appear, followed by a
  // forward slash ("/"), followed by the bug number.
  // Valid prefixes match `^[a-z0-9\-.]{0,64}$`.
  string display_prefix = 6;

  // The preferred hostname to use in links to monorail. For example,
  // "bugs.chromium.org" or "bugs.fuchsia.dev".
  string monorail_hostname = 7;
}

// MonorailFieldValue describes a monorail field/value pair.
message MonorailFieldValue {
  // The ID of the field to set. You can find this by visiting
  // https://monorail-prod.appspot.com/p/<project>/adminLabels, scrolling
  // down to Custom fields and finding the ID of the field you wish to set.
  int64 field_id = 1;

  // The field value. Values are encoded according to the field type:
  // - Enumeration types: the string enumeration value (e.g. "Bug").
  // - Integer types: the integer, converted to a string (e.g. "1052").
  // - String types: the value, included verbatim.
  // - User types: the user's resource name (e.g. "users/2627516260").
  //   User IDs can be identified by looking at the people listing for a
  //   project:  https://monorail-prod.appspot.com/p/<project>/people/list.
  //   The User ID is included in the URL as u=<number> when clicking into
  //   the page for a particular user. For example, "user/3816576959" is
  //   https://monorail-prod.appspot.com/p/chromium/people/detail?u=3816576959.
  // - Date types: the number of seconds since epoch, as a string
  //   (e.g. "1609459200" for 1 January 2021).
  // - URL type: the URL value, as a string (e.g. "https://www.google.com/").
  //
  // The source of truth for mapping of field types to values is as
  // defined in the Monorail v3 API, found here:
  // https://source.chromium.org/chromium/infra/infra/+/main:appengine/monorail/api/v3/api_proto/issue_objects.proto?q=%22message%20FieldValue%22
  string value = 2;
}

// MonorailPriority represents configuration for when to use a given
// priority value in a bug.
message MonorailPriority {
  // The monorail priority value. For example, "0". This depends on the
  // valid priority field values you have defined in your monorail project.
  string priority = 1;

  // The threshold at which to apply the priority.
  ImpactThreshold threshold = 2;
}

// ImpactThreshold specifies a condition on a cluster's impact metrics.
// The threshold is considered satisfied if any of the individual metric
// thresholds is met or exceeded (i.e. if multiple thresholds are set, they
// are combined using an OR-semantic). If no threshold is set on any individual
// metric, the threshold as a whole is unsatisfiable.
message ImpactThreshold {
  // The number of test results that were unexpected failures.
  MetricThreshold test_results_failed = 4;

  // The number of test runs that failed.
  // A test run (also known as a 'shard' (chromium) or 'task' (Chrome OS))
  // is considered failed if all tries of test(s) in it unexpectedly failed.
  // The failed test run is attributed to the last failure of each of the
  // test(s) that failed on all tries.
  MetricThreshold test_runs_failed = 5;

  // The number of presubmit runs that failed.
  MetricThreshold presubmit_runs_failed = 6;

  // Deprecated. No longer has any effect. Retained for textproto
  // compatibility only.
  optional int64 unexpected_failures_1d = 1;

  // Deprecated. No longer has any effect. Retained for textproto
  // compatibility only.
  optional int64 unexpected_failures_3d = 2;

  // Deprecated. No longer has any effect. Retained for textproto
  // compatibility only.
  optional int64 unexpected_failures_7d = 3;
}

// MetricThreshold specifies thresholds for a particular metric.
// The threshold is considered satisfied if any of the individual metric
// thresholds is met or exceeded (i.e. if multiple thresholds are set, they
// are combined using an OR-semantic). If no threshold is set, the threshold
// as a whole is unsatisfiable.
message MetricThreshold {
  // The threshold for one day.
  optional int64 one_day = 1;

  // The threshold for three day.
  optional int64 three_day = 2;

  // The threshold for seven days.
  optional int64 seven_day = 3;
}

// Configurations per realm.
message RealmConfig {
  // Name of the realm.
  //
  // Must match `^[a-z0-9_\.\-/]{1,400}$`.
  // Must not contain the project part. I.e. for "chromium:ci" realm the value
  // here must be "ci".
  string name = 1;

  // Test variant analysis configurations for the realm.
  TestVariantAnalysisConfig test_variant_analysis = 2;
}

// Configuration for how test results are clustered.
message Clustering {
  // Rules used to cluster test results by test name.
  // The order of rules matters; the first matching rule will be used
  // to cluster a given test result.
  //
  // If no rule matches, the test results will be clustered on the
  // full test name. This corresponds approximately to the rule:
  // {
  //   name: "Full test name"
  //   pattern: "^(?P<testname>.*)$"
  //   like_template: "${testname}"
  // }
  repeated TestNameClusteringRule test_name_rules = 1;
}

// A rule used to cluster a test result by test name.
message TestNameClusteringRule {
  // A human-readable name for the rule. This should be unique for each rule.
  // This may be used by Weetbix to explain why it chose to cluster the test
  // name in this way.
  string name = 1;

  // The regular expression describing which test names should be clustered
  // by this rule.
  //
  // Example.
  //   Assume our project uploads google test (gtest) results with the test
  //   name prefix "gtest://".
  //   If want to cluster value-parameterized google tests
  //   together based on the test suite and test case name (ignoring
  //   the value parameter), we may use a pattern like:
  //     "^gtest://(\w+/)?(?P<testcase>\w+\.\w+)/\w+$"
  //
  //   This will allow us to cluster test names like:
  //     "gtest://InstantiationOne/ColorSpaceTest.testNullTransform/0"
  //     "gtest://InstantiationOne/ColorSpaceTest.testNullTransform/1"
  //     "gtest://InstantiationTwo/ColorSpaceTest.testNullTransform/0"
  //   together.
  //
  //   See https://github.com/google/googletest/blob/main/docs/advanced.md#how-to-write-value-parameterized-tests
  //   to understand value-parameterised google tests.
  //
  // Use ?P<name> to name capture groups, so their values can be used in
  // like_template below.
  string pattern = 2;

  // The template used to generate a LIKE expression on test names
  // that defines the test name cluster identified by this rule.
  //
  // This like expression has two purposes:
  // (1) If the test name cluster is large enough to justify the
  //     creation of a bug cluster, the like expression is used to
  //     generate a failure association rule of the following form:
  //        test LIKE "<evaluated like_template>"
  // (2) A hash of the expression is used as the clustering key for the
  //     test name-based suggested cluster. This generally has the desired
  //     clustering behaviour, i.e. the parts of the test name which
  //     are important enough to included in the LIKE expression for (1)
  //     are also those on which clustering should occur.
  //
  // As is usual for LIKE expressions, the template can contain
  // the following operators to do wildcard matching:
  // * '%' for wildcard match of an arbitrary number of characters, and
  // * '_' for single character wildcard match.
  //
  // To match literal '%' or '_', escape the operator with a '\',
  // i.e. use "\%" or "\_" to match literal '%' and '_' respectively.
  // To match literal '\', you should use "\\".
  //
  // The template can refer to parts of the test name matched by
  // the rule pattern using ${name}, where name refers to the capture
  // group (see pattern). To insert the literal '$', the sequence '$$'
  // should be used.
  //
  // Example.
  //   Assume our project uploads google test (gtest) results with the test
  //   name prefix "gtest://". Further assume we used the pattern:
  //     "^gtest://(\w+/)?(?P<testcase>\w+\.\w+)/\w+$"
  //
  //   We might use the following like_template:
  //     "gtest://%${testcase}%"
  //
  //   When instantiated for a value-parameterised test, e.g.
  //   "gtest://InstantiationOne/ColorSpaceTest.testNullTransform/0",
  //   the result would be a failure association rule like:
  //     test LIKE "gtest://%ColorSpaceTest.testNullTransform%"
  //
  //   Note the use of ${testcase} to refer to the testname capture group
  //   specified in the pattern example.
  //
  //   See https://github.com/google/googletest/blob/main/docs/advanced.md#how-to-write-value-parameterized-tests
  //   to understand value-parameterised google tests.
  //
  // It is known that not all clusters can be precisely matched by
  // a LIKE expression. Nonetheless, Weetbix prefers LIKE expressions
  // as they are easier to comprehend and modify by users, and in
  // most cases, the added precision is not required.
  //
  // As such, your rule should try to ensure the generated LIKE statement
  // captures your clustering logic as best it can. Your LIKE expression
  // MUST match all test names matched by your regex pattern, and MAY
  // capture additional test names (though this is preferably minimised,
  // to reduce differences between the suggested clusters and eventual
  // bug clusters).
  //
  // Weetbix will automatically escape any '%' '_' and '\' in parts of
  // the matched test name before substitution to ensure captured parts
  // of the test name are matched literally and not interpreted.
  string like_template = 3;
}