// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: infra/appengine/weetbix/internal/tasks/taskspb/tasks.proto

package taskspb

import (
	v1 "go.chromium.org/luci/resultdb/proto/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	proto "infra/appengine/weetbix/internal/ingestion/control/proto"
	v11 "infra/appengine/weetbix/proto/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Payload of IngestTestResults task.
type IngestTestResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp representing the start of the data retention period
	// for the ingested test results. In case of multiple builds
	// ingested for one CV run, the partition_time used for all
	// builds must be the same.
	PartitionTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=partition_time,json=partitionTime,proto3" json:"partition_time,omitempty"`
	// The build that is being ingested.
	Build *proto.BuildResult `protobuf:"bytes,8,opt,name=build,proto3" json:"build,omitempty"`
	// Context about the presubmit run the build was a part of. Only
	// populated if the build is a presubmit run.
	PresubmitRun *proto.PresubmitResult `protobuf:"bytes,9,opt,name=presubmit_run,json=presubmitRun,proto3" json:"presubmit_run,omitempty"`
}

func (x *IngestTestResults) Reset() {
	*x = IngestTestResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestTestResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestTestResults) ProtoMessage() {}

func (x *IngestTestResults) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestTestResults.ProtoReflect.Descriptor instead.
func (*IngestTestResults) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescGZIP(), []int{0}
}

func (x *IngestTestResults) GetPartitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PartitionTime
	}
	return nil
}

func (x *IngestTestResults) GetBuild() *proto.BuildResult {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *IngestTestResults) GetPresubmitRun() *proto.PresubmitResult {
	if x != nil {
		return x.PresubmitRun
	}
	return nil
}

// ResultDB-specific information.
type ResultDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information of the invocation.
	Invocation *v1.Invocation `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// Hostname of the ResultDB instance, such as "results.api.cr.dev".
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *ResultDB) Reset() {
	*x = ResultDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultDB) ProtoMessage() {}

func (x *ResultDB) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultDB.ProtoReflect.Descriptor instead.
func (*ResultDB) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescGZIP(), []int{1}
}

func (x *ResultDB) GetInvocation() *v1.Invocation {
	if x != nil {
		return x.Invocation
	}
	return nil
}

func (x *ResultDB) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// Payload of CollectTestResults task.
type CollectTestResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ResultDB-specific information.
	Resultdb *ResultDB `protobuf:"bytes,1,opt,name=resultdb,proto3" json:"resultdb,omitempty"`
	// Builder of the invocation.
	Builder string `protobuf:"bytes,2,opt,name=builder,proto3" json:"builder,omitempty"`
	// If the task is for a try build.
	IsPreSubmit bool `protobuf:"varint,3,opt,name=is_pre_submit,json=isPreSubmit,proto3" json:"is_pre_submit,omitempty"`
	// If the try build contributes to a CL's submission.
	ContributedToClSubmission bool `protobuf:"varint,4,opt,name=contributed_to_cl_submission,json=contributedToClSubmission,proto3" json:"contributed_to_cl_submission,omitempty"`
}

func (x *CollectTestResults) Reset() {
	*x = CollectTestResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectTestResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectTestResults) ProtoMessage() {}

func (x *CollectTestResults) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectTestResults.ProtoReflect.Descriptor instead.
func (*CollectTestResults) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescGZIP(), []int{2}
}

func (x *CollectTestResults) GetResultdb() *ResultDB {
	if x != nil {
		return x.Resultdb
	}
	return nil
}

func (x *CollectTestResults) GetBuilder() string {
	if x != nil {
		return x.Builder
	}
	return ""
}

func (x *CollectTestResults) GetIsPreSubmit() bool {
	if x != nil {
		return x.IsPreSubmit
	}
	return false
}

func (x *CollectTestResults) GetContributedToClSubmission() bool {
	if x != nil {
		return x.ContributedToClSubmission
	}
	return false
}

// Information that can form a key to an AnalyzedTestVariant row.
type TestVariantKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Realm       string `protobuf:"bytes,1,opt,name=realm,proto3" json:"realm,omitempty"`
	TestId      string `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	VariantHash string `protobuf:"bytes,3,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
}

func (x *TestVariantKey) Reset() {
	*x = TestVariantKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVariantKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantKey) ProtoMessage() {}

func (x *TestVariantKey) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantKey.ProtoReflect.Descriptor instead.
func (*TestVariantKey) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescGZIP(), []int{3}
}

func (x *TestVariantKey) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *TestVariantKey) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestVariantKey) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

// Payload of UpdateTestVariant task.
type UpdateTestVariant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestVariantKey *TestVariantKey `protobuf:"bytes,1,opt,name=test_variant_key,json=testVariantKey,proto3" json:"test_variant_key,omitempty"`
	// The time this task is ready to be enqueued.
	// The task will run only if this time matches the AnalyzedTestVariants row's
	// NextUpdateTaskEnqueueTime.
	EnqueueTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=enqueue_time,json=enqueueTime,proto3" json:"enqueue_time,omitempty"`
}

func (x *UpdateTestVariant) Reset() {
	*x = UpdateTestVariant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestVariant) ProtoMessage() {}

func (x *UpdateTestVariant) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestVariant.ProtoReflect.Descriptor instead.
func (*UpdateTestVariant) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateTestVariant) GetTestVariantKey() *TestVariantKey {
	if x != nil {
		return x.TestVariantKey
	}
	return nil
}

func (x *UpdateTestVariant) GetEnqueueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EnqueueTime
	}
	return nil
}

// Payload of ExportTestVariants task.
type ExportTestVariants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LUCI Realm. Test variants in this realm are exported.
	Realm string `protobuf:"bytes,1,opt,name=realm,proto3" json:"realm,omitempty"`
	// BigQuery table to export test variants to.
	CloudProject string `protobuf:"bytes,2,opt,name=cloud_project,json=cloudProject,proto3" json:"cloud_project,omitempty"`
	Dataset      string `protobuf:"bytes,3,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Table        string `protobuf:"bytes,4,opt,name=table,proto3" json:"table,omitempty"`
	// Represents a function Variant -> bool.
	// Test variants satisfy this predicate are exported.
	Predicate *v11.AnalyzedTestVariantPredicate `protobuf:"bytes,5,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// Time range of the task.
	// The ranges serves 2 purposes:
	// - Test variants satisfy the predicate within the time_range are exported.
	// - Each row uses this time_range as their default time range*. Meaning each row
	//   contains the information of the test variants within the time range,
	//   especially, the row contains the verdicts that weetbix ingested within
	//   the range, and compute the flake_statistics using those verdicts.
	//   * Note that a row can have a narrower time_range, if the test variant's
	//     status changes within the time_range.
	TimeRange *v11.TimeRange `protobuf:"bytes,6,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
}

func (x *ExportTestVariants) Reset() {
	*x = ExportTestVariants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportTestVariants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportTestVariants) ProtoMessage() {}

func (x *ExportTestVariants) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportTestVariants.ProtoReflect.Descriptor instead.
func (*ExportTestVariants) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescGZIP(), []int{5}
}

func (x *ExportTestVariants) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *ExportTestVariants) GetCloudProject() string {
	if x != nil {
		return x.CloudProject
	}
	return ""
}

func (x *ExportTestVariants) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *ExportTestVariants) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ExportTestVariants) GetPredicate() *v11.AnalyzedTestVariantPredicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *ExportTestVariants) GetTimeRange() *v11.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

// Payload of the ReclusterChunks task.
type ReclusterChunks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The LUCI Project containing test results to be re-clustered.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The attempt time for which this task is. This should be cross-referenced
	// with the ReclusteringRuns table to identify the reclustering parameters.
	// This is also the soft deadline for the task.
	AttemptTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=attempt_time,json=attemptTime,proto3" json:"attempt_time,omitempty"`
	// The exclusive lower bound defining the range of Chunk IDs to
	// be re-clustered. To define the table start, use the empty string ("").
	StartChunkId string `protobuf:"bytes,3,opt,name=start_chunk_id,json=startChunkId,proto3" json:"start_chunk_id,omitempty"`
	// The inclusive upper bound defining the range of Chunk IDs to
	// be re-clustered. To define the table end use "ff" x 16, i.e.
	// "ffffffffffffffffffffffffffffffff".
	EndChunkId string `protobuf:"bytes,4,opt,name=end_chunk_id,json=endChunkId,proto3" json:"end_chunk_id,omitempty"`
	// State to be passed from one execution of the task to the next.
	// To fit with autoscaling, each task aims to execute only for a short time
	// before enqueuing another task to act as its continuation.
	// Must be populated on all tasks, even on the initial task.
	State *ReclusterChunkState `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ReclusterChunks) Reset() {
	*x = ReclusterChunks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReclusterChunks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReclusterChunks) ProtoMessage() {}

func (x *ReclusterChunks) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReclusterChunks.ProtoReflect.Descriptor instead.
func (*ReclusterChunks) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescGZIP(), []int{6}
}

func (x *ReclusterChunks) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ReclusterChunks) GetAttemptTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AttemptTime
	}
	return nil
}

func (x *ReclusterChunks) GetStartChunkId() string {
	if x != nil {
		return x.StartChunkId
	}
	return ""
}

func (x *ReclusterChunks) GetEndChunkId() string {
	if x != nil {
		return x.EndChunkId
	}
	return ""
}

func (x *ReclusterChunks) GetState() *ReclusterChunkState {
	if x != nil {
		return x.State
	}
	return nil
}

// ReclusterChunkState captures state passed from one execution of a
// ReclusterChunks task to the next.
type ReclusterChunkState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The exclusive lower bound of Chunk IDs processed to date.
	CurrentChunkId string `protobuf:"bytes,1,opt,name=current_chunk_id,json=currentChunkId,proto3" json:"current_chunk_id,omitempty"`
	// The next time a progress report should be made.
	NextReportDue *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=next_report_due,json=nextReportDue,proto3" json:"next_report_due,omitempty"`
	// Whether progress has been reported at least once.
	ReportedOnce bool `protobuf:"varint,3,opt,name=reported_once,json=reportedOnce,proto3" json:"reported_once,omitempty"`
	// The last progress value which was reported.
	LastReportedProgress int64 `protobuf:"varint,4,opt,name=last_reported_progress,json=lastReportedProgress,proto3" json:"last_reported_progress,omitempty"`
}

func (x *ReclusterChunkState) Reset() {
	*x = ReclusterChunkState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReclusterChunkState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReclusterChunkState) ProtoMessage() {}

func (x *ReclusterChunkState) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReclusterChunkState.ProtoReflect.Descriptor instead.
func (*ReclusterChunkState) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescGZIP(), []int{7}
}

func (x *ReclusterChunkState) GetCurrentChunkId() string {
	if x != nil {
		return x.CurrentChunkId
	}
	return ""
}

func (x *ReclusterChunkState) GetNextReportDue() *timestamppb.Timestamp {
	if x != nil {
		return x.NextReportDue
	}
	return nil
}

func (x *ReclusterChunkState) GetReportedOnce() bool {
	if x != nil {
		return x.ReportedOnce
	}
	return false
}

func (x *ReclusterChunkState) GetLastReportedProgress() int64 {
	if x != nil {
		return x.LastReportedProgress
	}
	return 0
}

// Payload of IngestTestVerdicts task.
type IngestTestVerdicts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp representing the start of the data retention period
	// for the ingested test results. In case of multiple builds
	// ingested for one CV run, the partition_time used for all
	// builds must be the same.
	PartitionTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=partition_time,json=partitionTime,proto3" json:"partition_time,omitempty"`
	// The build that is being ingested.
	Build *proto.BuildResult `protobuf:"bytes,2,opt,name=build,proto3" json:"build,omitempty"`
	// Context about the presubmit run the build was a part of. Only
	// populated if the build is a presubmit run.
	PresubmitRun *proto.PresubmitResult `protobuf:"bytes,3,opt,name=presubmit_run,json=presubmitRun,proto3" json:"presubmit_run,omitempty"`
}

func (x *IngestTestVerdicts) Reset() {
	*x = IngestTestVerdicts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestTestVerdicts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestTestVerdicts) ProtoMessage() {}

func (x *IngestTestVerdicts) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestTestVerdicts.ProtoReflect.Descriptor instead.
func (*IngestTestVerdicts) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescGZIP(), []int{8}
}

func (x *IngestTestVerdicts) GetPartitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PartitionTime
	}
	return nil
}

func (x *IngestTestVerdicts) GetBuild() *proto.BuildResult {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *IngestTestVerdicts) GetPresubmitRun() *proto.PresubmitResult {
	if x != nil {
		return x.PresubmitRun
	}
	return nil
}

var File_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto protoreflect.FileDescriptor

var file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x70, 0x62,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x77, 0x65,
	0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f,
	0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x77,
	0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x46, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2f, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x02, 0x0a, 0x11, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x41, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x45, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x58, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x75,
	0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08,
	0x04, 0x10, 0x08, 0x22, 0x5c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x42, 0x12,
	0x3c, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x22, 0xd1, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x65, 0x65,
	0x74, 0x62, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x42, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x65, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12,
	0x50, 0x0a, 0x10, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x65, 0x65, 0x74,
	0x62, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xfd, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0xf5, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3d,
	0x0a, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x52, 0x65,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4f,
	0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x12, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73,
	0x12, 0x41, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x58, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x52, 0x75, 0x6e, 0x42, 0x30, 0x5a, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescOnce sync.Once
	file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescData = file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDesc
)

func file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescGZIP() []byte {
	file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescOnce.Do(func() {
		file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescData)
	})
	return file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDescData
}

var file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_goTypes = []interface{}{
	(*IngestTestResults)(nil),                // 0: weetbix.internal.tasks.IngestTestResults
	(*ResultDB)(nil),                         // 1: weetbix.internal.tasks.ResultDB
	(*CollectTestResults)(nil),               // 2: weetbix.internal.tasks.CollectTestResults
	(*TestVariantKey)(nil),                   // 3: weetbix.internal.tasks.TestVariantKey
	(*UpdateTestVariant)(nil),                // 4: weetbix.internal.tasks.UpdateTestVariant
	(*ExportTestVariants)(nil),               // 5: weetbix.internal.tasks.ExportTestVariants
	(*ReclusterChunks)(nil),                  // 6: weetbix.internal.tasks.ReclusterChunks
	(*ReclusterChunkState)(nil),              // 7: weetbix.internal.tasks.ReclusterChunkState
	(*IngestTestVerdicts)(nil),               // 8: weetbix.internal.tasks.IngestTestVerdicts
	(*timestamppb.Timestamp)(nil),            // 9: google.protobuf.Timestamp
	(*proto.BuildResult)(nil),                // 10: weetbix.internal.ingestion.control.BuildResult
	(*proto.PresubmitResult)(nil),            // 11: weetbix.internal.ingestion.control.PresubmitResult
	(*v1.Invocation)(nil),                    // 12: luci.resultdb.v1.Invocation
	(*v11.AnalyzedTestVariantPredicate)(nil), // 13: weetbix.v1.AnalyzedTestVariantPredicate
	(*v11.TimeRange)(nil),                    // 14: weetbix.v1.TimeRange
}
var file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_depIdxs = []int32{
	9,  // 0: weetbix.internal.tasks.IngestTestResults.partition_time:type_name -> google.protobuf.Timestamp
	10, // 1: weetbix.internal.tasks.IngestTestResults.build:type_name -> weetbix.internal.ingestion.control.BuildResult
	11, // 2: weetbix.internal.tasks.IngestTestResults.presubmit_run:type_name -> weetbix.internal.ingestion.control.PresubmitResult
	12, // 3: weetbix.internal.tasks.ResultDB.invocation:type_name -> luci.resultdb.v1.Invocation
	1,  // 4: weetbix.internal.tasks.CollectTestResults.resultdb:type_name -> weetbix.internal.tasks.ResultDB
	3,  // 5: weetbix.internal.tasks.UpdateTestVariant.test_variant_key:type_name -> weetbix.internal.tasks.TestVariantKey
	9,  // 6: weetbix.internal.tasks.UpdateTestVariant.enqueue_time:type_name -> google.protobuf.Timestamp
	13, // 7: weetbix.internal.tasks.ExportTestVariants.predicate:type_name -> weetbix.v1.AnalyzedTestVariantPredicate
	14, // 8: weetbix.internal.tasks.ExportTestVariants.time_range:type_name -> weetbix.v1.TimeRange
	9,  // 9: weetbix.internal.tasks.ReclusterChunks.attempt_time:type_name -> google.protobuf.Timestamp
	7,  // 10: weetbix.internal.tasks.ReclusterChunks.state:type_name -> weetbix.internal.tasks.ReclusterChunkState
	9,  // 11: weetbix.internal.tasks.ReclusterChunkState.next_report_due:type_name -> google.protobuf.Timestamp
	9,  // 12: weetbix.internal.tasks.IngestTestVerdicts.partition_time:type_name -> google.protobuf.Timestamp
	10, // 13: weetbix.internal.tasks.IngestTestVerdicts.build:type_name -> weetbix.internal.ingestion.control.BuildResult
	11, // 14: weetbix.internal.tasks.IngestTestVerdicts.presubmit_run:type_name -> weetbix.internal.ingestion.control.PresubmitResult
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_init() }
func file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_init() {
	if File_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestTestResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectTestResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestVariantKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTestVariant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportTestVariants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReclusterChunks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReclusterChunkState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestTestVerdicts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_goTypes,
		DependencyIndexes: file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_depIdxs,
		MessageInfos:      file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_msgTypes,
	}.Build()
	File_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto = out.File
	file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_rawDesc = nil
	file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_goTypes = nil
	file_infra_appengine_weetbix_internal_tasks_taskspb_tasks_proto_depIdxs = nil
}
